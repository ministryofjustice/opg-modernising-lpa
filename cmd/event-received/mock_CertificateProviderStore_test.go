// Code generated by mockery v2.42.0. DO NOT EDIT.

package main

import (
	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"
	actoruid "github.com/ministryofjustice/opg-modernising-lpa/internal/actor/actoruid"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockCertificateProviderStore is an autogenerated mock type for the CertificateProviderStore type
type mockCertificateProviderStore struct {
	mock.Mock
}

type mockCertificateProviderStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCertificateProviderStore) EXPECT() *mockCertificateProviderStore_Expecter {
	return &mockCertificateProviderStore_Expecter{mock: &_m.Mock}
}

// CreatePaper provides a mock function with given fields: ctx, donor, certificateProviderUID
func (_m *mockCertificateProviderStore) CreatePaper(ctx context.Context, donor *actor.DonorProvidedDetails, certificateProviderUID actoruid.UID) error {
	ret := _m.Called(ctx, donor, certificateProviderUID)

	if len(ret) == 0 {
		panic("no return value specified for CreatePaper")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *actor.DonorProvidedDetails, actoruid.UID) error); ok {
		r0 = rf(ctx, donor, certificateProviderUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCertificateProviderStore_CreatePaper_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaper'
type mockCertificateProviderStore_CreatePaper_Call struct {
	*mock.Call
}

// CreatePaper is a helper method to define mock.On call
//   - ctx context.Context
//   - donor *actor.DonorProvidedDetails
//   - certificateProviderUID actoruid.UID
func (_e *mockCertificateProviderStore_Expecter) CreatePaper(ctx interface{}, donor interface{}, certificateProviderUID interface{}) *mockCertificateProviderStore_CreatePaper_Call {
	return &mockCertificateProviderStore_CreatePaper_Call{Call: _e.mock.On("CreatePaper", ctx, donor, certificateProviderUID)}
}

func (_c *mockCertificateProviderStore_CreatePaper_Call) Run(run func(ctx context.Context, donor *actor.DonorProvidedDetails, certificateProviderUID actoruid.UID)) *mockCertificateProviderStore_CreatePaper_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*actor.DonorProvidedDetails), args[2].(actoruid.UID))
	})
	return _c
}

func (_c *mockCertificateProviderStore_CreatePaper_Call) Return(_a0 error) *mockCertificateProviderStore_CreatePaper_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCertificateProviderStore_CreatePaper_Call) RunAndReturn(run func(context.Context, *actor.DonorProvidedDetails, actoruid.UID) error) *mockCertificateProviderStore_CreatePaper_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCertificateProviderStore creates a new instance of mockCertificateProviderStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCertificateProviderStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCertificateProviderStore {
	mock := &mockCertificateProviderStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
