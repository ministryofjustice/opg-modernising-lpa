// Code generated by mockery. DO NOT EDIT.

package main

import (
	context "context"

	events "github.com/aws/aws-lambda-go/events"
	mock "github.com/stretchr/testify/mock"
)

// mockHandler is an autogenerated mock type for the Handler type
type mockHandler struct {
	mock.Mock
}

type mockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *mockHandler) EXPECT() *mockHandler_Expecter {
	return &mockHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockHandler) Handle(_a0 context.Context, _a1 factory, _a2 *events.CloudWatchEvent) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, factory, *events.CloudWatchEvent) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type mockHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 factory
//   - _a2 *events.CloudWatchEvent
func (_e *mockHandler_Expecter) Handle(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockHandler_Handle_Call {
	return &mockHandler_Handle_Call{Call: _e.mock.On("Handle", _a0, _a1, _a2)}
}

func (_c *mockHandler_Handle_Call) Run(run func(_a0 context.Context, _a1 factory, _a2 *events.CloudWatchEvent)) *mockHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(factory), args[2].(*events.CloudWatchEvent))
	})
	return _c
}

func (_c *mockHandler_Handle_Call) Return(_a0 error) *mockHandler_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockHandler_Handle_Call) RunAndReturn(run func(context.Context, factory, *events.CloudWatchEvent) error) *mockHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// newMockHandler creates a new instance of mockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockHandler {
	mock := &mockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
