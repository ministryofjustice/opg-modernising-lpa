// Code generated by mockery. DO NOT EDIT.

package main

import (
	context "context"

	appcontext "github.com/ministryofjustice/opg-modernising-lpa/internal/appcontext"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mockFactory is an autogenerated mock type for the factory type
type mockFactory struct {
	mock.Mock
}

type mockFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFactory) EXPECT() *mockFactory_Expecter {
	return &mockFactory_Expecter{mock: &_m.Mock}
}

// AppData provides a mock function with no fields
func (_m *mockFactory) AppData() (appcontext.Data, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AppData")
	}

	var r0 appcontext.Data
	var r1 error
	if rf, ok := ret.Get(0).(func() (appcontext.Data, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() appcontext.Data); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(appcontext.Data)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFactory_AppData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppData'
type mockFactory_AppData_Call struct {
	*mock.Call
}

// AppData is a helper method to define mock.On call
func (_e *mockFactory_Expecter) AppData() *mockFactory_AppData_Call {
	return &mockFactory_AppData_Call{Call: _e.mock.On("AppData")}
}

func (_c *mockFactory_AppData_Call) Run(run func()) *mockFactory_AppData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_AppData_Call) Return(_a0 appcontext.Data, _a1 error) *mockFactory_AppData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFactory_AppData_Call) RunAndReturn(run func() (appcontext.Data, error)) *mockFactory_AppData_Call {
	_c.Call.Return(run)
	return _c
}

// AppPublicURL provides a mock function with no fields
func (_m *mockFactory) AppPublicURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AppPublicURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockFactory_AppPublicURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppPublicURL'
type mockFactory_AppPublicURL_Call struct {
	*mock.Call
}

// AppPublicURL is a helper method to define mock.On call
func (_e *mockFactory_Expecter) AppPublicURL() *mockFactory_AppPublicURL_Call {
	return &mockFactory_AppPublicURL_Call{Call: _e.mock.On("AppPublicURL")}
}

func (_c *mockFactory_AppPublicURL_Call) Run(run func()) *mockFactory_AppPublicURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_AppPublicURL_Call) Return(_a0 string) *mockFactory_AppPublicURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFactory_AppPublicURL_Call) RunAndReturn(run func() string) *mockFactory_AppPublicURL_Call {
	_c.Call.Return(run)
	return _c
}

// Bundle provides a mock function with no fields
func (_m *mockFactory) Bundle() (Bundle, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bundle")
	}

	var r0 Bundle
	var r1 error
	if rf, ok := ret.Get(0).(func() (Bundle, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() Bundle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Bundle)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFactory_Bundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bundle'
type mockFactory_Bundle_Call struct {
	*mock.Call
}

// Bundle is a helper method to define mock.On call
func (_e *mockFactory_Expecter) Bundle() *mockFactory_Bundle_Call {
	return &mockFactory_Bundle_Call{Call: _e.mock.On("Bundle")}
}

func (_c *mockFactory_Bundle_Call) Run(run func()) *mockFactory_Bundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_Bundle_Call) Return(_a0 Bundle, _a1 error) *mockFactory_Bundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFactory_Bundle_Call) RunAndReturn(run func() (Bundle, error)) *mockFactory_Bundle_Call {
	_c.Call.Return(run)
	return _c
}

// CertificateProviderStore provides a mock function with no fields
func (_m *mockFactory) CertificateProviderStore() CertificateProviderStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CertificateProviderStore")
	}

	var r0 CertificateProviderStore
	if rf, ok := ret.Get(0).(func() CertificateProviderStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CertificateProviderStore)
		}
	}

	return r0
}

// mockFactory_CertificateProviderStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificateProviderStore'
type mockFactory_CertificateProviderStore_Call struct {
	*mock.Call
}

// CertificateProviderStore is a helper method to define mock.On call
func (_e *mockFactory_Expecter) CertificateProviderStore() *mockFactory_CertificateProviderStore_Call {
	return &mockFactory_CertificateProviderStore_Call{Call: _e.mock.On("CertificateProviderStore")}
}

func (_c *mockFactory_CertificateProviderStore_Call) Run(run func()) *mockFactory_CertificateProviderStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_CertificateProviderStore_Call) Return(_a0 CertificateProviderStore) *mockFactory_CertificateProviderStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFactory_CertificateProviderStore_Call) RunAndReturn(run func() CertificateProviderStore) *mockFactory_CertificateProviderStore_Call {
	_c.Call.Return(run)
	return _c
}

// DonorStartURL provides a mock function with no fields
func (_m *mockFactory) DonorStartURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DonorStartURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockFactory_DonorStartURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DonorStartURL'
type mockFactory_DonorStartURL_Call struct {
	*mock.Call
}

// DonorStartURL is a helper method to define mock.On call
func (_e *mockFactory_Expecter) DonorStartURL() *mockFactory_DonorStartURL_Call {
	return &mockFactory_DonorStartURL_Call{Call: _e.mock.On("DonorStartURL")}
}

func (_c *mockFactory_DonorStartURL_Call) Run(run func()) *mockFactory_DonorStartURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_DonorStartURL_Call) Return(_a0 string) *mockFactory_DonorStartURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFactory_DonorStartURL_Call) RunAndReturn(run func() string) *mockFactory_DonorStartURL_Call {
	_c.Call.Return(run)
	return _c
}

// DynamoClient provides a mock function with no fields
func (_m *mockFactory) DynamoClient() dynamodbClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DynamoClient")
	}

	var r0 dynamodbClient
	if rf, ok := ret.Get(0).(func() dynamodbClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynamodbClient)
		}
	}

	return r0
}

// mockFactory_DynamoClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DynamoClient'
type mockFactory_DynamoClient_Call struct {
	*mock.Call
}

// DynamoClient is a helper method to define mock.On call
func (_e *mockFactory_Expecter) DynamoClient() *mockFactory_DynamoClient_Call {
	return &mockFactory_DynamoClient_Call{Call: _e.mock.On("DynamoClient")}
}

func (_c *mockFactory_DynamoClient_Call) Run(run func()) *mockFactory_DynamoClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_DynamoClient_Call) Return(_a0 dynamodbClient) *mockFactory_DynamoClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFactory_DynamoClient_Call) RunAndReturn(run func() dynamodbClient) *mockFactory_DynamoClient_Call {
	_c.Call.Return(run)
	return _c
}

// EventClient provides a mock function with no fields
func (_m *mockFactory) EventClient() EventClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EventClient")
	}

	var r0 EventClient
	if rf, ok := ret.Get(0).(func() EventClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EventClient)
		}
	}

	return r0
}

// mockFactory_EventClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventClient'
type mockFactory_EventClient_Call struct {
	*mock.Call
}

// EventClient is a helper method to define mock.On call
func (_e *mockFactory_Expecter) EventClient() *mockFactory_EventClient_Call {
	return &mockFactory_EventClient_Call{Call: _e.mock.On("EventClient")}
}

func (_c *mockFactory_EventClient_Call) Run(run func()) *mockFactory_EventClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_EventClient_Call) Return(_a0 EventClient) *mockFactory_EventClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFactory_EventClient_Call) RunAndReturn(run func() EventClient) *mockFactory_EventClient_Call {
	_c.Call.Return(run)
	return _c
}

// LpaStoreClient provides a mock function with no fields
func (_m *mockFactory) LpaStoreClient() (LpaStoreClient, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LpaStoreClient")
	}

	var r0 LpaStoreClient
	var r1 error
	if rf, ok := ret.Get(0).(func() (LpaStoreClient, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() LpaStoreClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(LpaStoreClient)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFactory_LpaStoreClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LpaStoreClient'
type mockFactory_LpaStoreClient_Call struct {
	*mock.Call
}

// LpaStoreClient is a helper method to define mock.On call
func (_e *mockFactory_Expecter) LpaStoreClient() *mockFactory_LpaStoreClient_Call {
	return &mockFactory_LpaStoreClient_Call{Call: _e.mock.On("LpaStoreClient")}
}

func (_c *mockFactory_LpaStoreClient_Call) Run(run func()) *mockFactory_LpaStoreClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_LpaStoreClient_Call) Return(_a0 LpaStoreClient, _a1 error) *mockFactory_LpaStoreClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFactory_LpaStoreClient_Call) RunAndReturn(run func() (LpaStoreClient, error)) *mockFactory_LpaStoreClient_Call {
	_c.Call.Return(run)
	return _c
}

// NotifyClient provides a mock function with given fields: ctx
func (_m *mockFactory) NotifyClient(ctx context.Context) (NotifyClient, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NotifyClient")
	}

	var r0 NotifyClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (NotifyClient, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) NotifyClient); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(NotifyClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFactory_NotifyClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyClient'
type mockFactory_NotifyClient_Call struct {
	*mock.Call
}

// NotifyClient is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockFactory_Expecter) NotifyClient(ctx interface{}) *mockFactory_NotifyClient_Call {
	return &mockFactory_NotifyClient_Call{Call: _e.mock.On("NotifyClient", ctx)}
}

func (_c *mockFactory_NotifyClient_Call) Run(run func(ctx context.Context)) *mockFactory_NotifyClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockFactory_NotifyClient_Call) Return(_a0 NotifyClient, _a1 error) *mockFactory_NotifyClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFactory_NotifyClient_Call) RunAndReturn(run func(context.Context) (NotifyClient, error)) *mockFactory_NotifyClient_Call {
	_c.Call.Return(run)
	return _c
}

// Now provides a mock function with no fields
func (_m *mockFactory) Now() func() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 func() time.Time
	if rf, ok := ret.Get(0).(func() func() time.Time); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() time.Time)
		}
	}

	return r0
}

// mockFactory_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type mockFactory_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
func (_e *mockFactory_Expecter) Now() *mockFactory_Now_Call {
	return &mockFactory_Now_Call{Call: _e.mock.On("Now")}
}

func (_c *mockFactory_Now_Call) Run(run func()) *mockFactory_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_Now_Call) Return(_a0 func() time.Time) *mockFactory_Now_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFactory_Now_Call) RunAndReturn(run func() func() time.Time) *mockFactory_Now_Call {
	_c.Call.Return(run)
	return _c
}

// ScheduledStore provides a mock function with no fields
func (_m *mockFactory) ScheduledStore() ScheduledStore {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ScheduledStore")
	}

	var r0 ScheduledStore
	if rf, ok := ret.Get(0).(func() ScheduledStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ScheduledStore)
		}
	}

	return r0
}

// mockFactory_ScheduledStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduledStore'
type mockFactory_ScheduledStore_Call struct {
	*mock.Call
}

// ScheduledStore is a helper method to define mock.On call
func (_e *mockFactory_Expecter) ScheduledStore() *mockFactory_ScheduledStore_Call {
	return &mockFactory_ScheduledStore_Call{Call: _e.mock.On("ScheduledStore")}
}

func (_c *mockFactory_ScheduledStore_Call) Run(run func()) *mockFactory_ScheduledStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_ScheduledStore_Call) Return(_a0 ScheduledStore) *mockFactory_ScheduledStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFactory_ScheduledStore_Call) RunAndReturn(run func() ScheduledStore) *mockFactory_ScheduledStore_Call {
	_c.Call.Return(run)
	return _c
}

// ShareCodeSender provides a mock function with given fields: ctx
func (_m *mockFactory) ShareCodeSender(ctx context.Context) (ShareCodeSender, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ShareCodeSender")
	}

	var r0 ShareCodeSender
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ShareCodeSender, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ShareCodeSender); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ShareCodeSender)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFactory_ShareCodeSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShareCodeSender'
type mockFactory_ShareCodeSender_Call struct {
	*mock.Call
}

// ShareCodeSender is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockFactory_Expecter) ShareCodeSender(ctx interface{}) *mockFactory_ShareCodeSender_Call {
	return &mockFactory_ShareCodeSender_Call{Call: _e.mock.On("ShareCodeSender", ctx)}
}

func (_c *mockFactory_ShareCodeSender_Call) Run(run func(ctx context.Context)) *mockFactory_ShareCodeSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockFactory_ShareCodeSender_Call) Return(_a0 ShareCodeSender, _a1 error) *mockFactory_ShareCodeSender_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFactory_ShareCodeSender_Call) RunAndReturn(run func(context.Context) (ShareCodeSender, error)) *mockFactory_ShareCodeSender_Call {
	_c.Call.Return(run)
	return _c
}

// UidClient provides a mock function with no fields
func (_m *mockFactory) UidClient() UidClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UidClient")
	}

	var r0 UidClient
	if rf, ok := ret.Get(0).(func() UidClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UidClient)
		}
	}

	return r0
}

// mockFactory_UidClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UidClient'
type mockFactory_UidClient_Call struct {
	*mock.Call
}

// UidClient is a helper method to define mock.On call
func (_e *mockFactory_Expecter) UidClient() *mockFactory_UidClient_Call {
	return &mockFactory_UidClient_Call{Call: _e.mock.On("UidClient")}
}

func (_c *mockFactory_UidClient_Call) Run(run func()) *mockFactory_UidClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_UidClient_Call) Return(_a0 UidClient) *mockFactory_UidClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFactory_UidClient_Call) RunAndReturn(run func() UidClient) *mockFactory_UidClient_Call {
	_c.Call.Return(run)
	return _c
}

// UidStore provides a mock function with no fields
func (_m *mockFactory) UidStore() (UidStore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UidStore")
	}

	var r0 UidStore
	var r1 error
	if rf, ok := ret.Get(0).(func() (UidStore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() UidStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UidStore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFactory_UidStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UidStore'
type mockFactory_UidStore_Call struct {
	*mock.Call
}

// UidStore is a helper method to define mock.On call
func (_e *mockFactory_Expecter) UidStore() *mockFactory_UidStore_Call {
	return &mockFactory_UidStore_Call{Call: _e.mock.On("UidStore")}
}

func (_c *mockFactory_UidStore_Call) Run(run func()) *mockFactory_UidStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_UidStore_Call) Return(_a0 UidStore, _a1 error) *mockFactory_UidStore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFactory_UidStore_Call) RunAndReturn(run func() (UidStore, error)) *mockFactory_UidStore_Call {
	_c.Call.Return(run)
	return _c
}

// UuidString provides a mock function with no fields
func (_m *mockFactory) UuidString() func() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UuidString")
	}

	var r0 func() string
	if rf, ok := ret.Get(0).(func() func() string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func() string)
		}
	}

	return r0
}

// mockFactory_UuidString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UuidString'
type mockFactory_UuidString_Call struct {
	*mock.Call
}

// UuidString is a helper method to define mock.On call
func (_e *mockFactory_Expecter) UuidString() *mockFactory_UuidString_Call {
	return &mockFactory_UuidString_Call{Call: _e.mock.On("UuidString")}
}

func (_c *mockFactory_UuidString_Call) Run(run func()) *mockFactory_UuidString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_UuidString_Call) Return(_a0 func() string) *mockFactory_UuidString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFactory_UuidString_Call) RunAndReturn(run func() func() string) *mockFactory_UuidString_Call {
	_c.Call.Return(run)
	return _c
}

// newMockFactory creates a new instance of mockFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFactory {
	mock := &mockFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
