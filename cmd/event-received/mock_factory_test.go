// Code generated by mockery v2.42.2. DO NOT EDIT.

package main

import (
	context "context"

	page "github.com/ministryofjustice/opg-modernising-lpa/internal/page"
	mock "github.com/stretchr/testify/mock"
)

// mockFactory is an autogenerated mock type for the factory type
type mockFactory struct {
	mock.Mock
}

type mockFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFactory) EXPECT() *mockFactory_Expecter {
	return &mockFactory_Expecter{mock: &_m.Mock}
}

// AppData provides a mock function with given fields:
func (_m *mockFactory) AppData() (page.AppData, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AppData")
	}

	var r0 page.AppData
	var r1 error
	if rf, ok := ret.Get(0).(func() (page.AppData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() page.AppData); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(page.AppData)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFactory_AppData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppData'
type mockFactory_AppData_Call struct {
	*mock.Call
}

// AppData is a helper method to define mock.On call
func (_e *mockFactory_Expecter) AppData() *mockFactory_AppData_Call {
	return &mockFactory_AppData_Call{Call: _e.mock.On("AppData")}
}

func (_c *mockFactory_AppData_Call) Run(run func()) *mockFactory_AppData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_AppData_Call) Return(_a0 page.AppData, _a1 error) *mockFactory_AppData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFactory_AppData_Call) RunAndReturn(run func() (page.AppData, error)) *mockFactory_AppData_Call {
	_c.Call.Return(run)
	return _c
}

// LpaStoreClient provides a mock function with given fields:
func (_m *mockFactory) LpaStoreClient() (LpaStoreClient, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LpaStoreClient")
	}

	var r0 LpaStoreClient
	var r1 error
	if rf, ok := ret.Get(0).(func() (LpaStoreClient, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() LpaStoreClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(LpaStoreClient)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFactory_LpaStoreClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LpaStoreClient'
type mockFactory_LpaStoreClient_Call struct {
	*mock.Call
}

// LpaStoreClient is a helper method to define mock.On call
func (_e *mockFactory_Expecter) LpaStoreClient() *mockFactory_LpaStoreClient_Call {
	return &mockFactory_LpaStoreClient_Call{Call: _e.mock.On("LpaStoreClient")}
}

func (_c *mockFactory_LpaStoreClient_Call) Run(run func()) *mockFactory_LpaStoreClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_LpaStoreClient_Call) Return(_a0 LpaStoreClient, _a1 error) *mockFactory_LpaStoreClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFactory_LpaStoreClient_Call) RunAndReturn(run func() (LpaStoreClient, error)) *mockFactory_LpaStoreClient_Call {
	_c.Call.Return(run)
	return _c
}

// ShareCodeSender provides a mock function with given fields: ctx
func (_m *mockFactory) ShareCodeSender(ctx context.Context) (ShareCodeSender, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ShareCodeSender")
	}

	var r0 ShareCodeSender
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (ShareCodeSender, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) ShareCodeSender); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ShareCodeSender)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFactory_ShareCodeSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShareCodeSender'
type mockFactory_ShareCodeSender_Call struct {
	*mock.Call
}

// ShareCodeSender is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockFactory_Expecter) ShareCodeSender(ctx interface{}) *mockFactory_ShareCodeSender_Call {
	return &mockFactory_ShareCodeSender_Call{Call: _e.mock.On("ShareCodeSender", ctx)}
}

func (_c *mockFactory_ShareCodeSender_Call) Run(run func(ctx context.Context)) *mockFactory_ShareCodeSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockFactory_ShareCodeSender_Call) Return(_a0 ShareCodeSender, _a1 error) *mockFactory_ShareCodeSender_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFactory_ShareCodeSender_Call) RunAndReturn(run func(context.Context) (ShareCodeSender, error)) *mockFactory_ShareCodeSender_Call {
	_c.Call.Return(run)
	return _c
}

// UidClient provides a mock function with given fields:
func (_m *mockFactory) UidClient() UidClient {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UidClient")
	}

	var r0 UidClient
	if rf, ok := ret.Get(0).(func() UidClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UidClient)
		}
	}

	return r0
}

// mockFactory_UidClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UidClient'
type mockFactory_UidClient_Call struct {
	*mock.Call
}

// UidClient is a helper method to define mock.On call
func (_e *mockFactory_Expecter) UidClient() *mockFactory_UidClient_Call {
	return &mockFactory_UidClient_Call{Call: _e.mock.On("UidClient")}
}

func (_c *mockFactory_UidClient_Call) Run(run func()) *mockFactory_UidClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_UidClient_Call) Return(_a0 UidClient) *mockFactory_UidClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFactory_UidClient_Call) RunAndReturn(run func() UidClient) *mockFactory_UidClient_Call {
	_c.Call.Return(run)
	return _c
}

// UidStore provides a mock function with given fields:
func (_m *mockFactory) UidStore() (UidStore, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UidStore")
	}

	var r0 UidStore
	var r1 error
	if rf, ok := ret.Get(0).(func() (UidStore, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() UidStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UidStore)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFactory_UidStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UidStore'
type mockFactory_UidStore_Call struct {
	*mock.Call
}

// UidStore is a helper method to define mock.On call
func (_e *mockFactory_Expecter) UidStore() *mockFactory_UidStore_Call {
	return &mockFactory_UidStore_Call{Call: _e.mock.On("UidStore")}
}

func (_c *mockFactory_UidStore_Call) Run(run func()) *mockFactory_UidStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockFactory_UidStore_Call) Return(_a0 UidStore, _a1 error) *mockFactory_UidStore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFactory_UidStore_Call) RunAndReturn(run func() (UidStore, error)) *mockFactory_UidStore_Call {
	_c.Call.Return(run)
	return _c
}

// newMockFactory creates a new instance of mockFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFactory {
	mock := &mockFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
