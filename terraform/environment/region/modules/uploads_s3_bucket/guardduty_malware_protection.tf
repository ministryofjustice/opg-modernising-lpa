resource "aws_guardduty_malware_protection_plan" "main" {
  role = var.guardduty_malware_protection_plan_iam_role.arn

  protected_resource {
    s3_bucket {
      bucket_name = aws_s3_bucket.bucket.id
    }
  }

  actions {
    tagging {
      status = "ENABLED"
    }
  }
  provider = aws.region
  depends_on = [
    aws_iam_role_policy.guardduty_malware_protection
  ]
}

# Additional IAM permissions
resource "aws_iam_role_policy" "guardduty_malware_protection" {
  name     = "guardduty-malware-protection-${data.aws_default_tags.current.tags.environment-name}"
  role     = var.guardduty_malware_protection_plan_iam_role.id
  policy   = data.aws_iam_policy_document.guardduty_malware_protection.json
  provider = aws.region
}

data "aws_iam_policy_document" "guardduty_malware_protection" {
  statement {
    sid    = "AllowManagedRuleToSendS3EventsToGuardDuty"
    effect = "Allow"
    resources = [
      "arn:aws:events:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*",
    ]
    actions = [
      "events:PutRule",
      "events:DeleteRule",
      "events:PutTargets",
      "events:RemoveTargets"
    ]
    condition {
      test     = "StringLike"
      variable = "events:ManagedBy"
      values   = ["malware-protection-plan.guardduty.amazonaws.com"]
    }
  }
  statement {
    sid    = "AllowGuardDutyToMonitorEventBridgeManagedRule"
    effect = "Allow"
    resources = [
      "arn:aws:events:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*",
    ]
    actions = [
      "events:DescribeRule",
      "events:ListTargetsByRule"
    ]
  }
  statement {
    sid    = "AllowPostScanTag"
    effect = "Allow"
    resources = [
      aws_s3_bucket.bucket.arn,
    ]
    actions = [
      "s3:PutObjectTagging",
      "s3:GetObjectTagging",
      "s3:PutObjectVersionTagging",
      "s3:GetObjectVersionTagging"
    ]
  }
  statement {
    sid    = "AllowEnableS3EventBridgeEvents"
    effect = "Allow"
    resources = [
      aws_s3_bucket.bucket.arn,
    ]
    actions = [
      "s3:PutBucketNotification",
      "s3:GetBucketNotification"
    ]
  }
  statement {
    sid    = "AllowPutValidationObject"
    effect = "Allow"
    resources = [
      "${aws_s3_bucket.bucket.arn}/malware-protection-resource-validation-object",
    ]
    actions = [
      "s3:PutObject",
    ]
  }
  statement {
    sid    = "AllowCheckBucketOwnership"
    effect = "Allow"
    resources = [
      aws_s3_bucket.bucket.arn,
    ]
    actions = [
      "s3:ListBucket",
    ]
  }
  statement {
    sid    = "AllowMalwareScan"
    effect = "Allow"
    resources = [
      aws_s3_bucket.bucket.arn,
    ]
    actions = [
      "s3:GetObject",
      "s3:GetObjectVersion"
    ]
  }
  statement {
    sid    = "AllowDecryptForMalwareScan"
    effect = "Allow"
    resources = [
      data.aws_kms_alias.reduced_fees_uploads_s3_encryption.target_key_arn
    ]
    actions = [
      "kms:GenerateDataKey",
      "kms:Decrypt"
    ]
    condition {
      test     = "StringLike"
      variable = "kms:ViaService"
      values   = ["s3.${data.aws_region.current.name}.amazonaws.com"]
    }
  }
  provider = aws.region
}
