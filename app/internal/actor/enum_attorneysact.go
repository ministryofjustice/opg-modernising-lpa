// Code generated by "enumerator -type AttorneysAct -linecomment"; DO NOT EDIT.
package actor

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AttorneysActUnknown-0]
	_ = x[Jointly-1]
	_ = x[JointlyAndSeverally-2]
	_ = x[JointlyForSomeSeverallyForOthers-3]
}

const _AttorneysAct_name = "Unknownjointlyjointly-and-severallymixed"

var _AttorneysAct_index = [...]uint8{0, 7, 14, 35, 40}

func (i AttorneysAct) String() string {
	if i >= AttorneysAct(len(_AttorneysAct_index)-1) {
		return "AttorneysAct(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AttorneysAct_name[_AttorneysAct_index[i]:_AttorneysAct_index[i+1]]
}

func (i AttorneysAct) IsAttorneysActUnknown() bool {
	return i == AttorneysActUnknown
}

func (i AttorneysAct) IsJointly() bool {
	return i == Jointly
}

func (i AttorneysAct) IsJointlyAndSeverally() bool {
	return i == JointlyAndSeverally
}

func (i AttorneysAct) IsJointlyForSomeSeverallyForOthers() bool {
	return i == JointlyForSomeSeverallyForOthers
}

func ParseAttorneysAct(s string) (AttorneysAct, error) {
	switch s {
	case "Unknown":
		return AttorneysActUnknown, nil
	case "jointly":
		return Jointly, nil
	case "jointly-and-severally":
		return JointlyAndSeverally, nil
	case "mixed":
		return JointlyForSomeSeverallyForOthers, nil
	default:
		return AttorneysAct(0), fmt.Errorf("invalid AttorneysAct '%s'", s)
	}
}

type AttorneysActOptions struct {
	AttorneysActUnknown              AttorneysAct
	Jointly                          AttorneysAct
	JointlyAndSeverally              AttorneysAct
	JointlyForSomeSeverallyForOthers AttorneysAct
}

var AttorneysActValues = AttorneysActOptions{
	AttorneysActUnknown:              AttorneysActUnknown,
	Jointly:                          Jointly,
	JointlyAndSeverally:              JointlyAndSeverally,
	JointlyForSomeSeverallyForOthers: JointlyForSomeSeverallyForOthers,
}
