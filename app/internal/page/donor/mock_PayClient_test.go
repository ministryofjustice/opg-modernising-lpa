// Code generated by mockery v2.20.0. DO NOT EDIT.

package donor

import (
	pay "github.com/ministryofjustice/opg-modernising-lpa/internal/pay"
	mock "github.com/stretchr/testify/mock"
)

// mockPayClient is an autogenerated mock type for the PayClient type
type mockPayClient struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: body
func (_m *mockPayClient) CreatePayment(body pay.CreatePaymentBody) (pay.CreatePaymentResponse, error) {
	ret := _m.Called(body)

	var r0 pay.CreatePaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(pay.CreatePaymentBody) (pay.CreatePaymentResponse, error)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(pay.CreatePaymentBody) pay.CreatePaymentResponse); ok {
		r0 = rf(body)
	} else {
		r0 = ret.Get(0).(pay.CreatePaymentResponse)
	}

	if rf, ok := ret.Get(1).(func(pay.CreatePaymentBody) error); ok {
		r1 = rf(body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayment provides a mock function with given fields: paymentId
func (_m *mockPayClient) GetPayment(paymentId string) (pay.GetPaymentResponse, error) {
	ret := _m.Called(paymentId)

	var r0 pay.GetPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (pay.GetPaymentResponse, error)); ok {
		return rf(paymentId)
	}
	if rf, ok := ret.Get(0).(func(string) pay.GetPaymentResponse); ok {
		r0 = rf(paymentId)
	} else {
		r0 = ret.Get(0).(pay.GetPaymentResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(paymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockPayClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockPayClient creates a new instance of mockPayClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockPayClient(t mockConstructorTestingTnewMockPayClient) *mockPayClient {
	mock := &mockPayClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
