// Code generated by mockery v2.20.0. DO NOT EDIT.

package donor

import (
	context "context"

	page "github.com/ministryofjustice/opg-modernising-lpa/app/internal/page"
	mock "github.com/stretchr/testify/mock"
)

// mockEventStore is an autogenerated mock type for the EventStore type
type mockEventStore struct {
	mock.Mock
}

// CreatePreviousApplication provides a mock function with given fields: _a0, _a1
func (_m *mockEventStore) CreatePreviousApplication(_a0 context.Context, _a1 *page.Lpa) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *page.Lpa) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateReducedFee provides a mock function with given fields: _a0, _a1
func (_m *mockEventStore) CreateReducedFee(_a0 context.Context, _a1 *page.Lpa) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *page.Lpa) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewMockEventStore interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEventStore creates a new instance of mockEventStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEventStore(t mockConstructorTestingTnewMockEventStore) *mockEventStore {
	mock := &mockEventStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
