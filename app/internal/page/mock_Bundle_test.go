// Code generated by mockery v2.20.0. DO NOT EDIT.

package page

import (
	localize "github.com/ministryofjustice/opg-modernising-lpa/internal/localize"
	mock "github.com/stretchr/testify/mock"
)

// mockBundle is an autogenerated mock type for the Bundle type
type mockBundle struct {
	mock.Mock
}

// For provides a mock function with given fields: _a0
func (_m *mockBundle) For(_a0 ...string) *localize.Localizer {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *localize.Localizer
	if rf, ok := ret.Get(0).(func(...string) *localize.Localizer); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*localize.Localizer)
		}
	}

	return r0
}

type mockConstructorTestingTnewMockBundle interface {
	mock.TestingT
	Cleanup(func())
}

// newMockBundle creates a new instance of mockBundle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockBundle(t mockConstructorTestingTnewMockBundle) *mockBundle {
	mock := &mockBundle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
