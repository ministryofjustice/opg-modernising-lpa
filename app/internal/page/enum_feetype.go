// Code generated by "enumerator -type FeeType -linecomment -trimprefix -empty"; DO NOT EDIT.
package page

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[HalfFee-1]
	_ = x[NoFee-2]
	_ = x[Hardship-3]
}

const _FeeType_name = "HalfFeeNoFeeHardship"

var _FeeType_index = [...]uint8{0, 7, 12, 20}

func (i FeeType) String() string {
	i -= 1
	if i >= FeeType(len(_FeeType_index)-1) {
		return "FeeType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _FeeType_name[_FeeType_index[i]:_FeeType_index[i+1]]
}

func (i FeeType) IsHalfFee() bool {
	return i == HalfFee
}

func (i FeeType) IsNoFee() bool {
	return i == NoFee
}

func (i FeeType) IsHardship() bool {
	return i == Hardship
}

func ParseFeeType(s string) (FeeType, error) {
	switch s {
	case "HalfFee":
		return HalfFee, nil
	case "NoFee":
		return NoFee, nil
	case "Hardship":
		return Hardship, nil
	default:
		return FeeType(0), fmt.Errorf("invalid FeeType '%s'", s)
	}
}

type FeeTypeOptions struct {
	HalfFee  FeeType
	NoFee    FeeType
	Hardship FeeType
}

var FeeTypeValues = FeeTypeOptions{
	HalfFee:  HalfFee,
	NoFee:    NoFee,
	Hardship: Hardship,
}

func (i FeeType) Empty() bool {
	return i == FeeType(0)
}
