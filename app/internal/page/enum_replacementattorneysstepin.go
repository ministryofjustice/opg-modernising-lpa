// Code generated by "enumerator -type ReplacementAttorneysStepIn -linecomment -trimprefix"; DO NOT EDIT.
package page

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ReplacementAttorneysStepInUnknown-0]
	_ = x[ReplacementAttorneysStepInWhenAllCanNoLongerAct-1]
	_ = x[ReplacementAttorneysStepInWhenOneCanNoLongerAct-2]
	_ = x[ReplacementAttorneysStepInAnotherWay-3]
}

const _ReplacementAttorneysStepIn_name = "Unknownalloneother"

var _ReplacementAttorneysStepIn_index = [...]uint8{0, 7, 10, 13, 18}

func (i ReplacementAttorneysStepIn) String() string {
	if i >= ReplacementAttorneysStepIn(len(_ReplacementAttorneysStepIn_index)-1) {
		return "ReplacementAttorneysStepIn(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ReplacementAttorneysStepIn_name[_ReplacementAttorneysStepIn_index[i]:_ReplacementAttorneysStepIn_index[i+1]]
}

func (i ReplacementAttorneysStepIn) IsUnknown() bool {
	return i == ReplacementAttorneysStepInUnknown
}

func (i ReplacementAttorneysStepIn) IsWhenAllCanNoLongerAct() bool {
	return i == ReplacementAttorneysStepInWhenAllCanNoLongerAct
}

func (i ReplacementAttorneysStepIn) IsWhenOneCanNoLongerAct() bool {
	return i == ReplacementAttorneysStepInWhenOneCanNoLongerAct
}

func (i ReplacementAttorneysStepIn) IsAnotherWay() bool {
	return i == ReplacementAttorneysStepInAnotherWay
}

func ParseReplacementAttorneysStepIn(s string) (ReplacementAttorneysStepIn, error) {
	switch s {
	case "Unknown":
		return ReplacementAttorneysStepInUnknown, nil
	case "all":
		return ReplacementAttorneysStepInWhenAllCanNoLongerAct, nil
	case "one":
		return ReplacementAttorneysStepInWhenOneCanNoLongerAct, nil
	case "other":
		return ReplacementAttorneysStepInAnotherWay, nil
	default:
		return ReplacementAttorneysStepIn(0), fmt.Errorf("invalid ReplacementAttorneysStepIn '%s'", s)
	}
}

type ReplacementAttorneysStepInOptions struct {
	Unknown               ReplacementAttorneysStepIn
	WhenAllCanNoLongerAct ReplacementAttorneysStepIn
	WhenOneCanNoLongerAct ReplacementAttorneysStepIn
	AnotherWay            ReplacementAttorneysStepIn
}

var ReplacementAttorneysStepInValues = ReplacementAttorneysStepInOptions{
	Unknown:               ReplacementAttorneysStepInUnknown,
	WhenAllCanNoLongerAct: ReplacementAttorneysStepInWhenAllCanNoLongerAct,
	WhenOneCanNoLongerAct: ReplacementAttorneysStepInWhenOneCanNoLongerAct,
	AnotherWay:            ReplacementAttorneysStepInAnotherWay,
}
