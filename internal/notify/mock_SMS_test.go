// Code generated by mockery. DO NOT EDIT.

package notify

import (
	localize "github.com/ministryofjustice/opg-modernising-lpa/internal/localize"
	mock "github.com/stretchr/testify/mock"
)

// mockSMS is an autogenerated mock type for the SMS type
type mockSMS struct {
	mock.Mock
}

type mockSMS_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSMS) EXPECT() *mockSMS_Expecter {
	return &mockSMS_Expecter{mock: &_m.Mock}
}

// smsID provides a mock function with given fields: _a0, _a1
func (_m *mockSMS) smsID(_a0 bool, _a1 localize.Lang) string {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for smsID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(bool, localize.Lang) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockSMS_smsID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'smsID'
type mockSMS_smsID_Call struct {
	*mock.Call
}

// smsID is a helper method to define mock.On call
//   - _a0 bool
//   - _a1 localize.Lang
func (_e *mockSMS_Expecter) smsID(_a0 interface{}, _a1 interface{}) *mockSMS_smsID_Call {
	return &mockSMS_smsID_Call{Call: _e.mock.On("smsID", _a0, _a1)}
}

func (_c *mockSMS_smsID_Call) Run(run func(_a0 bool, _a1 localize.Lang)) *mockSMS_smsID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(localize.Lang))
	})
	return _c
}

func (_c *mockSMS_smsID_Call) Return(_a0 string) *mockSMS_smsID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSMS_smsID_Call) RunAndReturn(run func(bool, localize.Lang) string) *mockSMS_smsID_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSMS creates a new instance of mockSMS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSMS(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSMS {
	mock := &mockSMS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
