// Code generated by mockery. DO NOT EDIT.

package notify

import (
	localize "github.com/ministryofjustice/opg-modernising-lpa/internal/localize"
	mock "github.com/stretchr/testify/mock"
)

// mockToMobile is an autogenerated mock type for the ToMobile type
type mockToMobile struct {
	mock.Mock
}

type mockToMobile_Expecter struct {
	mock *mock.Mock
}

func (_m *mockToMobile) EXPECT() *mockToMobile_Expecter {
	return &mockToMobile_Expecter{mock: &_m.Mock}
}

// ignore provides a mock function with no fields
func (_m *mockToMobile) ignore() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ignore")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockToMobile_ignore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ignore'
type mockToMobile_ignore_Call struct {
	*mock.Call
}

// ignore is a helper method to define mock.On call
func (_e *mockToMobile_Expecter) ignore() *mockToMobile_ignore_Call {
	return &mockToMobile_ignore_Call{Call: _e.mock.On("ignore")}
}

func (_c *mockToMobile_ignore_Call) Run(run func()) *mockToMobile_ignore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockToMobile_ignore_Call) Return(_a0 bool) *mockToMobile_ignore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockToMobile_ignore_Call) RunAndReturn(run func() bool) *mockToMobile_ignore_Call {
	_c.Call.Return(run)
	return _c
}

// toMobile provides a mock function with no fields
func (_m *mockToMobile) toMobile() (string, localize.Lang) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for toMobile")
	}

	var r0 string
	var r1 localize.Lang
	if rf, ok := ret.Get(0).(func() (string, localize.Lang)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() localize.Lang); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(localize.Lang)
	}

	return r0, r1
}

// mockToMobile_toMobile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'toMobile'
type mockToMobile_toMobile_Call struct {
	*mock.Call
}

// toMobile is a helper method to define mock.On call
func (_e *mockToMobile_Expecter) toMobile() *mockToMobile_toMobile_Call {
	return &mockToMobile_toMobile_Call{Call: _e.mock.On("toMobile")}
}

func (_c *mockToMobile_toMobile_Call) Run(run func()) *mockToMobile_toMobile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockToMobile_toMobile_Call) Return(_a0 string, _a1 localize.Lang) *mockToMobile_toMobile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockToMobile_toMobile_Call) RunAndReturn(run func() (string, localize.Lang)) *mockToMobile_toMobile_Call {
	_c.Call.Return(run)
	return _c
}

// newMockToMobile creates a new instance of mockToMobile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockToMobile(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockToMobile {
	mock := &mockToMobile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
