// Code generated by mockery v2.42.2. DO NOT EDIT.

package notify

import mock "github.com/stretchr/testify/mock"

// mockEmail is an autogenerated mock type for the Email type
type mockEmail struct {
	mock.Mock
}

type mockEmail_Expecter struct {
	mock *mock.Mock
}

func (_m *mockEmail) EXPECT() *mockEmail_Expecter {
	return &mockEmail_Expecter{mock: &_m.Mock}
}

// emailID provides a mock function with given fields: _a0
func (_m *mockEmail) emailID(_a0 bool) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for emailID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(bool) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockEmail_emailID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'emailID'
type mockEmail_emailID_Call struct {
	*mock.Call
}

// emailID is a helper method to define mock.On call
//   - _a0 bool
func (_e *mockEmail_Expecter) emailID(_a0 interface{}) *mockEmail_emailID_Call {
	return &mockEmail_emailID_Call{Call: _e.mock.On("emailID", _a0)}
}

func (_c *mockEmail_emailID_Call) Run(run func(_a0 bool)) *mockEmail_emailID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *mockEmail_emailID_Call) Return(_a0 string) *mockEmail_emailID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEmail_emailID_Call) RunAndReturn(run func(bool) string) *mockEmail_emailID_Call {
	_c.Call.Return(run)
	return _c
}

// newMockEmail creates a new instance of mockEmail. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockEmail(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockEmail {
	mock := &mockEmail{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
