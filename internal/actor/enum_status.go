// Code generated by "enumerator -type Status -linecomment -trimprefix"; DO NOT EDIT.
package actor

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StatusActive-0]
	_ = x[StatusSuspended-1]
}

const _Status_name = "activesuspended"

var _Status_index = [...]uint8{0, 6, 15}

func (i Status) String() string {
	if i >= Status(len(_Status_index)-1) {
		return "Status(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Status_name[_Status_index[i]:_Status_index[i+1]]
}

func (i Status) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *Status) UnmarshalText(text []byte) error {
	val, err := ParseStatus(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i Status) IsActive() bool {
	return i == StatusActive
}

func (i Status) IsSuspended() bool {
	return i == StatusSuspended
}

func ParseStatus(s string) (Status, error) {
	switch s {
	case "active":
		return StatusActive, nil
	case "suspended":
		return StatusSuspended, nil
	default:
		return Status(0), fmt.Errorf("invalid Status '%s'", s)
	}
}

type StatusOptions struct {
	Active    Status
	Suspended Status
}

var StatusValues = StatusOptions{
	Active:    StatusActive,
	Suspended: StatusSuspended,
}
