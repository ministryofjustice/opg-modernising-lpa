// Code generated by "enumerator -type LifeSustainingTreatment -linecomment -trimprefix -empty"; DO NOT EDIT.
package actor

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LifeSustainingTreatmentOptionA-1]
	_ = x[LifeSustainingTreatmentOptionB-2]
}

const _LifeSustainingTreatment_name = "option-aoption-b"

var _LifeSustainingTreatment_index = [...]uint8{0, 8, 16}

func (i LifeSustainingTreatment) String() string {
	i -= 1
	if i >= LifeSustainingTreatment(len(_LifeSustainingTreatment_index)-1) {
		return "LifeSustainingTreatment(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _LifeSustainingTreatment_name[_LifeSustainingTreatment_index[i]:_LifeSustainingTreatment_index[i+1]]
}

func (i LifeSustainingTreatment) IsOptionA() bool {
	return i == LifeSustainingTreatmentOptionA
}

func (i LifeSustainingTreatment) IsOptionB() bool {
	return i == LifeSustainingTreatmentOptionB
}

func ParseLifeSustainingTreatment(s string) (LifeSustainingTreatment, error) {
	switch s {
	case "option-a":
		return LifeSustainingTreatmentOptionA, nil
	case "option-b":
		return LifeSustainingTreatmentOptionB, nil
	default:
		return LifeSustainingTreatment(0), fmt.Errorf("invalid LifeSustainingTreatment '%s'", s)
	}
}

type LifeSustainingTreatmentOptions struct {
	OptionA LifeSustainingTreatment
	OptionB LifeSustainingTreatment
}

var LifeSustainingTreatmentValues = LifeSustainingTreatmentOptions{
	OptionA: LifeSustainingTreatmentOptionA,
	OptionB: LifeSustainingTreatmentOptionB,
}

func (i LifeSustainingTreatment) Empty() bool {
	return i == LifeSustainingTreatment(0)
}
