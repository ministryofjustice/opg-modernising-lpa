// Code generated by "enumerator -type Channel -linecomment -empty"; DO NOT EDIT.
package actor

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Paper-1]
	_ = x[Online-2]
}

const _Channel_name = "paperonline"

var _Channel_index = [...]uint8{0, 5, 11}

func (i Channel) String() string {
	i -= 1
	if i >= Channel(len(_Channel_index)-1) {
		return "Channel(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Channel_name[_Channel_index[i]:_Channel_index[i+1]]
}

func (i Channel) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *Channel) UnmarshalText(text []byte) error {
	val, err := ParseChannel(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i Channel) IsPaper() bool {
	return i == Paper
}

func (i Channel) IsOnline() bool {
	return i == Online
}

func ParseChannel(s string) (Channel, error) {
	switch s {
	case "paper":
		return Paper, nil
	case "online":
		return Online, nil
	default:
		return Channel(0), fmt.Errorf("invalid Channel '%s'", s)
	}
}

type ChannelOptions struct {
	Paper  Channel
	Online Channel
}

var ChannelValues = ChannelOptions{
	Paper:  Paper,
	Online: Online,
}

func (i Channel) Empty() bool {
	return i == Channel(0)
}
