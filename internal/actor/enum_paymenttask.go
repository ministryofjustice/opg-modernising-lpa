// Code generated by "enumerator -type PaymentTask -trimprefix"; DO NOT EDIT.
package actor

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PaymentTaskNotStarted-0]
	_ = x[PaymentTaskInProgress-1]
	_ = x[PaymentTaskCompleted-2]
	_ = x[PaymentTaskPending-3]
	_ = x[PaymentTaskDenied-4]
	_ = x[PaymentTaskMoreEvidenceRequired-5]
}

const _PaymentTask_name = "NotStartedInProgressCompletedPendingDeniedMoreEvidenceRequired"

var _PaymentTask_index = [...]uint8{0, 10, 20, 29, 36, 42, 62}

func (i PaymentTask) String() string {
	if i >= PaymentTask(len(_PaymentTask_index)-1) {
		return "PaymentTask(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PaymentTask_name[_PaymentTask_index[i]:_PaymentTask_index[i+1]]
}

func (i PaymentTask) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i PaymentTask) IsNotStarted() bool {
	return i == PaymentTaskNotStarted
}

func (i PaymentTask) IsInProgress() bool {
	return i == PaymentTaskInProgress
}

func (i PaymentTask) IsCompleted() bool {
	return i == PaymentTaskCompleted
}

func (i PaymentTask) IsPending() bool {
	return i == PaymentTaskPending
}

func (i PaymentTask) IsDenied() bool {
	return i == PaymentTaskDenied
}

func (i PaymentTask) IsMoreEvidenceRequired() bool {
	return i == PaymentTaskMoreEvidenceRequired
}

func ParsePaymentTask(s string) (PaymentTask, error) {
	switch s {
	case "NotStarted":
		return PaymentTaskNotStarted, nil
	case "InProgress":
		return PaymentTaskInProgress, nil
	case "Completed":
		return PaymentTaskCompleted, nil
	case "Pending":
		return PaymentTaskPending, nil
	case "Denied":
		return PaymentTaskDenied, nil
	case "MoreEvidenceRequired":
		return PaymentTaskMoreEvidenceRequired, nil
	default:
		return PaymentTask(0), fmt.Errorf("invalid PaymentTask '%s'", s)
	}
}

type PaymentTaskOptions struct {
	NotStarted           PaymentTask
	InProgress           PaymentTask
	Completed            PaymentTask
	Pending              PaymentTask
	Denied               PaymentTask
	MoreEvidenceRequired PaymentTask
}

var PaymentTaskValues = PaymentTaskOptions{
	NotStarted:           PaymentTaskNotStarted,
	InProgress:           PaymentTaskInProgress,
	Completed:            PaymentTaskCompleted,
	Pending:              PaymentTaskPending,
	Denied:               PaymentTaskDenied,
	MoreEvidenceRequired: PaymentTaskMoreEvidenceRequired,
}
