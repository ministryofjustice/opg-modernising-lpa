// Code generated by "enumerator -type IdentityTask -trimprefix"; DO NOT EDIT.
package actor

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IdentityTaskNotStarted-0]
	_ = x[IdentityTaskInProgress-1]
	_ = x[IdentityTaskProblem-2]
	_ = x[IdentityTaskCompleted-3]
}

const _IdentityTask_name = "NotStartedInProgressProblemCompleted"

var _IdentityTask_index = [...]uint8{0, 10, 20, 27, 36}

func (i IdentityTask) String() string {
	if i >= IdentityTask(len(_IdentityTask_index)-1) {
		return "IdentityTask(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _IdentityTask_name[_IdentityTask_index[i]:_IdentityTask_index[i+1]]
}

func (i IdentityTask) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *IdentityTask) UnmarshalText(text []byte) error {
	val, err := ParseIdentityTask(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i IdentityTask) IsNotStarted() bool {
	return i == IdentityTaskNotStarted
}

func (i IdentityTask) IsInProgress() bool {
	return i == IdentityTaskInProgress
}

func (i IdentityTask) IsProblem() bool {
	return i == IdentityTaskProblem
}

func (i IdentityTask) IsCompleted() bool {
	return i == IdentityTaskCompleted
}

func ParseIdentityTask(s string) (IdentityTask, error) {
	switch s {
	case "NotStarted":
		return IdentityTaskNotStarted, nil
	case "InProgress":
		return IdentityTaskInProgress, nil
	case "Problem":
		return IdentityTaskProblem, nil
	case "Completed":
		return IdentityTaskCompleted, nil
	default:
		return IdentityTask(0), fmt.Errorf("invalid IdentityTask '%s'", s)
	}
}

type IdentityTaskOptions struct {
	NotStarted IdentityTask
	InProgress IdentityTask
	Problem    IdentityTask
	Completed  IdentityTask
}

var IdentityTaskValues = IdentityTaskOptions{
	NotStarted: IdentityTaskNotStarted,
	InProgress: IdentityTaskInProgress,
	Problem:    IdentityTaskProblem,
	Completed:  IdentityTaskCompleted,
}
