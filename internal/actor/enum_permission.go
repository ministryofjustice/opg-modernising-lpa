// Code generated by "enumerator -type Permission -linecomment"; DO NOT EDIT.
package actor

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[None-0]
	_ = x[Admin-1]
}

const _Permission_name = "noneadmin"

var _Permission_index = [...]uint8{0, 4, 9}

func (i Permission) String() string {
	if i >= Permission(len(_Permission_index)-1) {
		return "Permission(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Permission_name[_Permission_index[i]:_Permission_index[i+1]]
}

func (i Permission) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i Permission) IsNone() bool {
	return i == None
}

func (i Permission) IsAdmin() bool {
	return i == Admin
}

func ParsePermission(s string) (Permission, error) {
	switch s {
	case "none":
		return None, nil
	case "admin":
		return Admin, nil
	default:
		return Permission(0), fmt.Errorf("invalid Permission '%s'", s)
	}
}

type PermissionOptions struct {
	None  Permission
	Admin Permission
}

var PermissionValues = PermissionOptions{
	None:  None,
	Admin: Admin,
}
