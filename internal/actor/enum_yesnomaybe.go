// Code generated by "enumerator -type YesNoMaybe -linecomment -empty"; DO NOT EDIT.
package actor

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Yes-1]
	_ = x[No-2]
	_ = x[Maybe-3]
}

const _YesNoMaybe_name = "YesNoMaybe"

var _YesNoMaybe_index = [...]uint8{0, 3, 5, 10}

func (i YesNoMaybe) String() string {
	if i == 0 {
		return ""
	}
	i -= 1
	if i >= YesNoMaybe(len(_YesNoMaybe_index)-1) {
		return "YesNoMaybe(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _YesNoMaybe_name[_YesNoMaybe_index[i]:_YesNoMaybe_index[i+1]]
}

func (i YesNoMaybe) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *YesNoMaybe) UnmarshalText(text []byte) error {
	val, err := ParseYesNoMaybe(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i YesNoMaybe) IsYes() bool {
	return i == Yes
}

func (i YesNoMaybe) IsNo() bool {
	return i == No
}

func (i YesNoMaybe) IsMaybe() bool {
	return i == Maybe
}

func ParseYesNoMaybe(s string) (YesNoMaybe, error) {
	switch s {
	case "Yes":
		return Yes, nil
	case "No":
		return No, nil
	case "Maybe":
		return Maybe, nil
	default:
		return YesNoMaybe(0), fmt.Errorf("invalid YesNoMaybe '%s'", s)
	}
}

type YesNoMaybeOptions struct {
	Yes   YesNoMaybe
	No    YesNoMaybe
	Maybe YesNoMaybe
}

var YesNoMaybeValues = YesNoMaybeOptions{
	Yes:   Yes,
	No:    No,
	Maybe: Maybe,
}

func (i YesNoMaybe) Empty() bool {
	return i == YesNoMaybe(0)
}
