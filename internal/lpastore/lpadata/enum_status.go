// Code generated by "enumerator -type Status -trimprefix -linecomment"; DO NOT EDIT.

package lpadata

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StatusInProgress-0]
	_ = x[StatusStatutoryWaitingPeriod-1]
	_ = x[StatusRegistered-2]
	_ = x[StatusCannotRegister-3]
	_ = x[StatusWithdrawn-4]
	_ = x[StatusCancelled-5]
	_ = x[StatusDoNotRegister-6]
	_ = x[StatusExpired-7]
}

const _Status_name = "in-progressstatutory-waiting-periodregisteredcannot-registerwithdrawncancelleddo-not-registerexpired"

var _Status_index = [...]uint8{0, 11, 35, 45, 60, 69, 78, 93, 100}

func (i Status) String() string {
	if i >= Status(len(_Status_index)-1) {
		return "Status(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Status_name[_Status_index[i]:_Status_index[i+1]]
}

func (i Status) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *Status) UnmarshalText(text []byte) error {
	val, err := ParseStatus(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i Status) IsInProgress() bool {
	return i == StatusInProgress
}

func (i Status) IsStatutoryWaitingPeriod() bool {
	return i == StatusStatutoryWaitingPeriod
}

func (i Status) IsRegistered() bool {
	return i == StatusRegistered
}

func (i Status) IsCannotRegister() bool {
	return i == StatusCannotRegister
}

func (i Status) IsWithdrawn() bool {
	return i == StatusWithdrawn
}

func (i Status) IsCancelled() bool {
	return i == StatusCancelled
}

func (i Status) IsDoNotRegister() bool {
	return i == StatusDoNotRegister
}

func (i Status) IsExpired() bool {
	return i == StatusExpired
}

func ParseStatus(s string) (Status, error) {
	switch s {
	case "in-progress":
		return StatusInProgress, nil
	case "statutory-waiting-period":
		return StatusStatutoryWaitingPeriod, nil
	case "registered":
		return StatusRegistered, nil
	case "cannot-register":
		return StatusCannotRegister, nil
	case "withdrawn":
		return StatusWithdrawn, nil
	case "cancelled":
		return StatusCancelled, nil
	case "do-not-register":
		return StatusDoNotRegister, nil
	case "expired":
		return StatusExpired, nil
	default:
		return Status(0), fmt.Errorf("invalid Status '%s'", s)
	}
}

type StatusOptions struct {
	InProgress             Status
	StatutoryWaitingPeriod Status
	Registered             Status
	CannotRegister         Status
	Withdrawn              Status
	Cancelled              Status
	DoNotRegister          Status
	Expired                Status
}

var StatusValues = StatusOptions{
	InProgress:             StatusInProgress,
	StatutoryWaitingPeriod: StatusStatutoryWaitingPeriod,
	Registered:             StatusRegistered,
	CannotRegister:         StatusCannotRegister,
	Withdrawn:              StatusWithdrawn,
	Cancelled:              StatusCancelled,
	DoNotRegister:          StatusDoNotRegister,
	Expired:                StatusExpired,
}
