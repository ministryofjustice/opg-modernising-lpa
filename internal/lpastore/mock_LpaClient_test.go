// Code generated by mockery. DO NOT EDIT.

package lpastore

import (
	context "context"

	lpadata "github.com/ministryofjustice/opg-modernising-lpa/internal/lpastore/lpadata"
	mock "github.com/stretchr/testify/mock"
)

// mockLpaClient is an autogenerated mock type for the LpaClient type
type mockLpaClient struct {
	mock.Mock
}

type mockLpaClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLpaClient) EXPECT() *mockLpaClient_Expecter {
	return &mockLpaClient_Expecter{mock: &_m.Mock}
}

// Lpa provides a mock function with given fields: ctx, lpaUID
func (_m *mockLpaClient) Lpa(ctx context.Context, lpaUID string) (*lpadata.Lpa, error) {
	ret := _m.Called(ctx, lpaUID)

	if len(ret) == 0 {
		panic("no return value specified for Lpa")
	}

	var r0 *lpadata.Lpa
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*lpadata.Lpa, error)); ok {
		return rf(ctx, lpaUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *lpadata.Lpa); ok {
		r0 = rf(ctx, lpaUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lpadata.Lpa)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lpaUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockLpaClient_Lpa_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lpa'
type mockLpaClient_Lpa_Call struct {
	*mock.Call
}

// Lpa is a helper method to define mock.On call
//   - ctx context.Context
//   - lpaUID string
func (_e *mockLpaClient_Expecter) Lpa(ctx interface{}, lpaUID interface{}) *mockLpaClient_Lpa_Call {
	return &mockLpaClient_Lpa_Call{Call: _e.mock.On("Lpa", ctx, lpaUID)}
}

func (_c *mockLpaClient_Lpa_Call) Run(run func(ctx context.Context, lpaUID string)) *mockLpaClient_Lpa_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockLpaClient_Lpa_Call) Return(_a0 *lpadata.Lpa, _a1 error) *mockLpaClient_Lpa_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockLpaClient_Lpa_Call) RunAndReturn(run func(context.Context, string) (*lpadata.Lpa, error)) *mockLpaClient_Lpa_Call {
	_c.Call.Return(run)
	return _c
}

// Lpas provides a mock function with given fields: ctx, lpaUIDs
func (_m *mockLpaClient) Lpas(ctx context.Context, lpaUIDs []string) ([]*lpadata.Lpa, error) {
	ret := _m.Called(ctx, lpaUIDs)

	if len(ret) == 0 {
		panic("no return value specified for Lpas")
	}

	var r0 []*lpadata.Lpa
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*lpadata.Lpa, error)); ok {
		return rf(ctx, lpaUIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*lpadata.Lpa); ok {
		r0 = rf(ctx, lpaUIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*lpadata.Lpa)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, lpaUIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockLpaClient_Lpas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lpas'
type mockLpaClient_Lpas_Call struct {
	*mock.Call
}

// Lpas is a helper method to define mock.On call
//   - ctx context.Context
//   - lpaUIDs []string
func (_e *mockLpaClient_Expecter) Lpas(ctx interface{}, lpaUIDs interface{}) *mockLpaClient_Lpas_Call {
	return &mockLpaClient_Lpas_Call{Call: _e.mock.On("Lpas", ctx, lpaUIDs)}
}

func (_c *mockLpaClient_Lpas_Call) Run(run func(ctx context.Context, lpaUIDs []string)) *mockLpaClient_Lpas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *mockLpaClient_Lpas_Call) Return(_a0 []*lpadata.Lpa, _a1 error) *mockLpaClient_Lpas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockLpaClient_Lpas_Call) RunAndReturn(run func(context.Context, []string) ([]*lpadata.Lpa, error)) *mockLpaClient_Lpas_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLpaClient creates a new instance of mockLpaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLpaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLpaClient {
	mock := &mockLpaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
