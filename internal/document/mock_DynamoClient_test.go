// Code generated by mockery v2.42.2. DO NOT EDIT.

package document

import (
	context "context"

	dynamo "github.com/ministryofjustice/opg-modernising-lpa/internal/dynamo"
	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// mockDynamoClient is an autogenerated mock type for the DynamoClient type
type mockDynamoClient struct {
	mock.Mock
}

type mockDynamoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDynamoClient) EXPECT() *mockDynamoClient_Expecter {
	return &mockDynamoClient_Expecter{mock: &_m.Mock}
}

// AllByKeys provides a mock function with given fields: ctx, keys
func (_m *mockDynamoClient) AllByKeys(ctx context.Context, keys []dynamo.Keys) ([]map[string]types.AttributeValue, error) {
	ret := _m.Called(ctx, keys)

	if len(ret) == 0 {
		panic("no return value specified for AllByKeys")
	}

	var r0 []map[string]types.AttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []dynamo.Keys) ([]map[string]types.AttributeValue, error)); ok {
		return rf(ctx, keys)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []dynamo.Keys) []map[string]types.AttributeValue); ok {
		r0 = rf(ctx, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]types.AttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []dynamo.Keys) error); ok {
		r1 = rf(ctx, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoClient_AllByKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllByKeys'
type mockDynamoClient_AllByKeys_Call struct {
	*mock.Call
}

// AllByKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []dynamo.Keys
func (_e *mockDynamoClient_Expecter) AllByKeys(ctx interface{}, keys interface{}) *mockDynamoClient_AllByKeys_Call {
	return &mockDynamoClient_AllByKeys_Call{Call: _e.mock.On("AllByKeys", ctx, keys)}
}

func (_c *mockDynamoClient_AllByKeys_Call) Run(run func(ctx context.Context, keys []dynamo.Keys)) *mockDynamoClient_AllByKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]dynamo.Keys))
	})
	return _c
}

func (_c *mockDynamoClient_AllByKeys_Call) Return(_a0 []map[string]types.AttributeValue, _a1 error) *mockDynamoClient_AllByKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoClient_AllByKeys_Call) RunAndReturn(run func(context.Context, []dynamo.Keys) ([]map[string]types.AttributeValue, error)) *mockDynamoClient_AllByKeys_Call {
	_c.Call.Return(run)
	return _c
}

// AllByPartialSK provides a mock function with given fields: ctx, pk, partialSK, v
func (_m *mockDynamoClient) AllByPartialSK(ctx context.Context, pk dynamo.PK, partialSK dynamo.SK, v interface{}) error {
	ret := _m.Called(ctx, pk, partialSK, v)

	if len(ret) == 0 {
		panic("no return value specified for AllByPartialSK")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.PK, dynamo.SK, interface{}) error); ok {
		r0 = rf(ctx, pk, partialSK, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_AllByPartialSK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllByPartialSK'
type mockDynamoClient_AllByPartialSK_Call struct {
	*mock.Call
}

// AllByPartialSK is a helper method to define mock.On call
//   - ctx context.Context
//   - pk dynamo.PK
//   - partialSK dynamo.SK
//   - v interface{}
func (_e *mockDynamoClient_Expecter) AllByPartialSK(ctx interface{}, pk interface{}, partialSK interface{}, v interface{}) *mockDynamoClient_AllByPartialSK_Call {
	return &mockDynamoClient_AllByPartialSK_Call{Call: _e.mock.On("AllByPartialSK", ctx, pk, partialSK, v)}
}

func (_c *mockDynamoClient_AllByPartialSK_Call) Run(run func(ctx context.Context, pk dynamo.PK, partialSK dynamo.SK, v interface{})) *mockDynamoClient_AllByPartialSK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.PK), args[2].(dynamo.SK), args[3].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_AllByPartialSK_Call) Return(_a0 error) *mockDynamoClient_AllByPartialSK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_AllByPartialSK_Call) RunAndReturn(run func(context.Context, dynamo.PK, dynamo.SK, interface{}) error) *mockDynamoClient_AllByPartialSK_Call {
	_c.Call.Return(run)
	return _c
}

// AllBySK provides a mock function with given fields: ctx, sk, v
func (_m *mockDynamoClient) AllBySK(ctx context.Context, sk dynamo.SK, v interface{}) error {
	ret := _m.Called(ctx, sk, v)

	if len(ret) == 0 {
		panic("no return value specified for AllBySK")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.SK, interface{}) error); ok {
		r0 = rf(ctx, sk, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_AllBySK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllBySK'
type mockDynamoClient_AllBySK_Call struct {
	*mock.Call
}

// AllBySK is a helper method to define mock.On call
//   - ctx context.Context
//   - sk dynamo.SK
//   - v interface{}
func (_e *mockDynamoClient_Expecter) AllBySK(ctx interface{}, sk interface{}, v interface{}) *mockDynamoClient_AllBySK_Call {
	return &mockDynamoClient_AllBySK_Call{Call: _e.mock.On("AllBySK", ctx, sk, v)}
}

func (_c *mockDynamoClient_AllBySK_Call) Run(run func(ctx context.Context, sk dynamo.SK, v interface{})) *mockDynamoClient_AllBySK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.SK), args[2].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_AllBySK_Call) Return(_a0 error) *mockDynamoClient_AllBySK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_AllBySK_Call) RunAndReturn(run func(context.Context, dynamo.SK, interface{}) error) *mockDynamoClient_AllBySK_Call {
	_c.Call.Return(run)
	return _c
}

// AllKeysByPK provides a mock function with given fields: ctx, pk
func (_m *mockDynamoClient) AllKeysByPK(ctx context.Context, pk dynamo.PK) ([]dynamo.Keys, error) {
	ret := _m.Called(ctx, pk)

	if len(ret) == 0 {
		panic("no return value specified for AllKeysByPK")
	}

	var r0 []dynamo.Keys
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.PK) ([]dynamo.Keys, error)); ok {
		return rf(ctx, pk)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.PK) []dynamo.Keys); ok {
		r0 = rf(ctx, pk)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dynamo.Keys)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dynamo.PK) error); ok {
		r1 = rf(ctx, pk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoClient_AllKeysByPK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllKeysByPK'
type mockDynamoClient_AllKeysByPK_Call struct {
	*mock.Call
}

// AllKeysByPK is a helper method to define mock.On call
//   - ctx context.Context
//   - pk dynamo.PK
func (_e *mockDynamoClient_Expecter) AllKeysByPK(ctx interface{}, pk interface{}) *mockDynamoClient_AllKeysByPK_Call {
	return &mockDynamoClient_AllKeysByPK_Call{Call: _e.mock.On("AllKeysByPK", ctx, pk)}
}

func (_c *mockDynamoClient_AllKeysByPK_Call) Run(run func(ctx context.Context, pk dynamo.PK)) *mockDynamoClient_AllKeysByPK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.PK))
	})
	return _c
}

func (_c *mockDynamoClient_AllKeysByPK_Call) Return(_a0 []dynamo.Keys, _a1 error) *mockDynamoClient_AllKeysByPK_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoClient_AllKeysByPK_Call) RunAndReturn(run func(context.Context, dynamo.PK) ([]dynamo.Keys, error)) *mockDynamoClient_AllKeysByPK_Call {
	_c.Call.Return(run)
	return _c
}

// BatchPut provides a mock function with given fields: ctx, items
func (_m *mockDynamoClient) BatchPut(ctx context.Context, items []interface{}) error {
	ret := _m.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for BatchPut")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}) error); ok {
		r0 = rf(ctx, items)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_BatchPut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchPut'
type mockDynamoClient_BatchPut_Call struct {
	*mock.Call
}

// BatchPut is a helper method to define mock.On call
//   - ctx context.Context
//   - items []interface{}
func (_e *mockDynamoClient_Expecter) BatchPut(ctx interface{}, items interface{}) *mockDynamoClient_BatchPut_Call {
	return &mockDynamoClient_BatchPut_Call{Call: _e.mock.On("BatchPut", ctx, items)}
}

func (_c *mockDynamoClient_BatchPut_Call) Run(run func(ctx context.Context, items []interface{})) *mockDynamoClient_BatchPut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_BatchPut_Call) Return(_a0 error) *mockDynamoClient_BatchPut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_BatchPut_Call) RunAndReturn(run func(context.Context, []interface{}) error) *mockDynamoClient_BatchPut_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, v
func (_m *mockDynamoClient) Create(ctx context.Context, v interface{}) error {
	ret := _m.Called(ctx, v)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockDynamoClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - v interface{}
func (_e *mockDynamoClient_Expecter) Create(ctx interface{}, v interface{}) *mockDynamoClient_Create_Call {
	return &mockDynamoClient_Create_Call{Call: _e.mock.On("Create", ctx, v)}
}

func (_c *mockDynamoClient_Create_Call) Run(run func(ctx context.Context, v interface{})) *mockDynamoClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_Create_Call) Return(_a0 error) *mockDynamoClient_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_Create_Call) RunAndReturn(run func(context.Context, interface{}) error) *mockDynamoClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKeys provides a mock function with given fields: ctx, keys
func (_m *mockDynamoClient) DeleteKeys(ctx context.Context, keys []dynamo.Keys) error {
	ret := _m.Called(ctx, keys)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []dynamo.Keys) error); ok {
		r0 = rf(ctx, keys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_DeleteKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKeys'
type mockDynamoClient_DeleteKeys_Call struct {
	*mock.Call
}

// DeleteKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []dynamo.Keys
func (_e *mockDynamoClient_Expecter) DeleteKeys(ctx interface{}, keys interface{}) *mockDynamoClient_DeleteKeys_Call {
	return &mockDynamoClient_DeleteKeys_Call{Call: _e.mock.On("DeleteKeys", ctx, keys)}
}

func (_c *mockDynamoClient_DeleteKeys_Call) Run(run func(ctx context.Context, keys []dynamo.Keys)) *mockDynamoClient_DeleteKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]dynamo.Keys))
	})
	return _c
}

func (_c *mockDynamoClient_DeleteKeys_Call) Return(_a0 error) *mockDynamoClient_DeleteKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_DeleteKeys_Call) RunAndReturn(run func(context.Context, []dynamo.Keys) error) *mockDynamoClient_DeleteKeys_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function with given fields: ctx, pk, sk
func (_m *mockDynamoClient) DeleteOne(ctx context.Context, pk dynamo.PK, sk dynamo.SK) error {
	ret := _m.Called(ctx, pk, sk)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.PK, dynamo.SK) error); ok {
		r0 = rf(ctx, pk, sk)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type mockDynamoClient_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - ctx context.Context
//   - pk dynamo.PK
//   - sk dynamo.SK
func (_e *mockDynamoClient_Expecter) DeleteOne(ctx interface{}, pk interface{}, sk interface{}) *mockDynamoClient_DeleteOne_Call {
	return &mockDynamoClient_DeleteOne_Call{Call: _e.mock.On("DeleteOne", ctx, pk, sk)}
}

func (_c *mockDynamoClient_DeleteOne_Call) Run(run func(ctx context.Context, pk dynamo.PK, sk dynamo.SK)) *mockDynamoClient_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.PK), args[2].(dynamo.SK))
	})
	return _c
}

func (_c *mockDynamoClient_DeleteOne_Call) Return(_a0 error) *mockDynamoClient_DeleteOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_DeleteOne_Call) RunAndReturn(run func(context.Context, dynamo.PK, dynamo.SK) error) *mockDynamoClient_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// LatestForActor provides a mock function with given fields: ctx, sk, v
func (_m *mockDynamoClient) LatestForActor(ctx context.Context, sk dynamo.SK, v interface{}) error {
	ret := _m.Called(ctx, sk, v)

	if len(ret) == 0 {
		panic("no return value specified for LatestForActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.SK, interface{}) error); ok {
		r0 = rf(ctx, sk, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_LatestForActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestForActor'
type mockDynamoClient_LatestForActor_Call struct {
	*mock.Call
}

// LatestForActor is a helper method to define mock.On call
//   - ctx context.Context
//   - sk dynamo.SK
//   - v interface{}
func (_e *mockDynamoClient_Expecter) LatestForActor(ctx interface{}, sk interface{}, v interface{}) *mockDynamoClient_LatestForActor_Call {
	return &mockDynamoClient_LatestForActor_Call{Call: _e.mock.On("LatestForActor", ctx, sk, v)}
}

func (_c *mockDynamoClient_LatestForActor_Call) Run(run func(ctx context.Context, sk dynamo.SK, v interface{})) *mockDynamoClient_LatestForActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.SK), args[2].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_LatestForActor_Call) Return(_a0 error) *mockDynamoClient_LatestForActor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_LatestForActor_Call) RunAndReturn(run func(context.Context, dynamo.SK, interface{}) error) *mockDynamoClient_LatestForActor_Call {
	_c.Call.Return(run)
	return _c
}

// One provides a mock function with given fields: ctx, pk, sk, v
func (_m *mockDynamoClient) One(ctx context.Context, pk dynamo.PK, sk dynamo.SK, v interface{}) error {
	ret := _m.Called(ctx, pk, sk, v)

	if len(ret) == 0 {
		panic("no return value specified for One")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.PK, dynamo.SK, interface{}) error); ok {
		r0 = rf(ctx, pk, sk, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_One_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'One'
type mockDynamoClient_One_Call struct {
	*mock.Call
}

// One is a helper method to define mock.On call
//   - ctx context.Context
//   - pk dynamo.PK
//   - sk dynamo.SK
//   - v interface{}
func (_e *mockDynamoClient_Expecter) One(ctx interface{}, pk interface{}, sk interface{}, v interface{}) *mockDynamoClient_One_Call {
	return &mockDynamoClient_One_Call{Call: _e.mock.On("One", ctx, pk, sk, v)}
}

func (_c *mockDynamoClient_One_Call) Run(run func(ctx context.Context, pk dynamo.PK, sk dynamo.SK, v interface{})) *mockDynamoClient_One_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.PK), args[2].(dynamo.SK), args[3].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_One_Call) Return(_a0 error) *mockDynamoClient_One_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_One_Call) RunAndReturn(run func(context.Context, dynamo.PK, dynamo.SK, interface{}) error) *mockDynamoClient_One_Call {
	_c.Call.Return(run)
	return _c
}

// OneByPK provides a mock function with given fields: ctx, pk, v
func (_m *mockDynamoClient) OneByPK(ctx context.Context, pk dynamo.PK, v interface{}) error {
	ret := _m.Called(ctx, pk, v)

	if len(ret) == 0 {
		panic("no return value specified for OneByPK")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.PK, interface{}) error); ok {
		r0 = rf(ctx, pk, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_OneByPK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OneByPK'
type mockDynamoClient_OneByPK_Call struct {
	*mock.Call
}

// OneByPK is a helper method to define mock.On call
//   - ctx context.Context
//   - pk dynamo.PK
//   - v interface{}
func (_e *mockDynamoClient_Expecter) OneByPK(ctx interface{}, pk interface{}, v interface{}) *mockDynamoClient_OneByPK_Call {
	return &mockDynamoClient_OneByPK_Call{Call: _e.mock.On("OneByPK", ctx, pk, v)}
}

func (_c *mockDynamoClient_OneByPK_Call) Run(run func(ctx context.Context, pk dynamo.PK, v interface{})) *mockDynamoClient_OneByPK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.PK), args[2].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_OneByPK_Call) Return(_a0 error) *mockDynamoClient_OneByPK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_OneByPK_Call) RunAndReturn(run func(context.Context, dynamo.PK, interface{}) error) *mockDynamoClient_OneByPK_Call {
	_c.Call.Return(run)
	return _c
}

// OneByPartialSK provides a mock function with given fields: ctx, pk, partialSK, v
func (_m *mockDynamoClient) OneByPartialSK(ctx context.Context, pk dynamo.PK, partialSK dynamo.SK, v interface{}) error {
	ret := _m.Called(ctx, pk, partialSK, v)

	if len(ret) == 0 {
		panic("no return value specified for OneByPartialSK")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.PK, dynamo.SK, interface{}) error); ok {
		r0 = rf(ctx, pk, partialSK, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_OneByPartialSK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OneByPartialSK'
type mockDynamoClient_OneByPartialSK_Call struct {
	*mock.Call
}

// OneByPartialSK is a helper method to define mock.On call
//   - ctx context.Context
//   - pk dynamo.PK
//   - partialSK dynamo.SK
//   - v interface{}
func (_e *mockDynamoClient_Expecter) OneByPartialSK(ctx interface{}, pk interface{}, partialSK interface{}, v interface{}) *mockDynamoClient_OneByPartialSK_Call {
	return &mockDynamoClient_OneByPartialSK_Call{Call: _e.mock.On("OneByPartialSK", ctx, pk, partialSK, v)}
}

func (_c *mockDynamoClient_OneByPartialSK_Call) Run(run func(ctx context.Context, pk dynamo.PK, partialSK dynamo.SK, v interface{})) *mockDynamoClient_OneByPartialSK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.PK), args[2].(dynamo.SK), args[3].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_OneByPartialSK_Call) Return(_a0 error) *mockDynamoClient_OneByPartialSK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_OneByPartialSK_Call) RunAndReturn(run func(context.Context, dynamo.PK, dynamo.SK, interface{}) error) *mockDynamoClient_OneByPartialSK_Call {
	_c.Call.Return(run)
	return _c
}

// OneBySK provides a mock function with given fields: ctx, sk, v
func (_m *mockDynamoClient) OneBySK(ctx context.Context, sk dynamo.SK, v interface{}) error {
	ret := _m.Called(ctx, sk, v)

	if len(ret) == 0 {
		panic("no return value specified for OneBySK")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.SK, interface{}) error); ok {
		r0 = rf(ctx, sk, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_OneBySK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OneBySK'
type mockDynamoClient_OneBySK_Call struct {
	*mock.Call
}

// OneBySK is a helper method to define mock.On call
//   - ctx context.Context
//   - sk dynamo.SK
//   - v interface{}
func (_e *mockDynamoClient_Expecter) OneBySK(ctx interface{}, sk interface{}, v interface{}) *mockDynamoClient_OneBySK_Call {
	return &mockDynamoClient_OneBySK_Call{Call: _e.mock.On("OneBySK", ctx, sk, v)}
}

func (_c *mockDynamoClient_OneBySK_Call) Run(run func(ctx context.Context, sk dynamo.SK, v interface{})) *mockDynamoClient_OneBySK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.SK), args[2].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_OneBySK_Call) Return(_a0 error) *mockDynamoClient_OneBySK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_OneBySK_Call) RunAndReturn(run func(context.Context, dynamo.SK, interface{}) error) *mockDynamoClient_OneBySK_Call {
	_c.Call.Return(run)
	return _c
}

// OneByUID provides a mock function with given fields: ctx, uid, v
func (_m *mockDynamoClient) OneByUID(ctx context.Context, uid string, v interface{}) error {
	ret := _m.Called(ctx, uid, v)

	if len(ret) == 0 {
		panic("no return value specified for OneByUID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, uid, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_OneByUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OneByUID'
type mockDynamoClient_OneByUID_Call struct {
	*mock.Call
}

// OneByUID is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - v interface{}
func (_e *mockDynamoClient_Expecter) OneByUID(ctx interface{}, uid interface{}, v interface{}) *mockDynamoClient_OneByUID_Call {
	return &mockDynamoClient_OneByUID_Call{Call: _e.mock.On("OneByUID", ctx, uid, v)}
}

func (_c *mockDynamoClient_OneByUID_Call) Run(run func(ctx context.Context, uid string, v interface{})) *mockDynamoClient_OneByUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_OneByUID_Call) Return(_a0 error) *mockDynamoClient_OneByUID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_OneByUID_Call) RunAndReturn(run func(context.Context, string, interface{}) error) *mockDynamoClient_OneByUID_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, v
func (_m *mockDynamoClient) Put(ctx context.Context, v interface{}) error {
	ret := _m.Called(ctx, v)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockDynamoClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - v interface{}
func (_e *mockDynamoClient_Expecter) Put(ctx interface{}, v interface{}) *mockDynamoClient_Put_Call {
	return &mockDynamoClient_Put_Call{Call: _e.mock.On("Put", ctx, v)}
}

func (_c *mockDynamoClient_Put_Call) Run(run func(ctx context.Context, v interface{})) *mockDynamoClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_Put_Call) Return(_a0 error) *mockDynamoClient_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_Put_Call) RunAndReturn(run func(context.Context, interface{}) error) *mockDynamoClient_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, pk, sk, values, expression
func (_m *mockDynamoClient) Update(ctx context.Context, pk dynamo.PK, sk dynamo.SK, values map[string]types.AttributeValue, expression string) error {
	ret := _m.Called(ctx, pk, sk, values, expression)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.PK, dynamo.SK, map[string]types.AttributeValue, string) error); ok {
		r0 = rf(ctx, pk, sk, values, expression)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type mockDynamoClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - pk dynamo.PK
//   - sk dynamo.SK
//   - values map[string]types.AttributeValue
//   - expression string
func (_e *mockDynamoClient_Expecter) Update(ctx interface{}, pk interface{}, sk interface{}, values interface{}, expression interface{}) *mockDynamoClient_Update_Call {
	return &mockDynamoClient_Update_Call{Call: _e.mock.On("Update", ctx, pk, sk, values, expression)}
}

func (_c *mockDynamoClient_Update_Call) Run(run func(ctx context.Context, pk dynamo.PK, sk dynamo.SK, values map[string]types.AttributeValue, expression string)) *mockDynamoClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.PK), args[2].(dynamo.SK), args[3].(map[string]types.AttributeValue), args[4].(string))
	})
	return _c
}

func (_c *mockDynamoClient_Update_Call) Return(_a0 error) *mockDynamoClient_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_Update_Call) RunAndReturn(run func(context.Context, dynamo.PK, dynamo.SK, map[string]types.AttributeValue, string) error) *mockDynamoClient_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTransaction provides a mock function with given fields: ctx, transaction
func (_m *mockDynamoClient) WriteTransaction(ctx context.Context, transaction *dynamo.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for WriteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamo.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_WriteTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTransaction'
type mockDynamoClient_WriteTransaction_Call struct {
	*mock.Call
}

// WriteTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *dynamo.Transaction
func (_e *mockDynamoClient_Expecter) WriteTransaction(ctx interface{}, transaction interface{}) *mockDynamoClient_WriteTransaction_Call {
	return &mockDynamoClient_WriteTransaction_Call{Call: _e.mock.On("WriteTransaction", ctx, transaction)}
}

func (_c *mockDynamoClient_WriteTransaction_Call) Run(run func(ctx context.Context, transaction *dynamo.Transaction)) *mockDynamoClient_WriteTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dynamo.Transaction))
	})
	return _c
}

func (_c *mockDynamoClient_WriteTransaction_Call) Return(_a0 error) *mockDynamoClient_WriteTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_WriteTransaction_Call) RunAndReturn(run func(context.Context, *dynamo.Transaction) error) *mockDynamoClient_WriteTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDynamoClient creates a new instance of mockDynamoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDynamoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDynamoClient {
	mock := &mockDynamoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
