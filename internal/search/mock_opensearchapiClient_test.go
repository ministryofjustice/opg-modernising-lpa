// Code generated by mockery v2.45.0. DO NOT EDIT.

package search

import (
	context "context"

	opensearchapi "github.com/opensearch-project/opensearch-go/v4/opensearchapi"
	mock "github.com/stretchr/testify/mock"
)

// mockOpensearchapiClient is an autogenerated mock type for the opensearchapiClient type
type mockOpensearchapiClient struct {
	mock.Mock
}

type mockOpensearchapiClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockOpensearchapiClient) EXPECT() *mockOpensearchapiClient_Expecter {
	return &mockOpensearchapiClient_Expecter{mock: &_m.Mock}
}

// Index provides a mock function with given fields: ctx, req
func (_m *mockOpensearchapiClient) Index(ctx context.Context, req opensearchapi.IndexReq) (*opensearchapi.IndexResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 *opensearchapi.IndexResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, opensearchapi.IndexReq) (*opensearchapi.IndexResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, opensearchapi.IndexReq) *opensearchapi.IndexResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchapi.IndexResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, opensearchapi.IndexReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockOpensearchapiClient_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type mockOpensearchapiClient_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - req opensearchapi.IndexReq
func (_e *mockOpensearchapiClient_Expecter) Index(ctx interface{}, req interface{}) *mockOpensearchapiClient_Index_Call {
	return &mockOpensearchapiClient_Index_Call{Call: _e.mock.On("Index", ctx, req)}
}

func (_c *mockOpensearchapiClient_Index_Call) Run(run func(ctx context.Context, req opensearchapi.IndexReq)) *mockOpensearchapiClient_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(opensearchapi.IndexReq))
	})
	return _c
}

func (_c *mockOpensearchapiClient_Index_Call) Return(_a0 *opensearchapi.IndexResp, _a1 error) *mockOpensearchapiClient_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockOpensearchapiClient_Index_Call) RunAndReturn(run func(context.Context, opensearchapi.IndexReq) (*opensearchapi.IndexResp, error)) *mockOpensearchapiClient_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, req
func (_m *mockOpensearchapiClient) Search(ctx context.Context, req *opensearchapi.SearchReq) (*opensearchapi.SearchResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *opensearchapi.SearchResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchapi.SearchReq) (*opensearchapi.SearchResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchapi.SearchReq) *opensearchapi.SearchResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchapi.SearchResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchapi.SearchReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockOpensearchapiClient_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type mockOpensearchapiClient_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - req *opensearchapi.SearchReq
func (_e *mockOpensearchapiClient_Expecter) Search(ctx interface{}, req interface{}) *mockOpensearchapiClient_Search_Call {
	return &mockOpensearchapiClient_Search_Call{Call: _e.mock.On("Search", ctx, req)}
}

func (_c *mockOpensearchapiClient_Search_Call) Run(run func(ctx context.Context, req *opensearchapi.SearchReq)) *mockOpensearchapiClient_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*opensearchapi.SearchReq))
	})
	return _c
}

func (_c *mockOpensearchapiClient_Search_Call) Return(_a0 *opensearchapi.SearchResp, _a1 error) *mockOpensearchapiClient_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockOpensearchapiClient_Search_Call) RunAndReturn(run func(context.Context, *opensearchapi.SearchReq) (*opensearchapi.SearchResp, error)) *mockOpensearchapiClient_Search_Call {
	_c.Call.Return(run)
	return _c
}

// newMockOpensearchapiClient creates a new instance of mockOpensearchapiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockOpensearchapiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockOpensearchapiClient {
	mock := &mockOpensearchapiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
