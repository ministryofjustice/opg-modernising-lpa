// Code generated by mockery v2.41.0. DO NOT EDIT.

package search

import (
	context "context"

	opensearch "github.com/opensearch-project/opensearch-go/v3"
	mock "github.com/stretchr/testify/mock"

	opensearchapi "github.com/opensearch-project/opensearch-go/v3/opensearchapi"
)

// mockIndicesClient is an autogenerated mock type for the indicesClient type
type mockIndicesClient struct {
	mock.Mock
}

type mockIndicesClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIndicesClient) EXPECT() *mockIndicesClient_Expecter {
	return &mockIndicesClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *mockIndicesClient) Create(ctx context.Context, req opensearchapi.IndicesCreateReq) (*opensearchapi.IndicesCreateResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *opensearchapi.IndicesCreateResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, opensearchapi.IndicesCreateReq) (*opensearchapi.IndicesCreateResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, opensearchapi.IndicesCreateReq) *opensearchapi.IndicesCreateResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchapi.IndicesCreateResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, opensearchapi.IndicesCreateReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockIndicesClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockIndicesClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req opensearchapi.IndicesCreateReq
func (_e *mockIndicesClient_Expecter) Create(ctx interface{}, req interface{}) *mockIndicesClient_Create_Call {
	return &mockIndicesClient_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *mockIndicesClient_Create_Call) Run(run func(ctx context.Context, req opensearchapi.IndicesCreateReq)) *mockIndicesClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(opensearchapi.IndicesCreateReq))
	})
	return _c
}

func (_c *mockIndicesClient_Create_Call) Return(_a0 *opensearchapi.IndicesCreateResp, _a1 error) *mockIndicesClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockIndicesClient_Create_Call) RunAndReturn(run func(context.Context, opensearchapi.IndicesCreateReq) (*opensearchapi.IndicesCreateResp, error)) *mockIndicesClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, req
func (_m *mockIndicesClient) Exists(ctx context.Context, req opensearchapi.IndicesExistsReq) (*opensearch.Response, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 *opensearch.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, opensearchapi.IndicesExistsReq) (*opensearch.Response, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, opensearchapi.IndicesExistsReq) *opensearch.Response); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearch.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, opensearchapi.IndicesExistsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockIndicesClient_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type mockIndicesClient_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - req opensearchapi.IndicesExistsReq
func (_e *mockIndicesClient_Expecter) Exists(ctx interface{}, req interface{}) *mockIndicesClient_Exists_Call {
	return &mockIndicesClient_Exists_Call{Call: _e.mock.On("Exists", ctx, req)}
}

func (_c *mockIndicesClient_Exists_Call) Run(run func(ctx context.Context, req opensearchapi.IndicesExistsReq)) *mockIndicesClient_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(opensearchapi.IndicesExistsReq))
	})
	return _c
}

func (_c *mockIndicesClient_Exists_Call) Return(_a0 *opensearch.Response, _a1 error) *mockIndicesClient_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockIndicesClient_Exists_Call) RunAndReturn(run func(context.Context, opensearchapi.IndicesExistsReq) (*opensearch.Response, error)) *mockIndicesClient_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// newMockIndicesClient creates a new instance of mockIndicesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockIndicesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockIndicesClient {
	mock := &mockIndicesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
