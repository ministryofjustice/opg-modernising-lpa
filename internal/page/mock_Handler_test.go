// Code generated by mockery v2.39.1. DO NOT EDIT.

package page

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// mockHandler is an autogenerated mock type for the Handler type
type mockHandler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: data, w, r
func (_m *mockHandler) Execute(data AppData, w http.ResponseWriter, r *http.Request) error {
	ret := _m.Called(data, w, r)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(AppData, http.ResponseWriter, *http.Request) error); ok {
		r0 = rf(data, w, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockHandler creates a new instance of mockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockHandler {
	mock := &mockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
