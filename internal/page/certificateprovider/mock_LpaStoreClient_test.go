// Code generated by mockery v2.42.2. DO NOT EDIT.

package certificateprovider

import (
	context "context"

	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"

	lpastore "github.com/ministryofjustice/opg-modernising-lpa/internal/lpastore"

	mock "github.com/stretchr/testify/mock"
)

// mockLpaStoreClient is an autogenerated mock type for the LpaStoreClient type
type mockLpaStoreClient struct {
	mock.Mock
}

type mockLpaStoreClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLpaStoreClient) EXPECT() *mockLpaStoreClient_Expecter {
	return &mockLpaStoreClient_Expecter{mock: &_m.Mock}
}

// SendCertificateProvider provides a mock function with given fields: ctx, certificateProvider, lpa
func (_m *mockLpaStoreClient) SendCertificateProvider(ctx context.Context, certificateProvider *actor.CertificateProviderProvidedDetails, lpa *lpastore.Lpa) error {
	ret := _m.Called(ctx, certificateProvider, lpa)

	if len(ret) == 0 {
		panic("no return value specified for SendCertificateProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *actor.CertificateProviderProvidedDetails, *lpastore.Lpa) error); ok {
		r0 = rf(ctx, certificateProvider, lpa)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockLpaStoreClient_SendCertificateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCertificateProvider'
type mockLpaStoreClient_SendCertificateProvider_Call struct {
	*mock.Call
}

// SendCertificateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateProvider *actor.CertificateProviderProvidedDetails
//   - lpa *lpastore.Lpa
func (_e *mockLpaStoreClient_Expecter) SendCertificateProvider(ctx interface{}, certificateProvider interface{}, lpa interface{}) *mockLpaStoreClient_SendCertificateProvider_Call {
	return &mockLpaStoreClient_SendCertificateProvider_Call{Call: _e.mock.On("SendCertificateProvider", ctx, certificateProvider, lpa)}
}

func (_c *mockLpaStoreClient_SendCertificateProvider_Call) Run(run func(ctx context.Context, certificateProvider *actor.CertificateProviderProvidedDetails, lpa *lpastore.Lpa)) *mockLpaStoreClient_SendCertificateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*actor.CertificateProviderProvidedDetails), args[2].(*lpastore.Lpa))
	})
	return _c
}

func (_c *mockLpaStoreClient_SendCertificateProvider_Call) Return(_a0 error) *mockLpaStoreClient_SendCertificateProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLpaStoreClient_SendCertificateProvider_Call) RunAndReturn(run func(context.Context, *actor.CertificateProviderProvidedDetails, *lpastore.Lpa) error) *mockLpaStoreClient_SendCertificateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLpaStoreClient creates a new instance of mockLpaStoreClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLpaStoreClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLpaStoreClient {
	mock := &mockLpaStoreClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
