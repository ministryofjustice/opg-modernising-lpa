// Code generated by mockery v2.20.0. DO NOT EDIT.

package certificateprovider

import (
	date "github.com/ministryofjustice/opg-modernising-lpa/internal/date"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mockLocalizer is an autogenerated mock type for the Localizer type
type mockLocalizer struct {
	mock.Mock
}

// Concat provides a mock function with given fields: _a0, _a1
func (_m *mockLocalizer) Concat(_a0 []string, _a1 string) string {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func([]string, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Count provides a mock function with given fields: _a0, _a1
func (_m *mockLocalizer) Count(_a0 string, _a1 int) string {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Format provides a mock function with given fields: _a0, _a1
func (_m *mockLocalizer) Format(_a0 string, _a1 map[string]interface{}) string {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FormatCount provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockLocalizer) FormatCount(_a0 string, _a1 int, _a2 map[string]interface{}) string {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int, map[string]interface{}) string); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FormatDate provides a mock function with given fields: _a0
func (_m *mockLocalizer) FormatDate(_a0 date.TimeOrDate) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(date.TimeOrDate) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FormatDateTime provides a mock function with given fields: _a0
func (_m *mockLocalizer) FormatDateTime(_a0 time.Time) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Possessive provides a mock function with given fields: _a0
func (_m *mockLocalizer) Possessive(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetShowTranslationKeys provides a mock function with given fields: _a0
func (_m *mockLocalizer) SetShowTranslationKeys(_a0 bool) {
	_m.Called(_a0)
}

// ShowTranslationKeys provides a mock function with given fields:
func (_m *mockLocalizer) ShowTranslationKeys() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// T provides a mock function with given fields: _a0
func (_m *mockLocalizer) T(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTnewMockLocalizer interface {
	mock.TestingT
	Cleanup(func())
}

// newMockLocalizer creates a new instance of mockLocalizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockLocalizer(t mockConstructorTestingTnewMockLocalizer) *mockLocalizer {
	mock := &mockLocalizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
