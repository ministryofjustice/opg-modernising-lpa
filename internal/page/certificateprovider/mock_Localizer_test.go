// Code generated by mockery v2.42.2. DO NOT EDIT.

package certificateprovider

import (
	date "github.com/ministryofjustice/opg-modernising-lpa/internal/date"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mockLocalizer is an autogenerated mock type for the Localizer type
type mockLocalizer struct {
	mock.Mock
}

type mockLocalizer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLocalizer) EXPECT() *mockLocalizer_Expecter {
	return &mockLocalizer_Expecter{mock: &_m.Mock}
}

// Concat provides a mock function with given fields: list, joiner
func (_m *mockLocalizer) Concat(list []string, joiner string) string {
	ret := _m.Called(list, joiner)

	if len(ret) == 0 {
		panic("no return value specified for Concat")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func([]string, string) string); ok {
		r0 = rf(list, joiner)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_Concat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Concat'
type mockLocalizer_Concat_Call struct {
	*mock.Call
}

// Concat is a helper method to define mock.On call
//   - list []string
//   - joiner string
func (_e *mockLocalizer_Expecter) Concat(list interface{}, joiner interface{}) *mockLocalizer_Concat_Call {
	return &mockLocalizer_Concat_Call{Call: _e.mock.On("Concat", list, joiner)}
}

func (_c *mockLocalizer_Concat_Call) Run(run func(list []string, joiner string)) *mockLocalizer_Concat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].(string))
	})
	return _c
}

func (_c *mockLocalizer_Concat_Call) Return(_a0 string) *mockLocalizer_Concat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_Concat_Call) RunAndReturn(run func([]string, string) string) *mockLocalizer_Concat_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function with given fields: messageID, count
func (_m *mockLocalizer) Count(messageID string, count int) string {
	ret := _m.Called(messageID, count)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(messageID, count)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type mockLocalizer_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - messageID string
//   - count int
func (_e *mockLocalizer_Expecter) Count(messageID interface{}, count interface{}) *mockLocalizer_Count_Call {
	return &mockLocalizer_Count_Call{Call: _e.mock.On("Count", messageID, count)}
}

func (_c *mockLocalizer_Count_Call) Run(run func(messageID string, count int)) *mockLocalizer_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *mockLocalizer_Count_Call) Return(_a0 string) *mockLocalizer_Count_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_Count_Call) RunAndReturn(run func(string, int) string) *mockLocalizer_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Format provides a mock function with given fields: messageID, data
func (_m *mockLocalizer) Format(messageID string, data map[string]interface{}) string {
	ret := _m.Called(messageID, data)

	if len(ret) == 0 {
		panic("no return value specified for Format")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) string); ok {
		r0 = rf(messageID, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_Format_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Format'
type mockLocalizer_Format_Call struct {
	*mock.Call
}

// Format is a helper method to define mock.On call
//   - messageID string
//   - data map[string]interface{}
func (_e *mockLocalizer_Expecter) Format(messageID interface{}, data interface{}) *mockLocalizer_Format_Call {
	return &mockLocalizer_Format_Call{Call: _e.mock.On("Format", messageID, data)}
}

func (_c *mockLocalizer_Format_Call) Run(run func(messageID string, data map[string]interface{})) *mockLocalizer_Format_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *mockLocalizer_Format_Call) Return(_a0 string) *mockLocalizer_Format_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_Format_Call) RunAndReturn(run func(string, map[string]interface{}) string) *mockLocalizer_Format_Call {
	_c.Call.Return(run)
	return _c
}

// FormatCount provides a mock function with given fields: messageID, count, data
func (_m *mockLocalizer) FormatCount(messageID string, count int, data map[string]interface{}) string {
	ret := _m.Called(messageID, count, data)

	if len(ret) == 0 {
		panic("no return value specified for FormatCount")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int, map[string]interface{}) string); ok {
		r0 = rf(messageID, count, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_FormatCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatCount'
type mockLocalizer_FormatCount_Call struct {
	*mock.Call
}

// FormatCount is a helper method to define mock.On call
//   - messageID string
//   - count int
//   - data map[string]interface{}
func (_e *mockLocalizer_Expecter) FormatCount(messageID interface{}, count interface{}, data interface{}) *mockLocalizer_FormatCount_Call {
	return &mockLocalizer_FormatCount_Call{Call: _e.mock.On("FormatCount", messageID, count, data)}
}

func (_c *mockLocalizer_FormatCount_Call) Run(run func(messageID string, count int, data map[string]interface{})) *mockLocalizer_FormatCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *mockLocalizer_FormatCount_Call) Return(_a0 string) *mockLocalizer_FormatCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_FormatCount_Call) RunAndReturn(run func(string, int, map[string]interface{}) string) *mockLocalizer_FormatCount_Call {
	_c.Call.Return(run)
	return _c
}

// FormatDate provides a mock function with given fields: t
func (_m *mockLocalizer) FormatDate(t date.TimeOrDate) string {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for FormatDate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(date.TimeOrDate) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_FormatDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatDate'
type mockLocalizer_FormatDate_Call struct {
	*mock.Call
}

// FormatDate is a helper method to define mock.On call
//   - t date.TimeOrDate
func (_e *mockLocalizer_Expecter) FormatDate(t interface{}) *mockLocalizer_FormatDate_Call {
	return &mockLocalizer_FormatDate_Call{Call: _e.mock.On("FormatDate", t)}
}

func (_c *mockLocalizer_FormatDate_Call) Run(run func(t date.TimeOrDate)) *mockLocalizer_FormatDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(date.TimeOrDate))
	})
	return _c
}

func (_c *mockLocalizer_FormatDate_Call) Return(_a0 string) *mockLocalizer_FormatDate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_FormatDate_Call) RunAndReturn(run func(date.TimeOrDate) string) *mockLocalizer_FormatDate_Call {
	_c.Call.Return(run)
	return _c
}

// FormatDateTime provides a mock function with given fields: t
func (_m *mockLocalizer) FormatDateTime(t time.Time) string {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for FormatDateTime")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_FormatDateTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatDateTime'
type mockLocalizer_FormatDateTime_Call struct {
	*mock.Call
}

// FormatDateTime is a helper method to define mock.On call
//   - t time.Time
func (_e *mockLocalizer_Expecter) FormatDateTime(t interface{}) *mockLocalizer_FormatDateTime_Call {
	return &mockLocalizer_FormatDateTime_Call{Call: _e.mock.On("FormatDateTime", t)}
}

func (_c *mockLocalizer_FormatDateTime_Call) Run(run func(t time.Time)) *mockLocalizer_FormatDateTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *mockLocalizer_FormatDateTime_Call) Return(_a0 string) *mockLocalizer_FormatDateTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_FormatDateTime_Call) RunAndReturn(run func(time.Time) string) *mockLocalizer_FormatDateTime_Call {
	_c.Call.Return(run)
	return _c
}

// FormatTime provides a mock function with given fields: t
func (_m *mockLocalizer) FormatTime(t time.Time) string {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for FormatTime")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(time.Time) string); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_FormatTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatTime'
type mockLocalizer_FormatTime_Call struct {
	*mock.Call
}

// FormatTime is a helper method to define mock.On call
//   - t time.Time
func (_e *mockLocalizer_Expecter) FormatTime(t interface{}) *mockLocalizer_FormatTime_Call {
	return &mockLocalizer_FormatTime_Call{Call: _e.mock.On("FormatTime", t)}
}

func (_c *mockLocalizer_FormatTime_Call) Run(run func(t time.Time)) *mockLocalizer_FormatTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *mockLocalizer_FormatTime_Call) Return(_a0 string) *mockLocalizer_FormatTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_FormatTime_Call) RunAndReturn(run func(time.Time) string) *mockLocalizer_FormatTime_Call {
	_c.Call.Return(run)
	return _c
}

// PenceToPounds provides a mock function with given fields: pence
func (_m *mockLocalizer) PenceToPounds(pence int) string {
	ret := _m.Called(pence)

	if len(ret) == 0 {
		panic("no return value specified for PenceToPounds")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(pence)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_PenceToPounds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PenceToPounds'
type mockLocalizer_PenceToPounds_Call struct {
	*mock.Call
}

// PenceToPounds is a helper method to define mock.On call
//   - pence int
func (_e *mockLocalizer_Expecter) PenceToPounds(pence interface{}) *mockLocalizer_PenceToPounds_Call {
	return &mockLocalizer_PenceToPounds_Call{Call: _e.mock.On("PenceToPounds", pence)}
}

func (_c *mockLocalizer_PenceToPounds_Call) Run(run func(pence int)) *mockLocalizer_PenceToPounds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *mockLocalizer_PenceToPounds_Call) Return(_a0 string) *mockLocalizer_PenceToPounds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_PenceToPounds_Call) RunAndReturn(run func(int) string) *mockLocalizer_PenceToPounds_Call {
	_c.Call.Return(run)
	return _c
}

// Possessive provides a mock function with given fields: s
func (_m *mockLocalizer) Possessive(s string) string {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Possessive")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_Possessive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Possessive'
type mockLocalizer_Possessive_Call struct {
	*mock.Call
}

// Possessive is a helper method to define mock.On call
//   - s string
func (_e *mockLocalizer_Expecter) Possessive(s interface{}) *mockLocalizer_Possessive_Call {
	return &mockLocalizer_Possessive_Call{Call: _e.mock.On("Possessive", s)}
}

func (_c *mockLocalizer_Possessive_Call) Run(run func(s string)) *mockLocalizer_Possessive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockLocalizer_Possessive_Call) Return(_a0 string) *mockLocalizer_Possessive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_Possessive_Call) RunAndReturn(run func(string) string) *mockLocalizer_Possessive_Call {
	_c.Call.Return(run)
	return _c
}

// SetShowTranslationKeys provides a mock function with given fields: s
func (_m *mockLocalizer) SetShowTranslationKeys(s bool) {
	_m.Called(s)
}

// mockLocalizer_SetShowTranslationKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetShowTranslationKeys'
type mockLocalizer_SetShowTranslationKeys_Call struct {
	*mock.Call
}

// SetShowTranslationKeys is a helper method to define mock.On call
//   - s bool
func (_e *mockLocalizer_Expecter) SetShowTranslationKeys(s interface{}) *mockLocalizer_SetShowTranslationKeys_Call {
	return &mockLocalizer_SetShowTranslationKeys_Call{Call: _e.mock.On("SetShowTranslationKeys", s)}
}

func (_c *mockLocalizer_SetShowTranslationKeys_Call) Run(run func(s bool)) *mockLocalizer_SetShowTranslationKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *mockLocalizer_SetShowTranslationKeys_Call) Return() *mockLocalizer_SetShowTranslationKeys_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockLocalizer_SetShowTranslationKeys_Call) RunAndReturn(run func(bool)) *mockLocalizer_SetShowTranslationKeys_Call {
	_c.Call.Return(run)
	return _c
}

// ShowTranslationKeys provides a mock function with given fields:
func (_m *mockLocalizer) ShowTranslationKeys() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ShowTranslationKeys")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockLocalizer_ShowTranslationKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowTranslationKeys'
type mockLocalizer_ShowTranslationKeys_Call struct {
	*mock.Call
}

// ShowTranslationKeys is a helper method to define mock.On call
func (_e *mockLocalizer_Expecter) ShowTranslationKeys() *mockLocalizer_ShowTranslationKeys_Call {
	return &mockLocalizer_ShowTranslationKeys_Call{Call: _e.mock.On("ShowTranslationKeys")}
}

func (_c *mockLocalizer_ShowTranslationKeys_Call) Run(run func()) *mockLocalizer_ShowTranslationKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockLocalizer_ShowTranslationKeys_Call) Return(_a0 bool) *mockLocalizer_ShowTranslationKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_ShowTranslationKeys_Call) RunAndReturn(run func() bool) *mockLocalizer_ShowTranslationKeys_Call {
	_c.Call.Return(run)
	return _c
}

// T provides a mock function with given fields: messageID
func (_m *mockLocalizer) T(messageID string) string {
	ret := _m.Called(messageID)

	if len(ret) == 0 {
		panic("no return value specified for T")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(messageID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_T_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'T'
type mockLocalizer_T_Call struct {
	*mock.Call
}

// T is a helper method to define mock.On call
//   - messageID string
func (_e *mockLocalizer_Expecter) T(messageID interface{}) *mockLocalizer_T_Call {
	return &mockLocalizer_T_Call{Call: _e.mock.On("T", messageID)}
}

func (_c *mockLocalizer_T_Call) Run(run func(messageID string)) *mockLocalizer_T_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockLocalizer_T_Call) Return(_a0 string) *mockLocalizer_T_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_T_Call) RunAndReturn(run func(string) string) *mockLocalizer_T_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLocalizer creates a new instance of mockLocalizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLocalizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLocalizer {
	mock := &mockLocalizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
