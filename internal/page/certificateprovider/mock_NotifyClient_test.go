// Code generated by mockery v2.39.1. DO NOT EDIT.

package certificateprovider

import (
	context "context"

	notify "github.com/ministryofjustice/opg-modernising-lpa/internal/notify"
	mock "github.com/stretchr/testify/mock"
)

// mockNotifyClient is an autogenerated mock type for the NotifyClient type
type mockNotifyClient struct {
	mock.Mock
}

type mockNotifyClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockNotifyClient) EXPECT() *mockNotifyClient_Expecter {
	return &mockNotifyClient_Expecter{mock: &_m.Mock}
}

// SendActorEmail provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *mockNotifyClient) SendActorEmail(_a0 context.Context, _a1 string, _a2 string, _a3 notify.Email) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for SendActorEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, notify.Email) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockNotifyClient_SendActorEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendActorEmail'
type mockNotifyClient_SendActorEmail_Call struct {
	*mock.Call
}

// SendActorEmail is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
//   - _a3 notify.Email
func (_e *mockNotifyClient_Expecter) SendActorEmail(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *mockNotifyClient_SendActorEmail_Call {
	return &mockNotifyClient_SendActorEmail_Call{Call: _e.mock.On("SendActorEmail", _a0, _a1, _a2, _a3)}
}

func (_c *mockNotifyClient_SendActorEmail_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string, _a3 notify.Email)) *mockNotifyClient_SendActorEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(notify.Email))
	})
	return _c
}

func (_c *mockNotifyClient_SendActorEmail_Call) Return(_a0 error) *mockNotifyClient_SendActorEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockNotifyClient_SendActorEmail_Call) RunAndReturn(run func(context.Context, string, string, notify.Email) error) *mockNotifyClient_SendActorEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendEmail provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockNotifyClient) SendEmail(_a0 context.Context, _a1 string, _a2 notify.Email) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, notify.Email) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockNotifyClient_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type mockNotifyClient_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 notify.Email
func (_e *mockNotifyClient_Expecter) SendEmail(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockNotifyClient_SendEmail_Call {
	return &mockNotifyClient_SendEmail_Call{Call: _e.mock.On("SendEmail", _a0, _a1, _a2)}
}

func (_c *mockNotifyClient_SendEmail_Call) Run(run func(_a0 context.Context, _a1 string, _a2 notify.Email)) *mockNotifyClient_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(notify.Email))
	})
	return _c
}

func (_c *mockNotifyClient_SendEmail_Call) Return(_a0 error) *mockNotifyClient_SendEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockNotifyClient_SendEmail_Call) RunAndReturn(run func(context.Context, string, notify.Email) error) *mockNotifyClient_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// newMockNotifyClient creates a new instance of mockNotifyClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockNotifyClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockNotifyClient {
	mock := &mockNotifyClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
