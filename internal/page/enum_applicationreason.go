// Code generated by "enumerator -type ApplicationReason -linecomment -empty"; DO NOT EDIT.
package page

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NewApplication-1]
	_ = x[RemakeOfInvalidApplication-2]
	_ = x[AdditionalApplication-3]
}

const _ApplicationReason_name = "new-applicationremakeadditional-application"

var _ApplicationReason_index = [...]uint8{0, 15, 21, 43}

func (i ApplicationReason) String() string {
	i -= 1
	if i >= ApplicationReason(len(_ApplicationReason_index)-1) {
		return "ApplicationReason(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ApplicationReason_name[_ApplicationReason_index[i]:_ApplicationReason_index[i+1]]
}

func (i ApplicationReason) IsNewApplication() bool {
	return i == NewApplication
}

func (i ApplicationReason) IsRemakeOfInvalidApplication() bool {
	return i == RemakeOfInvalidApplication
}

func (i ApplicationReason) IsAdditionalApplication() bool {
	return i == AdditionalApplication
}

func ParseApplicationReason(s string) (ApplicationReason, error) {
	switch s {
	case "new-application":
		return NewApplication, nil
	case "remake":
		return RemakeOfInvalidApplication, nil
	case "additional-application":
		return AdditionalApplication, nil
	default:
		return ApplicationReason(0), fmt.Errorf("invalid ApplicationReason '%s'", s)
	}
}

type ApplicationReasonOptions struct {
	NewApplication             ApplicationReason
	RemakeOfInvalidApplication ApplicationReason
	AdditionalApplication      ApplicationReason
}

var ApplicationReasonValues = ApplicationReasonOptions{
	NewApplication:             NewApplication,
	RemakeOfInvalidApplication: RemakeOfInvalidApplication,
	AdditionalApplication:      AdditionalApplication,
}

func (i ApplicationReason) Empty() bool {
	return i == ApplicationReason(0)
}
