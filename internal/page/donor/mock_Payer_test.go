// Code generated by mockery v2.20.0. DO NOT EDIT.

package donor

import (
	http "net/http"

	page "github.com/ministryofjustice/opg-modernising-lpa/internal/page"
	mock "github.com/stretchr/testify/mock"
)

// mockPayer is an autogenerated mock type for the Payer type
type mockPayer struct {
	mock.Mock
}

// Pay provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *mockPayer) Pay(_a0 page.AppData, _a1 http.ResponseWriter, _a2 *http.Request, _a3 *page.Lpa) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(page.AppData, http.ResponseWriter, *http.Request, *page.Lpa) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewMockPayer interface {
	mock.TestingT
	Cleanup(func())
}

// newMockPayer creates a new instance of mockPayer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockPayer(t mockConstructorTestingTnewMockPayer) *mockPayer {
	mock := &mockPayer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
