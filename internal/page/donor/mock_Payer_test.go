// Code generated by mockery v2.42.2. DO NOT EDIT.

package donor

import (
	http "net/http"

	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"

	mock "github.com/stretchr/testify/mock"

	page "github.com/ministryofjustice/opg-modernising-lpa/internal/page"
)

// mockPayer is an autogenerated mock type for the Payer type
type mockPayer struct {
	mock.Mock
}

type mockPayer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPayer) EXPECT() *mockPayer_Expecter {
	return &mockPayer_Expecter{mock: &_m.Mock}
}

// Pay provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *mockPayer) Pay(_a0 page.AppData, _a1 http.ResponseWriter, _a2 *http.Request, _a3 *actor.DonorProvidedDetails) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(page.AppData, http.ResponseWriter, *http.Request, *actor.DonorProvidedDetails) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockPayer_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type mockPayer_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - _a0 page.AppData
//   - _a1 http.ResponseWriter
//   - _a2 *http.Request
//   - _a3 *actor.DonorProvidedDetails
func (_e *mockPayer_Expecter) Pay(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *mockPayer_Pay_Call {
	return &mockPayer_Pay_Call{Call: _e.mock.On("Pay", _a0, _a1, _a2, _a3)}
}

func (_c *mockPayer_Pay_Call) Run(run func(_a0 page.AppData, _a1 http.ResponseWriter, _a2 *http.Request, _a3 *actor.DonorProvidedDetails)) *mockPayer_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(page.AppData), args[1].(http.ResponseWriter), args[2].(*http.Request), args[3].(*actor.DonorProvidedDetails))
	})
	return _c
}

func (_c *mockPayer_Pay_Call) Return(_a0 error) *mockPayer_Pay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockPayer_Pay_Call) RunAndReturn(run func(page.AppData, http.ResponseWriter, *http.Request, *actor.DonorProvidedDetails) error) *mockPayer_Pay_Call {
	_c.Call.Return(run)
	return _c
}

// newMockPayer creates a new instance of mockPayer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPayer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPayer {
	mock := &mockPayer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
