// Code generated by mockery v2.20.0. DO NOT EDIT.

package donor

import (
	context "context"

	page "github.com/ministryofjustice/opg-modernising-lpa/internal/page"
	mock "github.com/stretchr/testify/mock"
)

// mockScannedDocumentStore is an autogenerated mock type for the ScannedDocumentStore type
type mockScannedDocumentStore struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: _a0
func (_m *mockScannedDocumentStore) GetAll(_a0 context.Context) ([]page.ScannedDocument, error) {
	ret := _m.Called(_a0)

	var r0 []page.ScannedDocument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]page.ScannedDocument, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []page.Document); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]page.ScannedDocument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, scannedDocument
func (_m *mockScannedDocumentStore) Put(ctx context.Context, scannedDocument page.ScannedDocument) error {
	ret := _m.Called(ctx, scannedDocument)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, page.ScannedDocument) error); ok {
		r0 = rf(ctx, scannedDocument)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewMockScannedDocumentStore interface {
	mock.TestingT
	Cleanup(func())
}

// newMockScannedDocumentStore creates a new instance of mockScannedDocumentStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockScannedDocumentStore(t mockConstructorTestingTnewMockScannedDocumentStore) *mockScannedDocumentStore {
	mock := &mockScannedDocumentStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
