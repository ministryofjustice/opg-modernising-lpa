// Code generated by mockery v2.42.0. DO NOT EDIT.

package donor

import (
	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"
	"github.com/ministryofjustice/opg-modernising-lpa/internal/page"
	mock "github.com/stretchr/testify/mock"
)

// mockProgressTracker is an autogenerated mock type for the ProgressTracker type
type mockProgressTracker struct {
	mock.Mock
}

type mockProgressTracker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockProgressTracker) EXPECT() *mockProgressTracker_Expecter {
	return &mockProgressTracker_Expecter{mock: &_m.Mock}
}

// Progress provides a mock function with given fields: donor, certificateProvider, attorneys
func (_m *mockProgressTracker) Progress(donor *actor.DonorProvidedDetails, certificateProvider *actor.CertificateProviderProvidedDetails, attorneys []*actor.AttorneyProvidedDetails) page.Progress {
	ret := _m.Called(donor, certificateProvider, attorneys)

	if len(ret) == 0 {
		panic("no return value specified for Progress")
	}

	var r0 page.Progress
	if rf, ok := ret.Get(0).(func(*actor.DonorProvidedDetails, *actor.CertificateProviderProvidedDetails, []*actor.AttorneyProvidedDetails) page.Progress); ok {
		r0 = rf(donor, certificateProvider, attorneys)
	} else {
		r0 = ret.Get(0).(page.Progress)
	}

	return r0
}

// mockProgressTracker_Progress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Progress'
type mockProgressTracker_Progress_Call struct {
	*mock.Call
}

// Progress is a helper method to define mock.On call
//   - donor *actor.DonorProvidedDetails
//   - certificateProvider *actor.CertificateProviderProvidedDetails
//   - attorneys []*actor.AttorneyProvidedDetails
func (_e *mockProgressTracker_Expecter) Progress(donor interface{}, certificateProvider interface{}, attorneys interface{}) *mockProgressTracker_Progress_Call {
	return &mockProgressTracker_Progress_Call{Call: _e.mock.On("Progress", donor, certificateProvider, attorneys)}
}

func (_c *mockProgressTracker_Progress_Call) Run(run func(donor *actor.DonorProvidedDetails, certificateProvider *actor.CertificateProviderProvidedDetails, attorneys []*actor.AttorneyProvidedDetails)) *mockProgressTracker_Progress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*actor.DonorProvidedDetails), args[1].(*actor.CertificateProviderProvidedDetails), args[2].([]*actor.AttorneyProvidedDetails))
	})
	return _c
}

func (_c *mockProgressTracker_Progress_Call) Return(_a0 page.Progress) *mockProgressTracker_Progress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockProgressTracker_Progress_Call) RunAndReturn(run func(*actor.DonorProvidedDetails, *actor.CertificateProviderProvidedDetails, []*actor.AttorneyProvidedDetails) page.Progress) *mockProgressTracker_Progress_Call {
	_c.Call.Return(run)
	return _c
}

// newMockProgressTracker creates a new instance of mockProgressTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockProgressTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockProgressTracker {
	mock := &mockProgressTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
