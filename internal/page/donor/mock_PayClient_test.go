// Code generated by mockery v2.39.1. DO NOT EDIT.

package donor

import (
	context "context"

	pay "github.com/ministryofjustice/opg-modernising-lpa/internal/pay"
	mock "github.com/stretchr/testify/mock"
)

// mockPayClient is an autogenerated mock type for the PayClient type
type mockPayClient struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: _a0, _a1
func (_m *mockPayClient) CreatePayment(_a0 context.Context, _a1 pay.CreatePaymentBody) (pay.CreatePaymentResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 pay.CreatePaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pay.CreatePaymentBody) (pay.CreatePaymentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pay.CreatePaymentBody) pay.CreatePaymentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(pay.CreatePaymentResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pay.CreatePaymentBody) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayment provides a mock function with given fields: _a0, _a1
func (_m *mockPayClient) GetPayment(_a0 context.Context, _a1 string) (pay.GetPaymentResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPayment")
	}

	var r0 pay.GetPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pay.GetPaymentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pay.GetPaymentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(pay.GetPaymentResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockPayClient creates a new instance of mockPayClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPayClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPayClient {
	mock := &mockPayClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
