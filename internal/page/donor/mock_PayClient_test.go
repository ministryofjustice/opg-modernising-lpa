// Code generated by mockery v2.42.2. DO NOT EDIT.

package donor

import (
	context "context"

	pay "github.com/ministryofjustice/opg-modernising-lpa/internal/pay"
	mock "github.com/stretchr/testify/mock"
)

// mockPayClient is an autogenerated mock type for the PayClient type
type mockPayClient struct {
	mock.Mock
}

type mockPayClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPayClient) EXPECT() *mockPayClient_Expecter {
	return &mockPayClient_Expecter{mock: &_m.Mock}
}

// CanRedirect provides a mock function with given fields: url
func (_m *mockPayClient) CanRedirect(url string) bool {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for CanRedirect")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockPayClient_CanRedirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CanRedirect'
type mockPayClient_CanRedirect_Call struct {
	*mock.Call
}

// CanRedirect is a helper method to define mock.On call
//   - url string
func (_e *mockPayClient_Expecter) CanRedirect(url interface{}) *mockPayClient_CanRedirect_Call {
	return &mockPayClient_CanRedirect_Call{Call: _e.mock.On("CanRedirect", url)}
}

func (_c *mockPayClient_CanRedirect_Call) Run(run func(url string)) *mockPayClient_CanRedirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockPayClient_CanRedirect_Call) Return(_a0 bool) *mockPayClient_CanRedirect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockPayClient_CanRedirect_Call) RunAndReturn(run func(string) bool) *mockPayClient_CanRedirect_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePayment provides a mock function with given fields: ctx, lpaUID, body
func (_m *mockPayClient) CreatePayment(ctx context.Context, lpaUID string, body pay.CreatePaymentBody) (*pay.CreatePaymentResponse, error) {
	ret := _m.Called(ctx, lpaUID, body)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 *pay.CreatePaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pay.CreatePaymentBody) (*pay.CreatePaymentResponse, error)); ok {
		return rf(ctx, lpaUID, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, pay.CreatePaymentBody) *pay.CreatePaymentResponse); ok {
		r0 = rf(ctx, lpaUID, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pay.CreatePaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, pay.CreatePaymentBody) error); ok {
		r1 = rf(ctx, lpaUID, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockPayClient_CreatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayment'
type mockPayClient_CreatePayment_Call struct {
	*mock.Call
}

// CreatePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - lpaUID string
//   - body pay.CreatePaymentBody
func (_e *mockPayClient_Expecter) CreatePayment(ctx interface{}, lpaUID interface{}, body interface{}) *mockPayClient_CreatePayment_Call {
	return &mockPayClient_CreatePayment_Call{Call: _e.mock.On("CreatePayment", ctx, lpaUID, body)}
}

func (_c *mockPayClient_CreatePayment_Call) Run(run func(ctx context.Context, lpaUID string, body pay.CreatePaymentBody)) *mockPayClient_CreatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(pay.CreatePaymentBody))
	})
	return _c
}

func (_c *mockPayClient_CreatePayment_Call) Return(_a0 *pay.CreatePaymentResponse, _a1 error) *mockPayClient_CreatePayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockPayClient_CreatePayment_Call) RunAndReturn(run func(context.Context, string, pay.CreatePaymentBody) (*pay.CreatePaymentResponse, error)) *mockPayClient_CreatePayment_Call {
	_c.Call.Return(run)
	return _c
}

// GetPayment provides a mock function with given fields: ctx, id
func (_m *mockPayClient) GetPayment(ctx context.Context, id string) (pay.GetPaymentResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPayment")
	}

	var r0 pay.GetPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pay.GetPaymentResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pay.GetPaymentResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(pay.GetPaymentResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockPayClient_GetPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPayment'
type mockPayClient_GetPayment_Call struct {
	*mock.Call
}

// GetPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *mockPayClient_Expecter) GetPayment(ctx interface{}, id interface{}) *mockPayClient_GetPayment_Call {
	return &mockPayClient_GetPayment_Call{Call: _e.mock.On("GetPayment", ctx, id)}
}

func (_c *mockPayClient_GetPayment_Call) Run(run func(ctx context.Context, id string)) *mockPayClient_GetPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockPayClient_GetPayment_Call) Return(_a0 pay.GetPaymentResponse, _a1 error) *mockPayClient_GetPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockPayClient_GetPayment_Call) RunAndReturn(run func(context.Context, string) (pay.GetPaymentResponse, error)) *mockPayClient_GetPayment_Call {
	_c.Call.Return(run)
	return _c
}

// newMockPayClient creates a new instance of mockPayClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPayClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPayClient {
	mock := &mockPayClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
