// Code generated by mockery v2.41.0. DO NOT EDIT.

package donor

import (
	context "context"

	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"

	mock "github.com/stretchr/testify/mock"
)

// mockDonorStore is an autogenerated mock type for the DonorStore type
type mockDonorStore struct {
	mock.Mock
}

type mockDonorStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDonorStore) EXPECT() *mockDonorStore_Expecter {
	return &mockDonorStore_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0
func (_m *mockDonorStore) Delete(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDonorStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockDonorStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockDonorStore_Expecter) Delete(_a0 interface{}) *mockDonorStore_Delete_Call {
	return &mockDonorStore_Delete_Call{Call: _e.mock.On("Delete", _a0)}
}

func (_c *mockDonorStore_Delete_Call) Run(run func(_a0 context.Context)) *mockDonorStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDonorStore_Delete_Call) Return(_a0 error) *mockDonorStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDonorStore_Delete_Call) RunAndReturn(run func(context.Context) error) *mockDonorStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0
func (_m *mockDonorStore) Get(_a0 context.Context) (*actor.DonorProvidedDetails, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *actor.DonorProvidedDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*actor.DonorProvidedDetails, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *actor.DonorProvidedDetails); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*actor.DonorProvidedDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDonorStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockDonorStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockDonorStore_Expecter) Get(_a0 interface{}) *mockDonorStore_Get_Call {
	return &mockDonorStore_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *mockDonorStore_Get_Call) Run(run func(_a0 context.Context)) *mockDonorStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDonorStore_Get_Call) Return(_a0 *actor.DonorProvidedDetails, _a1 error) *mockDonorStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDonorStore_Get_Call) RunAndReturn(run func(context.Context) (*actor.DonorProvidedDetails, error)) *mockDonorStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Latest provides a mock function with given fields: _a0
func (_m *mockDonorStore) Latest(_a0 context.Context) (*actor.DonorProvidedDetails, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Latest")
	}

	var r0 *actor.DonorProvidedDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*actor.DonorProvidedDetails, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *actor.DonorProvidedDetails); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*actor.DonorProvidedDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDonorStore_Latest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Latest'
type mockDonorStore_Latest_Call struct {
	*mock.Call
}

// Latest is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockDonorStore_Expecter) Latest(_a0 interface{}) *mockDonorStore_Latest_Call {
	return &mockDonorStore_Latest_Call{Call: _e.mock.On("Latest", _a0)}
}

func (_c *mockDonorStore_Latest_Call) Run(run func(_a0 context.Context)) *mockDonorStore_Latest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDonorStore_Latest_Call) Return(_a0 *actor.DonorProvidedDetails, _a1 error) *mockDonorStore_Latest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDonorStore_Latest_Call) RunAndReturn(run func(context.Context) (*actor.DonorProvidedDetails, error)) *mockDonorStore_Latest_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: _a0, _a1
func (_m *mockDonorStore) Put(_a0 context.Context, _a1 *actor.DonorProvidedDetails) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *actor.DonorProvidedDetails) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDonorStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockDonorStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *actor.DonorProvidedDetails
func (_e *mockDonorStore_Expecter) Put(_a0 interface{}, _a1 interface{}) *mockDonorStore_Put_Call {
	return &mockDonorStore_Put_Call{Call: _e.mock.On("Put", _a0, _a1)}
}

func (_c *mockDonorStore_Put_Call) Run(run func(_a0 context.Context, _a1 *actor.DonorProvidedDetails)) *mockDonorStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*actor.DonorProvidedDetails))
	})
	return _c
}

func (_c *mockDonorStore_Put_Call) Return(_a0 error) *mockDonorStore_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDonorStore_Put_Call) RunAndReturn(run func(context.Context, *actor.DonorProvidedDetails) error) *mockDonorStore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDonorStore creates a new instance of mockDonorStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDonorStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDonorStore {
	mock := &mockDonorStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
