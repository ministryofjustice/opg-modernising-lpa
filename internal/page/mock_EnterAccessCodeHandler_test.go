// Code generated by mockery. DO NOT EDIT.

package page

import (
	accesscodedata "github.com/ministryofjustice/opg-modernising-lpa/internal/accesscode/accesscodedata"
	appcontext "github.com/ministryofjustice/opg-modernising-lpa/internal/appcontext"

	http "net/http"

	lpadata "github.com/ministryofjustice/opg-modernising-lpa/internal/lpastore/lpadata"

	mock "github.com/stretchr/testify/mock"

	sesh "github.com/ministryofjustice/opg-modernising-lpa/internal/sesh"
)

// mockEnterAccessCodeHandler is an autogenerated mock type for the EnterAccessCodeHandler type
type mockEnterAccessCodeHandler struct {
	mock.Mock
}

type mockEnterAccessCodeHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *mockEnterAccessCodeHandler) EXPECT() *mockEnterAccessCodeHandler_Expecter {
	return &mockEnterAccessCodeHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: appData, w, r, session, lpa, link
func (_m *mockEnterAccessCodeHandler) Execute(appData appcontext.Data, w http.ResponseWriter, r *http.Request, session *sesh.LoginSession, lpa *lpadata.Lpa, link accesscodedata.Link) error {
	ret := _m.Called(appData, w, r, session, lpa, link)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(appcontext.Data, http.ResponseWriter, *http.Request, *sesh.LoginSession, *lpadata.Lpa, accesscodedata.Link) error); ok {
		r0 = rf(appData, w, r, session, lpa, link)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockEnterAccessCodeHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockEnterAccessCodeHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - appData appcontext.Data
//   - w http.ResponseWriter
//   - r *http.Request
//   - session *sesh.LoginSession
//   - lpa *lpadata.Lpa
//   - link accesscodedata.Link
func (_e *mockEnterAccessCodeHandler_Expecter) Execute(appData interface{}, w interface{}, r interface{}, session interface{}, lpa interface{}, link interface{}) *mockEnterAccessCodeHandler_Execute_Call {
	return &mockEnterAccessCodeHandler_Execute_Call{Call: _e.mock.On("Execute", appData, w, r, session, lpa, link)}
}

func (_c *mockEnterAccessCodeHandler_Execute_Call) Run(run func(appData appcontext.Data, w http.ResponseWriter, r *http.Request, session *sesh.LoginSession, lpa *lpadata.Lpa, link accesscodedata.Link)) *mockEnterAccessCodeHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(appcontext.Data), args[1].(http.ResponseWriter), args[2].(*http.Request), args[3].(*sesh.LoginSession), args[4].(*lpadata.Lpa), args[5].(accesscodedata.Link))
	})
	return _c
}

func (_c *mockEnterAccessCodeHandler_Execute_Call) Return(_a0 error) *mockEnterAccessCodeHandler_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEnterAccessCodeHandler_Execute_Call) RunAndReturn(run func(appcontext.Data, http.ResponseWriter, *http.Request, *sesh.LoginSession, *lpadata.Lpa, accesscodedata.Link) error) *mockEnterAccessCodeHandler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockEnterAccessCodeHandler creates a new instance of mockEnterAccessCodeHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockEnterAccessCodeHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockEnterAccessCodeHandler {
	mock := &mockEnterAccessCodeHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
