// Code generated by mockery. DO NOT EDIT.

package page

import (
	accesscodedata "github.com/ministryofjustice/opg-modernising-lpa/internal/accesscode/accesscodedata"
	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockAccessCodeStore is an autogenerated mock type for the AccessCodeStore type
type mockAccessCodeStore struct {
	mock.Mock
}

type mockAccessCodeStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAccessCodeStore) EXPECT() *mockAccessCodeStore_Expecter {
	return &mockAccessCodeStore_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, actorType, code
func (_m *mockAccessCodeStore) Get(ctx context.Context, actorType actor.Type, code accesscodedata.Hashed) (accesscodedata.Link, error) {
	ret := _m.Called(ctx, actorType, code)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 accesscodedata.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, actor.Type, accesscodedata.Hashed) (accesscodedata.Link, error)); ok {
		return rf(ctx, actorType, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, actor.Type, accesscodedata.Hashed) accesscodedata.Link); ok {
		r0 = rf(ctx, actorType, code)
	} else {
		r0 = ret.Get(0).(accesscodedata.Link)
	}

	if rf, ok := ret.Get(1).(func(context.Context, actor.Type, accesscodedata.Hashed) error); ok {
		r1 = rf(ctx, actorType, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAccessCodeStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockAccessCodeStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - actorType actor.Type
//   - code accesscodedata.Hashed
func (_e *mockAccessCodeStore_Expecter) Get(ctx interface{}, actorType interface{}, code interface{}) *mockAccessCodeStore_Get_Call {
	return &mockAccessCodeStore_Get_Call{Call: _e.mock.On("Get", ctx, actorType, code)}
}

func (_c *mockAccessCodeStore_Get_Call) Run(run func(ctx context.Context, actorType actor.Type, code accesscodedata.Hashed)) *mockAccessCodeStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(actor.Type), args[2].(accesscodedata.Hashed))
	})
	return _c
}

func (_c *mockAccessCodeStore_Get_Call) Return(_a0 accesscodedata.Link, _a1 error) *mockAccessCodeStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAccessCodeStore_Get_Call) RunAndReturn(run func(context.Context, actor.Type, accesscodedata.Hashed) (accesscodedata.Link, error)) *mockAccessCodeStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAccessCodeStore creates a new instance of mockAccessCodeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAccessCodeStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAccessCodeStore {
	mock := &mockAccessCodeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
