// Code generated by mockery v2.20.0. DO NOT EDIT.

package attorney

import (
	context "context"

	page "github.com/ministryofjustice/opg-modernising-lpa/internal/page"
	mock "github.com/stretchr/testify/mock"
)

// mockDashboardStore is an autogenerated mock type for the DashboardStore type
type mockDashboardStore struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *mockDashboardStore) GetAll(ctx context.Context) ([]page.LpaAndActorTasks, []page.LpaAndActorTasks, []page.LpaAndActorTasks, error) {
	ret := _m.Called(ctx)

	var r0 []page.LpaAndActorTasks
	var r1 []page.LpaAndActorTasks
	var r2 []page.LpaAndActorTasks
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]page.LpaAndActorTasks, []page.LpaAndActorTasks, []page.LpaAndActorTasks, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []page.LpaAndActorTasks); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]page.LpaAndActorTasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) []page.LpaAndActorTasks); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]page.LpaAndActorTasks)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) []page.LpaAndActorTasks); ok {
		r2 = rf(ctx)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]page.LpaAndActorTasks)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context) error); ok {
		r3 = rf(ctx)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// SubExists provides a mock function with given fields: ctx, sub
func (_m *mockDashboardStore) SubExists(ctx context.Context, sub string) (bool, error) {
	ret := _m.Called(ctx, sub)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, sub)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, sub)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockDashboardStore interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDashboardStore creates a new instance of mockDashboardStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDashboardStore(t mockConstructorTestingTnewMockDashboardStore) *mockDashboardStore {
	mock := &mockDashboardStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
