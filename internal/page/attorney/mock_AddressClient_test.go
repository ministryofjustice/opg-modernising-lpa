// Code generated by mockery v2.40.1. DO NOT EDIT.

package attorney

import (
	context "context"

	place "github.com/ministryofjustice/opg-modernising-lpa/internal/place"
	mock "github.com/stretchr/testify/mock"
)

// mockAddressClient is an autogenerated mock type for the AddressClient type
type mockAddressClient struct {
	mock.Mock
}

type mockAddressClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAddressClient) EXPECT() *mockAddressClient_Expecter {
	return &mockAddressClient_Expecter{mock: &_m.Mock}
}

// LookupPostcode provides a mock function with given fields: ctx, postcode
func (_m *mockAddressClient) LookupPostcode(ctx context.Context, postcode string) ([]place.Address, error) {
	ret := _m.Called(ctx, postcode)

	if len(ret) == 0 {
		panic("no return value specified for LookupPostcode")
	}

	var r0 []place.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]place.Address, error)); ok {
		return rf(ctx, postcode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []place.Address); ok {
		r0 = rf(ctx, postcode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]place.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, postcode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAddressClient_LookupPostcode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupPostcode'
type mockAddressClient_LookupPostcode_Call struct {
	*mock.Call
}

// LookupPostcode is a helper method to define mock.On call
//   - ctx context.Context
//   - postcode string
func (_e *mockAddressClient_Expecter) LookupPostcode(ctx interface{}, postcode interface{}) *mockAddressClient_LookupPostcode_Call {
	return &mockAddressClient_LookupPostcode_Call{Call: _e.mock.On("LookupPostcode", ctx, postcode)}
}

func (_c *mockAddressClient_LookupPostcode_Call) Run(run func(ctx context.Context, postcode string)) *mockAddressClient_LookupPostcode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockAddressClient_LookupPostcode_Call) Return(_a0 []place.Address, _a1 error) *mockAddressClient_LookupPostcode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAddressClient_LookupPostcode_Call) RunAndReturn(run func(context.Context, string) ([]place.Address, error)) *mockAddressClient_LookupPostcode_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAddressClient creates a new instance of mockAddressClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAddressClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAddressClient {
	mock := &mockAddressClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
