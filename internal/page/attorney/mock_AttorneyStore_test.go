// Code generated by mockery v2.39.1. DO NOT EDIT.

package attorney

import (
	context "context"

	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"

	mock "github.com/stretchr/testify/mock"
)

// mockAttorneyStore is an autogenerated mock type for the AttorneyStore type
type mockAttorneyStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *mockAttorneyStore) Create(_a0 context.Context, _a1 string, _a2 string, _a3 bool, _a4 bool) (*actor.AttorneyProvidedDetails, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *actor.AttorneyProvidedDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool) (*actor.AttorneyProvidedDetails, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool) *actor.AttorneyProvidedDetails); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*actor.AttorneyProvidedDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool, bool) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *mockAttorneyStore) Get(_a0 context.Context) (*actor.AttorneyProvidedDetails, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *actor.AttorneyProvidedDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*actor.AttorneyProvidedDetails, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *actor.AttorneyProvidedDetails); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*actor.AttorneyProvidedDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAny provides a mock function with given fields: _a0
func (_m *mockAttorneyStore) GetAny(_a0 context.Context) ([]*actor.AttorneyProvidedDetails, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAny")
	}

	var r0 []*actor.AttorneyProvidedDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*actor.AttorneyProvidedDetails, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*actor.AttorneyProvidedDetails); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*actor.AttorneyProvidedDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: _a0, _a1
func (_m *mockAttorneyStore) Put(_a0 context.Context, _a1 *actor.AttorneyProvidedDetails) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *actor.AttorneyProvidedDetails) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockAttorneyStore creates a new instance of mockAttorneyStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAttorneyStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAttorneyStore {
	mock := &mockAttorneyStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
