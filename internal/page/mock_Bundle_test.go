// Code generated by mockery v2.45.0. DO NOT EDIT.

package page

import (
	localize "github.com/ministryofjustice/opg-modernising-lpa/internal/localize"
	mock "github.com/stretchr/testify/mock"
)

// mockBundle is an autogenerated mock type for the Bundle type
type mockBundle struct {
	mock.Mock
}

type mockBundle_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBundle) EXPECT() *mockBundle_Expecter {
	return &mockBundle_Expecter{mock: &_m.Mock}
}

// For provides a mock function with given fields: lang
func (_m *mockBundle) For(lang localize.Lang) *localize.Localizer {
	ret := _m.Called(lang)

	if len(ret) == 0 {
		panic("no return value specified for For")
	}

	var r0 *localize.Localizer
	if rf, ok := ret.Get(0).(func(localize.Lang) *localize.Localizer); ok {
		r0 = rf(lang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*localize.Localizer)
		}
	}

	return r0
}

// mockBundle_For_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'For'
type mockBundle_For_Call struct {
	*mock.Call
}

// For is a helper method to define mock.On call
//   - lang localize.Lang
func (_e *mockBundle_Expecter) For(lang interface{}) *mockBundle_For_Call {
	return &mockBundle_For_Call{Call: _e.mock.On("For", lang)}
}

func (_c *mockBundle_For_Call) Run(run func(lang localize.Lang)) *mockBundle_For_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(localize.Lang))
	})
	return _c
}

func (_c *mockBundle_For_Call) Return(_a0 *localize.Localizer) *mockBundle_For_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBundle_For_Call) RunAndReturn(run func(localize.Lang) *localize.Localizer) *mockBundle_For_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBundle creates a new instance of mockBundle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBundle(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBundle {
	mock := &mockBundle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
