// Code generated by mockery. DO NOT EDIT.

package page

import (
	onelogin "github.com/ministryofjustice/opg-modernising-lpa/internal/onelogin"
	mock "github.com/stretchr/testify/mock"
)

// mockLoginOneLoginClient is an autogenerated mock type for the LoginOneLoginClient type
type mockLoginOneLoginClient struct {
	mock.Mock
}

type mockLoginOneLoginClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLoginOneLoginClient) EXPECT() *mockLoginOneLoginClient_Expecter {
	return &mockLoginOneLoginClient_Expecter{mock: &_m.Mock}
}

// AuthCodeURL provides a mock function with given fields: state, nonce, locale, confidenceLevel
func (_m *mockLoginOneLoginClient) AuthCodeURL(state string, nonce string, locale string, confidenceLevel onelogin.ConfidenceLevel) (string, error) {
	ret := _m.Called(state, nonce, locale, confidenceLevel)

	if len(ret) == 0 {
		panic("no return value specified for AuthCodeURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, onelogin.ConfidenceLevel) (string, error)); ok {
		return rf(state, nonce, locale, confidenceLevel)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, onelogin.ConfidenceLevel) string); ok {
		r0 = rf(state, nonce, locale, confidenceLevel)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, onelogin.ConfidenceLevel) error); ok {
		r1 = rf(state, nonce, locale, confidenceLevel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockLoginOneLoginClient_AuthCodeURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthCodeURL'
type mockLoginOneLoginClient_AuthCodeURL_Call struct {
	*mock.Call
}

// AuthCodeURL is a helper method to define mock.On call
//   - state string
//   - nonce string
//   - locale string
//   - confidenceLevel onelogin.ConfidenceLevel
func (_e *mockLoginOneLoginClient_Expecter) AuthCodeURL(state interface{}, nonce interface{}, locale interface{}, confidenceLevel interface{}) *mockLoginOneLoginClient_AuthCodeURL_Call {
	return &mockLoginOneLoginClient_AuthCodeURL_Call{Call: _e.mock.On("AuthCodeURL", state, nonce, locale, confidenceLevel)}
}

func (_c *mockLoginOneLoginClient_AuthCodeURL_Call) Run(run func(state string, nonce string, locale string, confidenceLevel onelogin.ConfidenceLevel)) *mockLoginOneLoginClient_AuthCodeURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(onelogin.ConfidenceLevel))
	})
	return _c
}

func (_c *mockLoginOneLoginClient_AuthCodeURL_Call) Return(_a0 string, _a1 error) *mockLoginOneLoginClient_AuthCodeURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockLoginOneLoginClient_AuthCodeURL_Call) RunAndReturn(run func(string, string, string, onelogin.ConfidenceLevel) (string, error)) *mockLoginOneLoginClient_AuthCodeURL_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLoginOneLoginClient creates a new instance of mockLoginOneLoginClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLoginOneLoginClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLoginOneLoginClient {
	mock := &mockLoginOneLoginClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
