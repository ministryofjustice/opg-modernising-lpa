// Code generated by mockery v2.42.0. DO NOT EDIT.

package page

import (
	http "net/http"

	sesh "github.com/ministryofjustice/opg-modernising-lpa/internal/sesh"
	mock "github.com/stretchr/testify/mock"
)

// mockLoginSessionStore is an autogenerated mock type for the LoginSessionStore type
type mockLoginSessionStore struct {
	mock.Mock
}

type mockLoginSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLoginSessionStore) EXPECT() *mockLoginSessionStore_Expecter {
	return &mockLoginSessionStore_Expecter{mock: &_m.Mock}
}

// SetOneLogin provides a mock function with given fields: r, w, session
func (_m *mockLoginSessionStore) SetOneLogin(r *http.Request, w http.ResponseWriter, session *sesh.OneLoginSession) error {
	ret := _m.Called(r, w, session)

	if len(ret) == 0 {
		panic("no return value specified for SetOneLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, http.ResponseWriter, *sesh.OneLoginSession) error); ok {
		r0 = rf(r, w, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockLoginSessionStore_SetOneLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOneLogin'
type mockLoginSessionStore_SetOneLogin_Call struct {
	*mock.Call
}

// SetOneLogin is a helper method to define mock.On call
//   - r *http.Request
//   - w http.ResponseWriter
//   - session *sesh.OneLoginSession
func (_e *mockLoginSessionStore_Expecter) SetOneLogin(r interface{}, w interface{}, session interface{}) *mockLoginSessionStore_SetOneLogin_Call {
	return &mockLoginSessionStore_SetOneLogin_Call{Call: _e.mock.On("SetOneLogin", r, w, session)}
}

func (_c *mockLoginSessionStore_SetOneLogin_Call) Run(run func(r *http.Request, w http.ResponseWriter, session *sesh.OneLoginSession)) *mockLoginSessionStore_SetOneLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(http.ResponseWriter), args[2].(*sesh.OneLoginSession))
	})
	return _c
}

func (_c *mockLoginSessionStore_SetOneLogin_Call) Return(_a0 error) *mockLoginSessionStore_SetOneLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLoginSessionStore_SetOneLogin_Call) RunAndReturn(run func(*http.Request, http.ResponseWriter, *sesh.OneLoginSession) error) *mockLoginSessionStore_SetOneLogin_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLoginSessionStore creates a new instance of mockLoginSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLoginSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLoginSessionStore {
	mock := &mockLoginSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
