// Code generated by mockery. DO NOT EDIT.

package page

import (
	http "net/http"

	sesh "github.com/ministryofjustice/opg-modernising-lpa/internal/sesh"
	mock "github.com/stretchr/testify/mock"
)

// mockUpdateLoginSessionStore is an autogenerated mock type for the UpdateLoginSessionStore type
type mockUpdateLoginSessionStore struct {
	mock.Mock
}

type mockUpdateLoginSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockUpdateLoginSessionStore) EXPECT() *mockUpdateLoginSessionStore_Expecter {
	return &mockUpdateLoginSessionStore_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: r
func (_m *mockUpdateLoginSessionStore) Login(r *http.Request) (*sesh.LoginSession, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *sesh.LoginSession
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (*sesh.LoginSession, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) *sesh.LoginSession); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesh.LoginSession)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockUpdateLoginSessionStore_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type mockUpdateLoginSessionStore_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - r *http.Request
func (_e *mockUpdateLoginSessionStore_Expecter) Login(r interface{}) *mockUpdateLoginSessionStore_Login_Call {
	return &mockUpdateLoginSessionStore_Login_Call{Call: _e.mock.On("Login", r)}
}

func (_c *mockUpdateLoginSessionStore_Login_Call) Run(run func(r *http.Request)) *mockUpdateLoginSessionStore_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *mockUpdateLoginSessionStore_Login_Call) Return(_a0 *sesh.LoginSession, _a1 error) *mockUpdateLoginSessionStore_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockUpdateLoginSessionStore_Login_Call) RunAndReturn(run func(*http.Request) (*sesh.LoginSession, error)) *mockUpdateLoginSessionStore_Login_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogin provides a mock function with given fields: r, w, session
func (_m *mockUpdateLoginSessionStore) SetLogin(r *http.Request, w http.ResponseWriter, session *sesh.LoginSession) error {
	ret := _m.Called(r, w, session)

	if len(ret) == 0 {
		panic("no return value specified for SetLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request, http.ResponseWriter, *sesh.LoginSession) error); ok {
		r0 = rf(r, w, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockUpdateLoginSessionStore_SetLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogin'
type mockUpdateLoginSessionStore_SetLogin_Call struct {
	*mock.Call
}

// SetLogin is a helper method to define mock.On call
//   - r *http.Request
//   - w http.ResponseWriter
//   - session *sesh.LoginSession
func (_e *mockUpdateLoginSessionStore_Expecter) SetLogin(r interface{}, w interface{}, session interface{}) *mockUpdateLoginSessionStore_SetLogin_Call {
	return &mockUpdateLoginSessionStore_SetLogin_Call{Call: _e.mock.On("SetLogin", r, w, session)}
}

func (_c *mockUpdateLoginSessionStore_SetLogin_Call) Run(run func(r *http.Request, w http.ResponseWriter, session *sesh.LoginSession)) *mockUpdateLoginSessionStore_SetLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(http.ResponseWriter), args[2].(*sesh.LoginSession))
	})
	return _c
}

func (_c *mockUpdateLoginSessionStore_SetLogin_Call) Return(_a0 error) *mockUpdateLoginSessionStore_SetLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockUpdateLoginSessionStore_SetLogin_Call) RunAndReturn(run func(*http.Request, http.ResponseWriter, *sesh.LoginSession) error) *mockUpdateLoginSessionStore_SetLogin_Call {
	_c.Call.Return(run)
	return _c
}

// newMockUpdateLoginSessionStore creates a new instance of mockUpdateLoginSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockUpdateLoginSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockUpdateLoginSessionStore {
	mock := &mockUpdateLoginSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
