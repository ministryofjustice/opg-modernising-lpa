// Code generated by mockery v2.41.0. DO NOT EDIT.

package page

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// mockLogger is an autogenerated mock type for the Logger type
type mockLogger struct {
	mock.Mock
}

type mockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogger) EXPECT() *mockLogger_Expecter {
	return &mockLogger_Expecter{mock: &_m.Mock}
}

// Print provides a mock function with given fields: v
func (_m *mockLogger) Print(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// mockLogger_Print_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Print'
type mockLogger_Print_Call struct {
	*mock.Call
}

// Print is a helper method to define mock.On call
//   - v ...interface{}
func (_e *mockLogger_Expecter) Print(v ...interface{}) *mockLogger_Print_Call {
	return &mockLogger_Print_Call{Call: _e.mock.On("Print",
		append([]interface{}{}, v...)...)}
}

func (_c *mockLogger_Print_Call) Run(run func(v ...interface{})) *mockLogger_Print_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *mockLogger_Print_Call) Return() *mockLogger_Print_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockLogger_Print_Call) RunAndReturn(run func(...interface{})) *mockLogger_Print_Call {
	_c.Call.Return(run)
	return _c
}

// Request provides a mock function with given fields: _a0, _a1
func (_m *mockLogger) Request(_a0 *http.Request, _a1 error) {
	_m.Called(_a0, _a1)
}

// mockLogger_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type mockLogger_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - _a0 *http.Request
//   - _a1 error
func (_e *mockLogger_Expecter) Request(_a0 interface{}, _a1 interface{}) *mockLogger_Request_Call {
	return &mockLogger_Request_Call{Call: _e.mock.On("Request", _a0, _a1)}
}

func (_c *mockLogger_Request_Call) Run(run func(_a0 *http.Request, _a1 error)) *mockLogger_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(error))
	})
	return _c
}

func (_c *mockLogger_Request_Call) Return() *mockLogger_Request_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockLogger_Request_Call) RunAndReturn(run func(*http.Request, error)) *mockLogger_Request_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLogger creates a new instance of mockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLogger {
	mock := &mockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
