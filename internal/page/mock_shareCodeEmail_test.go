// Code generated by mockery v2.41.0. DO NOT EDIT.

package page

import (
	notify "github.com/ministryofjustice/opg-modernising-lpa/internal/notify"
	mock "github.com/stretchr/testify/mock"
)

// mockShareCodeEmail is an autogenerated mock type for the shareCodeEmail type
type mockShareCodeEmail struct {
	mock.Mock
}

type mockShareCodeEmail_Expecter struct {
	mock *mock.Mock
}

func (_m *mockShareCodeEmail) EXPECT() *mockShareCodeEmail_Expecter {
	return &mockShareCodeEmail_Expecter{mock: &_m.Mock}
}

// WithShareCode provides a mock function with given fields: _a0
func (_m *mockShareCodeEmail) WithShareCode(_a0 string) notify.Email {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithShareCode")
	}

	var r0 notify.Email
	if rf, ok := ret.Get(0).(func(string) notify.Email); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(notify.Email)
		}
	}

	return r0
}

// mockShareCodeEmail_WithShareCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithShareCode'
type mockShareCodeEmail_WithShareCode_Call struct {
	*mock.Call
}

// WithShareCode is a helper method to define mock.On call
//   - _a0 string
func (_e *mockShareCodeEmail_Expecter) WithShareCode(_a0 interface{}) *mockShareCodeEmail_WithShareCode_Call {
	return &mockShareCodeEmail_WithShareCode_Call{Call: _e.mock.On("WithShareCode", _a0)}
}

func (_c *mockShareCodeEmail_WithShareCode_Call) Run(run func(_a0 string)) *mockShareCodeEmail_WithShareCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockShareCodeEmail_WithShareCode_Call) Return(_a0 notify.Email) *mockShareCodeEmail_WithShareCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockShareCodeEmail_WithShareCode_Call) RunAndReturn(run func(string) notify.Email) *mockShareCodeEmail_WithShareCode_Call {
	_c.Call.Return(run)
	return _c
}

// newMockShareCodeEmail creates a new instance of mockShareCodeEmail. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockShareCodeEmail(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockShareCodeEmail {
	mock := &mockShareCodeEmail{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
