// Code generated by mockery v2.42.2. DO NOT EDIT.

package page

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// mockErrorHandler is an autogenerated mock type for the ErrorHandler type
type mockErrorHandler struct {
	mock.Mock
}

type mockErrorHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *mockErrorHandler) EXPECT() *mockErrorHandler_Expecter {
	return &mockErrorHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockErrorHandler) Execute(_a0 http.ResponseWriter, _a1 *http.Request, _a2 error) {
	_m.Called(_a0, _a1, _a2)
}

// mockErrorHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockErrorHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
//   - _a2 error
func (_e *mockErrorHandler_Expecter) Execute(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockErrorHandler_Execute_Call {
	return &mockErrorHandler_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1, _a2)}
}

func (_c *mockErrorHandler_Execute_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request, _a2 error)) *mockErrorHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(error))
	})
	return _c
}

func (_c *mockErrorHandler_Execute_Call) Return() *mockErrorHandler_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockErrorHandler_Execute_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, error)) *mockErrorHandler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockErrorHandler creates a new instance of mockErrorHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockErrorHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockErrorHandler {
	mock := &mockErrorHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
