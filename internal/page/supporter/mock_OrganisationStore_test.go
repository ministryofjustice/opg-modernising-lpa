// Code generated by mockery v2.40.1. DO NOT EDIT.

package supporter

import (
	context "context"

	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"

	mock "github.com/stretchr/testify/mock"
)

// mockOrganisationStore is an autogenerated mock type for the OrganisationStore type
type mockOrganisationStore struct {
	mock.Mock
}

type mockOrganisationStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockOrganisationStore) EXPECT() *mockOrganisationStore_Expecter {
	return &mockOrganisationStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *mockOrganisationStore) Create(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockOrganisationStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockOrganisationStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *mockOrganisationStore_Expecter) Create(_a0 interface{}, _a1 interface{}) *mockOrganisationStore_Create_Call {
	return &mockOrganisationStore_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *mockOrganisationStore_Create_Call) Run(run func(_a0 context.Context, _a1 string)) *mockOrganisationStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockOrganisationStore_Create_Call) Return(_a0 error) *mockOrganisationStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockOrganisationStore_Create_Call) RunAndReturn(run func(context.Context, string) error) *mockOrganisationStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMemberInvite provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *mockOrganisationStore) CreateMemberInvite(_a0 context.Context, _a1 *actor.Organisation, _a2 string, _a3 string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for CreateMemberInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *actor.Organisation, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockOrganisationStore_CreateMemberInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMemberInvite'
type mockOrganisationStore_CreateMemberInvite_Call struct {
	*mock.Call
}

// CreateMemberInvite is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *actor.Organisation
//   - _a2 string
//   - _a3 string
func (_e *mockOrganisationStore_Expecter) CreateMemberInvite(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *mockOrganisationStore_CreateMemberInvite_Call {
	return &mockOrganisationStore_CreateMemberInvite_Call{Call: _e.mock.On("CreateMemberInvite", _a0, _a1, _a2, _a3)}
}

func (_c *mockOrganisationStore_CreateMemberInvite_Call) Run(run func(_a0 context.Context, _a1 *actor.Organisation, _a2 string, _a3 string)) *mockOrganisationStore_CreateMemberInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*actor.Organisation), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockOrganisationStore_CreateMemberInvite_Call) Return(_a0 error) *mockOrganisationStore_CreateMemberInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockOrganisationStore_CreateMemberInvite_Call) RunAndReturn(run func(context.Context, *actor.Organisation, string, string) error) *mockOrganisationStore_CreateMemberInvite_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0
func (_m *mockOrganisationStore) Get(_a0 context.Context) (*actor.Organisation, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *actor.Organisation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*actor.Organisation, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *actor.Organisation); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*actor.Organisation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockOrganisationStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockOrganisationStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockOrganisationStore_Expecter) Get(_a0 interface{}) *mockOrganisationStore_Get_Call {
	return &mockOrganisationStore_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *mockOrganisationStore_Get_Call) Run(run func(_a0 context.Context)) *mockOrganisationStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockOrganisationStore_Get_Call) Return(_a0 *actor.Organisation, _a1 error) *mockOrganisationStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockOrganisationStore_Get_Call) RunAndReturn(run func(context.Context) (*actor.Organisation, error)) *mockOrganisationStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: _a0, _a1
func (_m *mockOrganisationStore) Put(_a0 context.Context, _a1 *actor.Organisation) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *actor.Organisation) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockOrganisationStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockOrganisationStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *actor.Organisation
func (_e *mockOrganisationStore_Expecter) Put(_a0 interface{}, _a1 interface{}) *mockOrganisationStore_Put_Call {
	return &mockOrganisationStore_Put_Call{Call: _e.mock.On("Put", _a0, _a1)}
}

func (_c *mockOrganisationStore_Put_Call) Run(run func(_a0 context.Context, _a1 *actor.Organisation)) *mockOrganisationStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*actor.Organisation))
	})
	return _c
}

func (_c *mockOrganisationStore_Put_Call) Return(_a0 error) *mockOrganisationStore_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockOrganisationStore_Put_Call) RunAndReturn(run func(context.Context, *actor.Organisation) error) *mockOrganisationStore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// newMockOrganisationStore creates a new instance of mockOrganisationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockOrganisationStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockOrganisationStore {
	mock := &mockOrganisationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
