// Code generated by mockery v2.41.0. DO NOT EDIT.

package supporter

import (
	context "context"

	onelogin "github.com/ministryofjustice/opg-modernising-lpa/internal/onelogin"
	mock "github.com/stretchr/testify/mock"
)

// mockLoginCallbackOneLoginClient is an autogenerated mock type for the LoginCallbackOneLoginClient type
type mockLoginCallbackOneLoginClient struct {
	mock.Mock
}

type mockLoginCallbackOneLoginClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLoginCallbackOneLoginClient) EXPECT() *mockLoginCallbackOneLoginClient_Expecter {
	return &mockLoginCallbackOneLoginClient_Expecter{mock: &_m.Mock}
}

// Exchange provides a mock function with given fields: ctx, code, nonce
func (_m *mockLoginCallbackOneLoginClient) Exchange(ctx context.Context, code string, nonce string) (string, string, error) {
	ret := _m.Called(ctx, code, nonce)

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, string, error)); ok {
		return rf(ctx, code, nonce)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, code, nonce)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, code, nonce)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, code, nonce)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockLoginCallbackOneLoginClient_Exchange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exchange'
type mockLoginCallbackOneLoginClient_Exchange_Call struct {
	*mock.Call
}

// Exchange is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - nonce string
func (_e *mockLoginCallbackOneLoginClient_Expecter) Exchange(ctx interface{}, code interface{}, nonce interface{}) *mockLoginCallbackOneLoginClient_Exchange_Call {
	return &mockLoginCallbackOneLoginClient_Exchange_Call{Call: _e.mock.On("Exchange", ctx, code, nonce)}
}

func (_c *mockLoginCallbackOneLoginClient_Exchange_Call) Run(run func(ctx context.Context, code string, nonce string)) *mockLoginCallbackOneLoginClient_Exchange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockLoginCallbackOneLoginClient_Exchange_Call) Return(idToken string, accessToken string, err error) *mockLoginCallbackOneLoginClient_Exchange_Call {
	_c.Call.Return(idToken, accessToken, err)
	return _c
}

func (_c *mockLoginCallbackOneLoginClient_Exchange_Call) RunAndReturn(run func(context.Context, string, string) (string, string, error)) *mockLoginCallbackOneLoginClient_Exchange_Call {
	_c.Call.Return(run)
	return _c
}

// UserInfo provides a mock function with given fields: ctx, accessToken
func (_m *mockLoginCallbackOneLoginClient) UserInfo(ctx context.Context, accessToken string) (onelogin.UserInfo, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for UserInfo")
	}

	var r0 onelogin.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (onelogin.UserInfo, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) onelogin.UserInfo); ok {
		r0 = rf(ctx, accessToken)
	} else {
		r0 = ret.Get(0).(onelogin.UserInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockLoginCallbackOneLoginClient_UserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserInfo'
type mockLoginCallbackOneLoginClient_UserInfo_Call struct {
	*mock.Call
}

// UserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *mockLoginCallbackOneLoginClient_Expecter) UserInfo(ctx interface{}, accessToken interface{}) *mockLoginCallbackOneLoginClient_UserInfo_Call {
	return &mockLoginCallbackOneLoginClient_UserInfo_Call{Call: _e.mock.On("UserInfo", ctx, accessToken)}
}

func (_c *mockLoginCallbackOneLoginClient_UserInfo_Call) Run(run func(ctx context.Context, accessToken string)) *mockLoginCallbackOneLoginClient_UserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockLoginCallbackOneLoginClient_UserInfo_Call) Return(_a0 onelogin.UserInfo, _a1 error) *mockLoginCallbackOneLoginClient_UserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockLoginCallbackOneLoginClient_UserInfo_Call) RunAndReturn(run func(context.Context, string) (onelogin.UserInfo, error)) *mockLoginCallbackOneLoginClient_UserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLoginCallbackOneLoginClient creates a new instance of mockLoginCallbackOneLoginClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLoginCallbackOneLoginClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLoginCallbackOneLoginClient {
	mock := &mockLoginCallbackOneLoginClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
