// Code generated by mockery v2.42.2. DO NOT EDIT.

package supporter

import (
	context "context"

	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"

	mock "github.com/stretchr/testify/mock"
)

// mockAttorneyStore is an autogenerated mock type for the AttorneyStore type
type mockAttorneyStore struct {
	mock.Mock
}

type mockAttorneyStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAttorneyStore) EXPECT() *mockAttorneyStore_Expecter {
	return &mockAttorneyStore_Expecter{mock: &_m.Mock}
}

// GetAny provides a mock function with given fields: ctx
func (_m *mockAttorneyStore) GetAny(ctx context.Context) ([]*actor.AttorneyProvidedDetails, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAny")
	}

	var r0 []*actor.AttorneyProvidedDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*actor.AttorneyProvidedDetails, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*actor.AttorneyProvidedDetails); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*actor.AttorneyProvidedDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAttorneyStore_GetAny_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAny'
type mockAttorneyStore_GetAny_Call struct {
	*mock.Call
}

// GetAny is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockAttorneyStore_Expecter) GetAny(ctx interface{}) *mockAttorneyStore_GetAny_Call {
	return &mockAttorneyStore_GetAny_Call{Call: _e.mock.On("GetAny", ctx)}
}

func (_c *mockAttorneyStore_GetAny_Call) Run(run func(ctx context.Context)) *mockAttorneyStore_GetAny_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockAttorneyStore_GetAny_Call) Return(_a0 []*actor.AttorneyProvidedDetails, _a1 error) *mockAttorneyStore_GetAny_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAttorneyStore_GetAny_Call) RunAndReturn(run func(context.Context) ([]*actor.AttorneyProvidedDetails, error)) *mockAttorneyStore_GetAny_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAttorneyStore creates a new instance of mockAttorneyStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAttorneyStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAttorneyStore {
	mock := &mockAttorneyStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
