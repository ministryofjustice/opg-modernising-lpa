// Code generated by mockery v2.45.0. DO NOT EDIT.

package cron

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockCronStore is an autogenerated mock type for the CronStore type
type mockCronStore struct {
	mock.Mock
}

type mockCronStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCronStore) EXPECT() *mockCronStore_Expecter {
	return &mockCronStore_Expecter{mock: &_m.Mock}
}

// Pop provides a mock function with given fields: ctx, at
func (_m *mockCronStore) Pop(ctx context.Context, at time.Time) (Row, error) {
	ret := _m.Called(ctx, at)

	if len(ret) == 0 {
		panic("no return value specified for Pop")
	}

	var r0 Row
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (Row, error)); ok {
		return rf(ctx, at)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) Row); ok {
		r0 = rf(ctx, at)
	} else {
		r0 = ret.Get(0).(Row)
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, at)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockCronStore_Pop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pop'
type mockCronStore_Pop_Call struct {
	*mock.Call
}

// Pop is a helper method to define mock.On call
//   - ctx context.Context
//   - at time.Time
func (_e *mockCronStore_Expecter) Pop(ctx interface{}, at interface{}) *mockCronStore_Pop_Call {
	return &mockCronStore_Pop_Call{Call: _e.mock.On("Pop", ctx, at)}
}

func (_c *mockCronStore_Pop_Call) Run(run func(ctx context.Context, at time.Time)) *mockCronStore_Pop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *mockCronStore_Pop_Call) Return(_a0 Row, _a1 error) *mockCronStore_Pop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockCronStore_Pop_Call) RunAndReturn(run func(context.Context, time.Time) (Row, error)) *mockCronStore_Pop_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCronStore creates a new instance of mockCronStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCronStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCronStore {
	mock := &mockCronStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
