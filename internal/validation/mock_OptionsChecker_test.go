// Code generated by mockery v2.40.1. DO NOT EDIT.

package validation

import mock "github.com/stretchr/testify/mock"

// mockOptionsChecker is an autogenerated mock type for the OptionsChecker type
type mockOptionsChecker struct {
	mock.Mock
}

type mockOptionsChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockOptionsChecker) EXPECT() *mockOptionsChecker_Expecter {
	return &mockOptionsChecker_Expecter{mock: &_m.Mock}
}

// CheckOptions provides a mock function with given fields: _a0, _a1
func (_m *mockOptionsChecker) CheckOptions(_a0 string, _a1 []string) FormattableError {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckOptions")
	}

	var r0 FormattableError
	if rf, ok := ret.Get(0).(func(string, []string) FormattableError); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(FormattableError)
		}
	}

	return r0
}

// mockOptionsChecker_CheckOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckOptions'
type mockOptionsChecker_CheckOptions_Call struct {
	*mock.Call
}

// CheckOptions is a helper method to define mock.On call
//   - _a0 string
//   - _a1 []string
func (_e *mockOptionsChecker_Expecter) CheckOptions(_a0 interface{}, _a1 interface{}) *mockOptionsChecker_CheckOptions_Call {
	return &mockOptionsChecker_CheckOptions_Call{Call: _e.mock.On("CheckOptions", _a0, _a1)}
}

func (_c *mockOptionsChecker_CheckOptions_Call) Run(run func(_a0 string, _a1 []string)) *mockOptionsChecker_CheckOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *mockOptionsChecker_CheckOptions_Call) Return(_a0 FormattableError) *mockOptionsChecker_CheckOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockOptionsChecker_CheckOptions_Call) RunAndReturn(run func(string, []string) FormattableError) *mockOptionsChecker_CheckOptions_Call {
	_c.Call.Return(run)
	return _c
}

// newMockOptionsChecker creates a new instance of mockOptionsChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockOptionsChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockOptionsChecker {
	mock := &mockOptionsChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
