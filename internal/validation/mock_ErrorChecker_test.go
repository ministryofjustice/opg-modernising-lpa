// Code generated by mockery. DO NOT EDIT.

package validation

import mock "github.com/stretchr/testify/mock"

// mockErrorChecker is an autogenerated mock type for the ErrorChecker type
type mockErrorChecker struct {
	mock.Mock
}

type mockErrorChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockErrorChecker) EXPECT() *mockErrorChecker_Expecter {
	return &mockErrorChecker_Expecter{mock: &_m.Mock}
}

// CheckError provides a mock function with given fields: label, value
func (_m *mockErrorChecker) CheckError(label string, value error) FormattableError {
	ret := _m.Called(label, value)

	if len(ret) == 0 {
		panic("no return value specified for CheckError")
	}

	var r0 FormattableError
	if rf, ok := ret.Get(0).(func(string, error) FormattableError); ok {
		r0 = rf(label, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(FormattableError)
		}
	}

	return r0
}

// mockErrorChecker_CheckError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckError'
type mockErrorChecker_CheckError_Call struct {
	*mock.Call
}

// CheckError is a helper method to define mock.On call
//   - label string
//   - value error
func (_e *mockErrorChecker_Expecter) CheckError(label interface{}, value interface{}) *mockErrorChecker_CheckError_Call {
	return &mockErrorChecker_CheckError_Call{Call: _e.mock.On("CheckError", label, value)}
}

func (_c *mockErrorChecker_CheckError_Call) Run(run func(label string, value error)) *mockErrorChecker_CheckError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(error))
	})
	return _c
}

func (_c *mockErrorChecker_CheckError_Call) Return(_a0 FormattableError) *mockErrorChecker_CheckError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockErrorChecker_CheckError_Call) RunAndReturn(run func(string, error) FormattableError) *mockErrorChecker_CheckError_Call {
	_c.Call.Return(run)
	return _c
}

// newMockErrorChecker creates a new instance of mockErrorChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockErrorChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockErrorChecker {
	mock := &mockErrorChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
