// Code generated by mockery v2.39.1. DO NOT EDIT.

package validation

import mock "github.com/stretchr/testify/mock"

// mockBoolChecker is an autogenerated mock type for the BoolChecker type
type mockBoolChecker struct {
	mock.Mock
}

type mockBoolChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBoolChecker) EXPECT() *mockBoolChecker_Expecter {
	return &mockBoolChecker_Expecter{mock: &_m.Mock}
}

// CheckBool provides a mock function with given fields: _a0, _a1
func (_m *mockBoolChecker) CheckBool(_a0 string, _a1 bool) FormattableError {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CheckBool")
	}

	var r0 FormattableError
	if rf, ok := ret.Get(0).(func(string, bool) FormattableError); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(FormattableError)
		}
	}

	return r0
}

// mockBoolChecker_CheckBool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckBool'
type mockBoolChecker_CheckBool_Call struct {
	*mock.Call
}

// CheckBool is a helper method to define mock.On call
//   - _a0 string
//   - _a1 bool
func (_e *mockBoolChecker_Expecter) CheckBool(_a0 interface{}, _a1 interface{}) *mockBoolChecker_CheckBool_Call {
	return &mockBoolChecker_CheckBool_Call{Call: _e.mock.On("CheckBool", _a0, _a1)}
}

func (_c *mockBoolChecker_CheckBool_Call) Run(run func(_a0 string, _a1 bool)) *mockBoolChecker_CheckBool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *mockBoolChecker_CheckBool_Call) Return(_a0 FormattableError) *mockBoolChecker_CheckBool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockBoolChecker_CheckBool_Call) RunAndReturn(run func(string, bool) FormattableError) *mockBoolChecker_CheckBool_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBoolChecker creates a new instance of mockBoolChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBoolChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBoolChecker {
	mock := &mockBoolChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
