// Code generated by mockery v2.42.2. DO NOT EDIT.

package supporterpage

import (
	context "context"

	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"

	mock "github.com/stretchr/testify/mock"
)

// mockOrganisationStore is an autogenerated mock type for the OrganisationStore type
type mockOrganisationStore struct {
	mock.Mock
}

type mockOrganisationStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockOrganisationStore) EXPECT() *mockOrganisationStore_Expecter {
	return &mockOrganisationStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, member, name
func (_m *mockOrganisationStore) Create(ctx context.Context, member *actor.Member, name string) (*actor.Organisation, error) {
	ret := _m.Called(ctx, member, name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *actor.Organisation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *actor.Member, string) (*actor.Organisation, error)); ok {
		return rf(ctx, member, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *actor.Member, string) *actor.Organisation); ok {
		r0 = rf(ctx, member, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*actor.Organisation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *actor.Member, string) error); ok {
		r1 = rf(ctx, member, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockOrganisationStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockOrganisationStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - member *actor.Member
//   - name string
func (_e *mockOrganisationStore_Expecter) Create(ctx interface{}, member interface{}, name interface{}) *mockOrganisationStore_Create_Call {
	return &mockOrganisationStore_Create_Call{Call: _e.mock.On("Create", ctx, member, name)}
}

func (_c *mockOrganisationStore_Create_Call) Run(run func(ctx context.Context, member *actor.Member, name string)) *mockOrganisationStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*actor.Member), args[2].(string))
	})
	return _c
}

func (_c *mockOrganisationStore_Create_Call) Return(_a0 *actor.Organisation, _a1 error) *mockOrganisationStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockOrganisationStore_Create_Call) RunAndReturn(run func(context.Context, *actor.Member, string) (*actor.Organisation, error)) *mockOrganisationStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLPA provides a mock function with given fields: ctx
func (_m *mockOrganisationStore) CreateLPA(ctx context.Context) (*donordata.Provided, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateLPA")
	}

	var r0 *donordata.Provided
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*donordata.Provided, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *donordata.Provided); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*donordata.Provided)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockOrganisationStore_CreateLPA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLPA'
type mockOrganisationStore_CreateLPA_Call struct {
	*mock.Call
}

// CreateLPA is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockOrganisationStore_Expecter) CreateLPA(ctx interface{}) *mockOrganisationStore_CreateLPA_Call {
	return &mockOrganisationStore_CreateLPA_Call{Call: _e.mock.On("CreateLPA", ctx)}
}

func (_c *mockOrganisationStore_CreateLPA_Call) Run(run func(ctx context.Context)) *mockOrganisationStore_CreateLPA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockOrganisationStore_CreateLPA_Call) Return(_a0 *donordata.Provided, _a1 error) *mockOrganisationStore_CreateLPA_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockOrganisationStore_CreateLPA_Call) RunAndReturn(run func(context.Context) (*donordata.Provided, error)) *mockOrganisationStore_CreateLPA_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *mockOrganisationStore) Get(ctx context.Context) (*actor.Organisation, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *actor.Organisation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*actor.Organisation, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *actor.Organisation); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*actor.Organisation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockOrganisationStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockOrganisationStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockOrganisationStore_Expecter) Get(ctx interface{}) *mockOrganisationStore_Get_Call {
	return &mockOrganisationStore_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *mockOrganisationStore_Get_Call) Run(run func(ctx context.Context)) *mockOrganisationStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockOrganisationStore_Get_Call) Return(_a0 *actor.Organisation, _a1 error) *mockOrganisationStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockOrganisationStore_Get_Call) RunAndReturn(run func(context.Context) (*actor.Organisation, error)) *mockOrganisationStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, organisation
func (_m *mockOrganisationStore) Put(ctx context.Context, organisation *actor.Organisation) error {
	ret := _m.Called(ctx, organisation)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *actor.Organisation) error); ok {
		r0 = rf(ctx, organisation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockOrganisationStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockOrganisationStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - organisation *actor.Organisation
func (_e *mockOrganisationStore_Expecter) Put(ctx interface{}, organisation interface{}) *mockOrganisationStore_Put_Call {
	return &mockOrganisationStore_Put_Call{Call: _e.mock.On("Put", ctx, organisation)}
}

func (_c *mockOrganisationStore_Put_Call) Run(run func(ctx context.Context, organisation *actor.Organisation)) *mockOrganisationStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*actor.Organisation))
	})
	return _c
}

func (_c *mockOrganisationStore_Put_Call) Return(_a0 error) *mockOrganisationStore_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockOrganisationStore_Put_Call) RunAndReturn(run func(context.Context, *actor.Organisation) error) *mockOrganisationStore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDelete provides a mock function with given fields: ctx, organisation
func (_m *mockOrganisationStore) SoftDelete(ctx context.Context, organisation *actor.Organisation) error {
	ret := _m.Called(ctx, organisation)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *actor.Organisation) error); ok {
		r0 = rf(ctx, organisation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockOrganisationStore_SoftDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDelete'
type mockOrganisationStore_SoftDelete_Call struct {
	*mock.Call
}

// SoftDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - organisation *actor.Organisation
func (_e *mockOrganisationStore_Expecter) SoftDelete(ctx interface{}, organisation interface{}) *mockOrganisationStore_SoftDelete_Call {
	return &mockOrganisationStore_SoftDelete_Call{Call: _e.mock.On("SoftDelete", ctx, organisation)}
}

func (_c *mockOrganisationStore_SoftDelete_Call) Run(run func(ctx context.Context, organisation *actor.Organisation)) *mockOrganisationStore_SoftDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*actor.Organisation))
	})
	return _c
}

func (_c *mockOrganisationStore_SoftDelete_Call) Return(_a0 error) *mockOrganisationStore_SoftDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockOrganisationStore_SoftDelete_Call) RunAndReturn(run func(context.Context, *actor.Organisation) error) *mockOrganisationStore_SoftDelete_Call {
	_c.Call.Return(run)
	return _c
}

// newMockOrganisationStore creates a new instance of mockOrganisationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockOrganisationStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockOrganisationStore {
	mock := &mockOrganisationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
