// Code generated by mockery v2.42.2. DO NOT EDIT.

package supporterpage

import (
	"github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"
	lpadata "github.com/ministryofjustice/opg-modernising-lpa/internal/lpastore/lpadata"
	mock "github.com/stretchr/testify/mock"

	notification "github.com/ministryofjustice/opg-modernising-lpa/internal/notification"

	pay "github.com/ministryofjustice/opg-modernising-lpa/internal/pay"
)

// mockProgressTracker is an autogenerated mock type for the ProgressTracker type
type mockProgressTracker struct {
	mock.Mock
}

type mockProgressTracker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockProgressTracker) EXPECT() *mockProgressTracker_Expecter {
	return &mockProgressTracker_Expecter{mock: &_m.Mock}
}

// Progress provides a mock function with given fields: lpa, donorTasks, notifications, feeType
func (_m *mockProgressTracker) Progress(lpa *lpadata.Lpa, donorTasks donordata.Tasks, notifications notification.Notifications, feeType pay.FeeType) donordata.Progress {
	ret := _m.Called(lpa, donorTasks, notifications, feeType)

	if len(ret) == 0 {
		panic("no return value specified for Progress")
	}

	var r0 donordata.Progress
	if rf, ok := ret.Get(0).(func(*lpadata.Lpa, donordata.Tasks, notification.Notifications, pay.FeeType) donordata.Progress); ok {
		r0 = rf(lpa, donorTasks, notifications, feeType)
	} else {
		r0 = ret.Get(0).(donordata.Progress)
	}

	return r0
}

// mockProgressTracker_Progress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Progress'
type mockProgressTracker_Progress_Call struct {
	*mock.Call
}

// Progress is a helper method to define mock.On call
//   - lpa *lpadata.Lpa
//   - donorTasks task.Tasks
//   - notifications notification.Notifications
//   - feeType pay.FeeType
func (_e *mockProgressTracker_Expecter) Progress(lpa interface{}, donorTasks interface{}, notifications interface{}, feeType interface{}) *mockProgressTracker_Progress_Call {
	return &mockProgressTracker_Progress_Call{Call: _e.mock.On("Progress", lpa, donorTasks, notifications, feeType)}
}

func (_c *mockProgressTracker_Progress_Call) Run(run func(lpa *lpadata.Lpa, donorTasks donordata.Tasks, notifications notification.Notifications, feeType pay.FeeType)) *mockProgressTracker_Progress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lpadata.Lpa), args[1].(donordata.Tasks), args[2].(notification.Notifications), args[3].(pay.FeeType))
	})
	return _c
}

func (_c *mockProgressTracker_Progress_Call) Return(_a0 donordata.Progress) *mockProgressTracker_Progress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockProgressTracker_Progress_Call) RunAndReturn(run func(*lpadata.Lpa, donordata.Tasks, notification.Notifications, pay.FeeType) donordata.Progress) *mockProgressTracker_Progress_Call {
	_c.Call.Return(run)
	return _c
}

// newMockProgressTracker creates a new instance of mockProgressTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockProgressTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockProgressTracker {
	mock := &mockProgressTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
