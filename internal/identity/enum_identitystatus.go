// Code generated by "enumerator -type IdentityStatus --linecomment --trimprefix"; DO NOT EDIT.
package identity

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IdentityStatusUnknown-0]
	_ = x[IdentityStatusConfirmed-1]
	_ = x[IdentityStatusFailed-2]
	_ = x[IdentityStatusInsufficientEvidence-3]
}

const _IdentityStatus_name = "unknownconfirmedfailedinsufficient-evidence"

var _IdentityStatus_index = [...]uint8{0, 7, 16, 22, 43}

func (i IdentityStatus) String() string {
	if i >= IdentityStatus(len(_IdentityStatus_index)-1) {
		return "IdentityStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _IdentityStatus_name[_IdentityStatus_index[i]:_IdentityStatus_index[i+1]]
}

func (i IdentityStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *IdentityStatus) UnmarshalText(text []byte) error {
	val, err := ParseIdentityStatus(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i IdentityStatus) IsUnknown() bool {
	return i == IdentityStatusUnknown
}

func (i IdentityStatus) IsConfirmed() bool {
	return i == IdentityStatusConfirmed
}

func (i IdentityStatus) IsFailed() bool {
	return i == IdentityStatusFailed
}

func (i IdentityStatus) IsInsufficientEvidence() bool {
	return i == IdentityStatusInsufficientEvidence
}

func ParseIdentityStatus(s string) (IdentityStatus, error) {
	switch s {
	case "unknown":
		return IdentityStatusUnknown, nil
	case "confirmed":
		return IdentityStatusConfirmed, nil
	case "failed":
		return IdentityStatusFailed, nil
	case "insufficient-evidence":
		return IdentityStatusInsufficientEvidence, nil
	default:
		return IdentityStatus(0), fmt.Errorf("invalid IdentityStatus '%s'", s)
	}
}

type IdentityStatusOptions struct {
	Unknown              IdentityStatus
	Confirmed            IdentityStatus
	Failed               IdentityStatus
	InsufficientEvidence IdentityStatus
}

var IdentityStatusValues = IdentityStatusOptions{
	Unknown:              IdentityStatusUnknown,
	Confirmed:            IdentityStatusConfirmed,
	Failed:               IdentityStatusFailed,
	InsufficientEvidence: IdentityStatusInsufficientEvidence,
}
