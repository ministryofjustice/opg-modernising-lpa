// Code generated by "enumerator -type Status --linecomment --trimprefix"; DO NOT EDIT.
package identity

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StatusUnknown-0]
	_ = x[StatusConfirmed-1]
	_ = x[StatusFailed-2]
	_ = x[StatusInsufficientEvidence-3]
}

const _Status_name = "unknownconfirmedfailedinsufficient-evidence"

var _Status_index = [...]uint8{0, 7, 16, 22, 43}

func (i Status) String() string {
	if i >= Status(len(_Status_index)-1) {
		return "Status(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Status_name[_Status_index[i]:_Status_index[i+1]]
}

func (i Status) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *Status) UnmarshalText(text []byte) error {
	val, err := ParseStatus(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i Status) IsUnknown() bool {
	return i == StatusUnknown
}

func (i Status) IsConfirmed() bool {
	return i == StatusConfirmed
}

func (i Status) IsFailed() bool {
	return i == StatusFailed
}

func (i Status) IsInsufficientEvidence() bool {
	return i == StatusInsufficientEvidence
}

func ParseStatus(s string) (Status, error) {
	switch s {
	case "unknown":
		return StatusUnknown, nil
	case "confirmed":
		return StatusConfirmed, nil
	case "failed":
		return StatusFailed, nil
	case "insufficient-evidence":
		return StatusInsufficientEvidence, nil
	default:
		return Status(0), fmt.Errorf("invalid Status '%s'", s)
	}
}

type StatusOptions struct {
	Unknown              Status
	Confirmed            Status
	Failed               Status
	InsufficientEvidence Status
}

var StatusValues = StatusOptions{
	Unknown:              StatusUnknown,
	Confirmed:            StatusConfirmed,
	Failed:               StatusFailed,
	InsufficientEvidence: StatusInsufficientEvidence,
}
