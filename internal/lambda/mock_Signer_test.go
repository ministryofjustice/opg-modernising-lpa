// Code generated by mockery v2.39.1. DO NOT EDIT.

package lambda

import (
	context "context"

	aws "github.com/aws/aws-sdk-go-v2/aws"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	time "time"

	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
)

// mockSigner is an autogenerated mock type for the Signer type
type mockSigner struct {
	mock.Mock
}

// SignHTTP provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7
func (_m *mockSigner) SignHTTP(_a0 context.Context, _a1 aws.Credentials, _a2 *http.Request, _a3 string, _a4 string, _a5 string, _a6 time.Time, _a7 ...func(*v4.SignerOptions)) error {
	_va := make([]interface{}, len(_a7))
	for _i := range _a7 {
		_va[_i] = _a7[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2, _a3, _a4, _a5, _a6)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SignHTTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, aws.Credentials, *http.Request, string, string, string, time.Time, ...func(*v4.SignerOptions)) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockSigner creates a new instance of mockSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSigner {
	mock := &mockSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
