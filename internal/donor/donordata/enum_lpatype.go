// Code generated by "enumerator -type LpaType -linecomment -trimprefix -empty"; DO NOT EDIT.
package donordata

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LpaTypePersonalWelfare-1]
	_ = x[LpaTypePropertyAndAffairs-2]
}

const _LpaType_name = "personal-welfareproperty-and-affairs"

var _LpaType_index = [...]uint8{0, 16, 36}

func (i LpaType) String() string {
	i -= 1
	if i >= LpaType(len(_LpaType_index)-1) {
		return "LpaType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _LpaType_name[_LpaType_index[i]:_LpaType_index[i+1]]
}

func (i LpaType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *LpaType) UnmarshalText(text []byte) error {
	val, err := ParseLpaType(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i LpaType) IsPersonalWelfare() bool {
	return i == LpaTypePersonalWelfare
}

func (i LpaType) IsPropertyAndAffairs() bool {
	return i == LpaTypePropertyAndAffairs
}

func ParseLpaType(s string) (LpaType, error) {
	switch s {
	case "personal-welfare":
		return LpaTypePersonalWelfare, nil
	case "property-and-affairs":
		return LpaTypePropertyAndAffairs, nil
	default:
		return LpaType(0), fmt.Errorf("invalid LpaType '%s'", s)
	}
}

type LpaTypeOptions struct {
	PersonalWelfare    LpaType
	PropertyAndAffairs LpaType
}

var LpaTypeValues = LpaTypeOptions{
	PersonalWelfare:    LpaTypePersonalWelfare,
	PropertyAndAffairs: LpaTypePropertyAndAffairs,
}

func (i LpaType) Empty() bool {
	return i == LpaType(0)
}
