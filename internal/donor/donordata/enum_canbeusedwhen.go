// Code generated by "enumerator -type CanBeUsedWhen -linecomment -trimprefix"; DO NOT EDIT.
package donordata

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CanBeUsedWhenUnknown-0]
	_ = x[CanBeUsedWhenCapacityLost-1]
	_ = x[CanBeUsedWhenHasCapacity-2]
}

const _CanBeUsedWhen_name = "Unknownwhen-capacity-lostwhen-has-capacity"

var _CanBeUsedWhen_index = [...]uint8{0, 7, 25, 42}

func (i CanBeUsedWhen) String() string {
	if i >= CanBeUsedWhen(len(_CanBeUsedWhen_index)-1) {
		return "CanBeUsedWhen(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CanBeUsedWhen_name[_CanBeUsedWhen_index[i]:_CanBeUsedWhen_index[i+1]]
}

func (i CanBeUsedWhen) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *CanBeUsedWhen) UnmarshalText(text []byte) error {
	val, err := ParseCanBeUsedWhen(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i CanBeUsedWhen) IsUnknown() bool {
	return i == CanBeUsedWhenUnknown
}

func (i CanBeUsedWhen) IsCapacityLost() bool {
	return i == CanBeUsedWhenCapacityLost
}

func (i CanBeUsedWhen) IsHasCapacity() bool {
	return i == CanBeUsedWhenHasCapacity
}

func ParseCanBeUsedWhen(s string) (CanBeUsedWhen, error) {
	switch s {
	case "Unknown":
		return CanBeUsedWhenUnknown, nil
	case "when-capacity-lost":
		return CanBeUsedWhenCapacityLost, nil
	case "when-has-capacity":
		return CanBeUsedWhenHasCapacity, nil
	default:
		return CanBeUsedWhen(0), fmt.Errorf("invalid CanBeUsedWhen '%s'", s)
	}
}

type CanBeUsedWhenOptions struct {
	Unknown      CanBeUsedWhen
	CapacityLost CanBeUsedWhen
	HasCapacity  CanBeUsedWhen
}

var CanBeUsedWhenValues = CanBeUsedWhenOptions{
	Unknown:      CanBeUsedWhenUnknown,
	CapacityLost: CanBeUsedWhenCapacityLost,
	HasCapacity:  CanBeUsedWhenHasCapacity,
}
