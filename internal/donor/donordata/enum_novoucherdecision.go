// Code generated by "enumerator -type NoVoucherDecision -linecomment -empty"; DO NOT EDIT.

package donordata

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ProveOwnIdentity-1]
	_ = x[SelectNewVoucher-2]
	_ = x[WithdrawLPA-3]
	_ = x[ApplyToCOP-4]
}

const _NoVoucherDecision_name = "prove-own-identityselect-new-voucherwithdraw-lpaapply-to-cop"

var _NoVoucherDecision_index = [...]uint8{0, 18, 36, 48, 60}

func (i NoVoucherDecision) String() string {
	if i == 0 {
		return ""
	}
	i -= 1
	if i >= NoVoucherDecision(len(_NoVoucherDecision_index)-1) {
		return "NoVoucherDecision(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _NoVoucherDecision_name[_NoVoucherDecision_index[i]:_NoVoucherDecision_index[i+1]]
}

func (i NoVoucherDecision) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *NoVoucherDecision) UnmarshalText(text []byte) error {
	val, err := ParseNoVoucherDecision(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i NoVoucherDecision) IsProveOwnIdentity() bool {
	return i == ProveOwnIdentity
}

func (i NoVoucherDecision) IsSelectNewVoucher() bool {
	return i == SelectNewVoucher
}

func (i NoVoucherDecision) IsWithdrawLPA() bool {
	return i == WithdrawLPA
}

func (i NoVoucherDecision) IsApplyToCOP() bool {
	return i == ApplyToCOP
}

func ParseNoVoucherDecision(s string) (NoVoucherDecision, error) {
	switch s {
	case "":
		return NoVoucherDecision(0), nil
	case "prove-own-identity":
		return ProveOwnIdentity, nil
	case "select-new-voucher":
		return SelectNewVoucher, nil
	case "withdraw-lpa":
		return WithdrawLPA, nil
	case "apply-to-cop":
		return ApplyToCOP, nil
	default:
		return NoVoucherDecision(0), fmt.Errorf("invalid NoVoucherDecision '%s'", s)
	}
}

type NoVoucherDecisionOptions struct {
	ProveOwnIdentity NoVoucherDecision
	SelectNewVoucher NoVoucherDecision
	WithdrawLPA      NoVoucherDecision
	ApplyToCOP       NoVoucherDecision
}

var NoVoucherDecisionValues = NoVoucherDecisionOptions{
	ProveOwnIdentity: ProveOwnIdentity,
	SelectNewVoucher: SelectNewVoucher,
	WithdrawLPA:      WithdrawLPA,
	ApplyToCOP:       ApplyToCOP,
}

func (i NoVoucherDecision) Empty() bool {
	return i == NoVoucherDecision(0)
}
