// Code generated by mockery v2.42.0. DO NOT EDIT.

package donordata

import mock "github.com/stretchr/testify/mock"

// mockLocalizer is an autogenerated mock type for the Localizer type
type mockLocalizer struct {
	mock.Mock
}

type mockLocalizer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLocalizer) EXPECT() *mockLocalizer_Expecter {
	return &mockLocalizer_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: messageID, count
func (_m *mockLocalizer) Count(messageID string, count int) string {
	ret := _m.Called(messageID, count)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(messageID, count)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type mockLocalizer_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//   - messageID string
//   - count int
func (_e *mockLocalizer_Expecter) Count(messageID interface{}, count interface{}) *mockLocalizer_Count_Call {
	return &mockLocalizer_Count_Call{Call: _e.mock.On("Count", messageID, count)}
}

func (_c *mockLocalizer_Count_Call) Run(run func(messageID string, count int)) *mockLocalizer_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *mockLocalizer_Count_Call) Return(_a0 string) *mockLocalizer_Count_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_Count_Call) RunAndReturn(run func(string, int) string) *mockLocalizer_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Format provides a mock function with given fields: messageID, data
func (_m *mockLocalizer) Format(messageID string, data map[string]interface{}) string {
	ret := _m.Called(messageID, data)

	if len(ret) == 0 {
		panic("no return value specified for Format")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) string); ok {
		r0 = rf(messageID, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_Format_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Format'
type mockLocalizer_Format_Call struct {
	*mock.Call
}

// Format is a helper method to define mock.On call
//   - messageID string
//   - data map[string]interface{}
func (_e *mockLocalizer_Expecter) Format(messageID interface{}, data interface{}) *mockLocalizer_Format_Call {
	return &mockLocalizer_Format_Call{Call: _e.mock.On("Format", messageID, data)}
}

func (_c *mockLocalizer_Format_Call) Run(run func(messageID string, data map[string]interface{})) *mockLocalizer_Format_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *mockLocalizer_Format_Call) Return(_a0 string) *mockLocalizer_Format_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_Format_Call) RunAndReturn(run func(string, map[string]interface{}) string) *mockLocalizer_Format_Call {
	_c.Call.Return(run)
	return _c
}

// T provides a mock function with given fields: messageID
func (_m *mockLocalizer) T(messageID string) string {
	ret := _m.Called(messageID)

	if len(ret) == 0 {
		panic("no return value specified for T")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(messageID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockLocalizer_T_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'T'
type mockLocalizer_T_Call struct {
	*mock.Call
}

// T is a helper method to define mock.On call
//   - messageID string
func (_e *mockLocalizer_Expecter) T(messageID interface{}) *mockLocalizer_T_Call {
	return &mockLocalizer_T_Call{Call: _e.mock.On("T", messageID)}
}

func (_c *mockLocalizer_T_Call) Run(run func(messageID string)) *mockLocalizer_T_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockLocalizer_T_Call) Return(_a0 string) *mockLocalizer_T_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLocalizer_T_Call) RunAndReturn(run func(string) string) *mockLocalizer_T_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLocalizer creates a new instance of mockLocalizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLocalizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLocalizer {
	mock := &mockLocalizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
