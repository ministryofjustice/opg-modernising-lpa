// Code generated by "enumerator -type CertificateProviderRelationship -linecomment -empty"; DO NOT EDIT.
package donordata

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Personally-1]
	_ = x[Professionally-2]
}

const _CertificateProviderRelationship_name = "personallyprofessionally"

var _CertificateProviderRelationship_index = [...]uint8{0, 10, 24}

func (i CertificateProviderRelationship) String() string {
	i -= 1
	if i >= CertificateProviderRelationship(len(_CertificateProviderRelationship_index)-1) {
		return "CertificateProviderRelationship(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CertificateProviderRelationship_name[_CertificateProviderRelationship_index[i]:_CertificateProviderRelationship_index[i+1]]
}

func (i CertificateProviderRelationship) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *CertificateProviderRelationship) UnmarshalText(text []byte) error {
	val, err := ParseCertificateProviderRelationship(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i CertificateProviderRelationship) IsPersonally() bool {
	return i == Personally
}

func (i CertificateProviderRelationship) IsProfessionally() bool {
	return i == Professionally
}

func ParseCertificateProviderRelationship(s string) (CertificateProviderRelationship, error) {
	switch s {
	case "personally":
		return Personally, nil
	case "professionally":
		return Professionally, nil
	default:
		return CertificateProviderRelationship(0), fmt.Errorf("invalid CertificateProviderRelationship '%s'", s)
	}
}

type CertificateProviderRelationshipOptions struct {
	Personally     CertificateProviderRelationship
	Professionally CertificateProviderRelationship
}

var CertificateProviderRelationshipValues = CertificateProviderRelationshipOptions{
	Personally:     Personally,
	Professionally: Professionally,
}

func (i CertificateProviderRelationship) Empty() bool {
	return i == CertificateProviderRelationship(0)
}
