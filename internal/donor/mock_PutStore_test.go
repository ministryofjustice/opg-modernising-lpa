// Code generated by mockery. DO NOT EDIT.

package donor

import (
	context "context"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"
	mock "github.com/stretchr/testify/mock"
)

// mockPutStore is an autogenerated mock type for the PutStore type
type mockPutStore struct {
	mock.Mock
}

type mockPutStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPutStore) EXPECT() *mockPutStore_Expecter {
	return &mockPutStore_Expecter{mock: &_m.Mock}
}

// Put provides a mock function with given fields: ctx, _a1
func (_m *mockPutStore) Put(ctx context.Context, _a1 *donordata.Provided) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockPutStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockPutStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *donordata.Provided
func (_e *mockPutStore_Expecter) Put(ctx interface{}, _a1 interface{}) *mockPutStore_Put_Call {
	return &mockPutStore_Put_Call{Call: _e.mock.On("Put", ctx, _a1)}
}

func (_c *mockPutStore_Put_Call) Run(run func(ctx context.Context, _a1 *donordata.Provided)) *mockPutStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockPutStore_Put_Call) Return(_a0 error) *mockPutStore_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockPutStore_Put_Call) RunAndReturn(run func(context.Context, *donordata.Provided) error) *mockPutStore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// newMockPutStore creates a new instance of mockPutStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPutStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPutStore {
	mock := &mockPutStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
