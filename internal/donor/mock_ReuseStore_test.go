// Code generated by mockery. DO NOT EDIT.

package donor

import (
	context "context"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"
	mock "github.com/stretchr/testify/mock"
)

// mockReuseStore is an autogenerated mock type for the ReuseStore type
type mockReuseStore struct {
	mock.Mock
}

type mockReuseStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockReuseStore) EXPECT() *mockReuseStore_Expecter {
	return &mockReuseStore_Expecter{mock: &_m.Mock}
}

// CertificateProviders provides a mock function with given fields: ctx
func (_m *mockReuseStore) CertificateProviders(ctx context.Context) ([]donordata.CertificateProvider, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CertificateProviders")
	}

	var r0 []donordata.CertificateProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]donordata.CertificateProvider, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []donordata.CertificateProvider); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.CertificateProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockReuseStore_CertificateProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificateProviders'
type mockReuseStore_CertificateProviders_Call struct {
	*mock.Call
}

// CertificateProviders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockReuseStore_Expecter) CertificateProviders(ctx interface{}) *mockReuseStore_CertificateProviders_Call {
	return &mockReuseStore_CertificateProviders_Call{Call: _e.mock.On("CertificateProviders", ctx)}
}

func (_c *mockReuseStore_CertificateProviders_Call) Run(run func(ctx context.Context)) *mockReuseStore_CertificateProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockReuseStore_CertificateProviders_Call) Return(_a0 []donordata.CertificateProvider, _a1 error) *mockReuseStore_CertificateProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockReuseStore_CertificateProviders_Call) RunAndReturn(run func(context.Context) ([]donordata.CertificateProvider, error)) *mockReuseStore_CertificateProviders_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCertificateProvider provides a mock function with given fields: ctx, certificateProvider
func (_m *mockReuseStore) DeleteCertificateProvider(ctx context.Context, certificateProvider donordata.CertificateProvider) error {
	ret := _m.Called(ctx, certificateProvider)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificateProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.CertificateProvider) error); ok {
		r0 = rf(ctx, certificateProvider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_DeleteCertificateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificateProvider'
type mockReuseStore_DeleteCertificateProvider_Call struct {
	*mock.Call
}

// DeleteCertificateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateProvider donordata.CertificateProvider
func (_e *mockReuseStore_Expecter) DeleteCertificateProvider(ctx interface{}, certificateProvider interface{}) *mockReuseStore_DeleteCertificateProvider_Call {
	return &mockReuseStore_DeleteCertificateProvider_Call{Call: _e.mock.On("DeleteCertificateProvider", ctx, certificateProvider)}
}

func (_c *mockReuseStore_DeleteCertificateProvider_Call) Run(run func(ctx context.Context, certificateProvider donordata.CertificateProvider)) *mockReuseStore_DeleteCertificateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.CertificateProvider))
	})
	return _c
}

func (_c *mockReuseStore_DeleteCertificateProvider_Call) Return(_a0 error) *mockReuseStore_DeleteCertificateProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_DeleteCertificateProvider_Call) RunAndReturn(run func(context.Context, donordata.CertificateProvider) error) *mockReuseStore_DeleteCertificateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePersonToNotify provides a mock function with given fields: ctx, personToNotify
func (_m *mockReuseStore) DeletePersonToNotify(ctx context.Context, personToNotify donordata.PersonToNotify) error {
	ret := _m.Called(ctx, personToNotify)

	if len(ret) == 0 {
		panic("no return value specified for DeletePersonToNotify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.PersonToNotify) error); ok {
		r0 = rf(ctx, personToNotify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_DeletePersonToNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePersonToNotify'
type mockReuseStore_DeletePersonToNotify_Call struct {
	*mock.Call
}

// DeletePersonToNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - personToNotify donordata.PersonToNotify
func (_e *mockReuseStore_Expecter) DeletePersonToNotify(ctx interface{}, personToNotify interface{}) *mockReuseStore_DeletePersonToNotify_Call {
	return &mockReuseStore_DeletePersonToNotify_Call{Call: _e.mock.On("DeletePersonToNotify", ctx, personToNotify)}
}

func (_c *mockReuseStore_DeletePersonToNotify_Call) Run(run func(ctx context.Context, personToNotify donordata.PersonToNotify)) *mockReuseStore_DeletePersonToNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.PersonToNotify))
	})
	return _c
}

func (_c *mockReuseStore_DeletePersonToNotify_Call) Return(_a0 error) *mockReuseStore_DeletePersonToNotify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_DeletePersonToNotify_Call) RunAndReturn(run func(context.Context, donordata.PersonToNotify) error) *mockReuseStore_DeletePersonToNotify_Call {
	_c.Call.Return(run)
	return _c
}

// PeopleToNotify provides a mock function with given fields: ctx, provided
func (_m *mockReuseStore) PeopleToNotify(ctx context.Context, provided *donordata.Provided) ([]donordata.PersonToNotify, error) {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for PeopleToNotify")
	}

	var r0 []donordata.PersonToNotify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) ([]donordata.PersonToNotify, error)); ok {
		return rf(ctx, provided)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) []donordata.PersonToNotify); ok {
		r0 = rf(ctx, provided)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.PersonToNotify)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *donordata.Provided) error); ok {
		r1 = rf(ctx, provided)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockReuseStore_PeopleToNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PeopleToNotify'
type mockReuseStore_PeopleToNotify_Call struct {
	*mock.Call
}

// PeopleToNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockReuseStore_Expecter) PeopleToNotify(ctx interface{}, provided interface{}) *mockReuseStore_PeopleToNotify_Call {
	return &mockReuseStore_PeopleToNotify_Call{Call: _e.mock.On("PeopleToNotify", ctx, provided)}
}

func (_c *mockReuseStore_PeopleToNotify_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockReuseStore_PeopleToNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockReuseStore_PeopleToNotify_Call) Return(_a0 []donordata.PersonToNotify, _a1 error) *mockReuseStore_PeopleToNotify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockReuseStore_PeopleToNotify_Call) RunAndReturn(run func(context.Context, *donordata.Provided) ([]donordata.PersonToNotify, error)) *mockReuseStore_PeopleToNotify_Call {
	_c.Call.Return(run)
	return _c
}

// PutCertificateProvider provides a mock function with given fields: ctx, certificateProvider
func (_m *mockReuseStore) PutCertificateProvider(ctx context.Context, certificateProvider donordata.CertificateProvider) error {
	ret := _m.Called(ctx, certificateProvider)

	if len(ret) == 0 {
		panic("no return value specified for PutCertificateProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.CertificateProvider) error); ok {
		r0 = rf(ctx, certificateProvider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_PutCertificateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutCertificateProvider'
type mockReuseStore_PutCertificateProvider_Call struct {
	*mock.Call
}

// PutCertificateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateProvider donordata.CertificateProvider
func (_e *mockReuseStore_Expecter) PutCertificateProvider(ctx interface{}, certificateProvider interface{}) *mockReuseStore_PutCertificateProvider_Call {
	return &mockReuseStore_PutCertificateProvider_Call{Call: _e.mock.On("PutCertificateProvider", ctx, certificateProvider)}
}

func (_c *mockReuseStore_PutCertificateProvider_Call) Run(run func(ctx context.Context, certificateProvider donordata.CertificateProvider)) *mockReuseStore_PutCertificateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.CertificateProvider))
	})
	return _c
}

func (_c *mockReuseStore_PutCertificateProvider_Call) Return(_a0 error) *mockReuseStore_PutCertificateProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_PutCertificateProvider_Call) RunAndReturn(run func(context.Context, donordata.CertificateProvider) error) *mockReuseStore_PutCertificateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// PutPeopleToNotify provides a mock function with given fields: ctx, peopleToNotify
func (_m *mockReuseStore) PutPeopleToNotify(ctx context.Context, peopleToNotify []donordata.PersonToNotify) error {
	ret := _m.Called(ctx, peopleToNotify)

	if len(ret) == 0 {
		panic("no return value specified for PutPeopleToNotify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []donordata.PersonToNotify) error); ok {
		r0 = rf(ctx, peopleToNotify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_PutPeopleToNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPeopleToNotify'
type mockReuseStore_PutPeopleToNotify_Call struct {
	*mock.Call
}

// PutPeopleToNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - peopleToNotify []donordata.PersonToNotify
func (_e *mockReuseStore_Expecter) PutPeopleToNotify(ctx interface{}, peopleToNotify interface{}) *mockReuseStore_PutPeopleToNotify_Call {
	return &mockReuseStore_PutPeopleToNotify_Call{Call: _e.mock.On("PutPeopleToNotify", ctx, peopleToNotify)}
}

func (_c *mockReuseStore_PutPeopleToNotify_Call) Run(run func(ctx context.Context, peopleToNotify []donordata.PersonToNotify)) *mockReuseStore_PutPeopleToNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]donordata.PersonToNotify))
	})
	return _c
}

func (_c *mockReuseStore_PutPeopleToNotify_Call) Return(_a0 error) *mockReuseStore_PutPeopleToNotify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_PutPeopleToNotify_Call) RunAndReturn(run func(context.Context, []donordata.PersonToNotify) error) *mockReuseStore_PutPeopleToNotify_Call {
	_c.Call.Return(run)
	return _c
}

// PutPersonToNotify provides a mock function with given fields: ctx, personToNotify
func (_m *mockReuseStore) PutPersonToNotify(ctx context.Context, personToNotify donordata.PersonToNotify) error {
	ret := _m.Called(ctx, personToNotify)

	if len(ret) == 0 {
		panic("no return value specified for PutPersonToNotify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.PersonToNotify) error); ok {
		r0 = rf(ctx, personToNotify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_PutPersonToNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPersonToNotify'
type mockReuseStore_PutPersonToNotify_Call struct {
	*mock.Call
}

// PutPersonToNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - personToNotify donordata.PersonToNotify
func (_e *mockReuseStore_Expecter) PutPersonToNotify(ctx interface{}, personToNotify interface{}) *mockReuseStore_PutPersonToNotify_Call {
	return &mockReuseStore_PutPersonToNotify_Call{Call: _e.mock.On("PutPersonToNotify", ctx, personToNotify)}
}

func (_c *mockReuseStore_PutPersonToNotify_Call) Run(run func(ctx context.Context, personToNotify donordata.PersonToNotify)) *mockReuseStore_PutPersonToNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.PersonToNotify))
	})
	return _c
}

func (_c *mockReuseStore_PutPersonToNotify_Call) Return(_a0 error) *mockReuseStore_PutPersonToNotify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_PutPersonToNotify_Call) RunAndReturn(run func(context.Context, donordata.PersonToNotify) error) *mockReuseStore_PutPersonToNotify_Call {
	_c.Call.Return(run)
	return _c
}

// newMockReuseStore creates a new instance of mockReuseStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockReuseStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockReuseStore {
	mock := &mockReuseStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
