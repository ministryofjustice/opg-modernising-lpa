// Code generated by mockery. DO NOT EDIT.

package donor

import (
	context "context"

	actoruid "github.com/ministryofjustice/opg-modernising-lpa/internal/actor/actoruid"

	mock "github.com/stretchr/testify/mock"
)

// mockAccessCodeStore is an autogenerated mock type for the AccessCodeStore type
type mockAccessCodeStore struct {
	mock.Mock
}

type mockAccessCodeStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAccessCodeStore) EXPECT() *mockAccessCodeStore_Expecter {
	return &mockAccessCodeStore_Expecter{mock: &_m.Mock}
}

// DeleteByActor provides a mock function with given fields: ctx, actorUID
func (_m *mockAccessCodeStore) DeleteByActor(ctx context.Context, actorUID actoruid.UID) error {
	ret := _m.Called(ctx, actorUID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, actoruid.UID) error); ok {
		r0 = rf(ctx, actorUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAccessCodeStore_DeleteByActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByActor'
type mockAccessCodeStore_DeleteByActor_Call struct {
	*mock.Call
}

// DeleteByActor is a helper method to define mock.On call
//   - ctx context.Context
//   - actorUID actoruid.UID
func (_e *mockAccessCodeStore_Expecter) DeleteByActor(ctx interface{}, actorUID interface{}) *mockAccessCodeStore_DeleteByActor_Call {
	return &mockAccessCodeStore_DeleteByActor_Call{Call: _e.mock.On("DeleteByActor", ctx, actorUID)}
}

func (_c *mockAccessCodeStore_DeleteByActor_Call) Run(run func(ctx context.Context, actorUID actoruid.UID)) *mockAccessCodeStore_DeleteByActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(actoruid.UID))
	})
	return _c
}

func (_c *mockAccessCodeStore_DeleteByActor_Call) Return(_a0 error) *mockAccessCodeStore_DeleteByActor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAccessCodeStore_DeleteByActor_Call) RunAndReturn(run func(context.Context, actoruid.UID) error) *mockAccessCodeStore_DeleteByActor_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAccessCodeStore creates a new instance of mockAccessCodeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAccessCodeStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAccessCodeStore {
	mock := &mockAccessCodeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
