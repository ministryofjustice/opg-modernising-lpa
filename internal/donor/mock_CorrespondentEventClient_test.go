// Code generated by mockery. DO NOT EDIT.

package donor

import (
	context "context"

	event "github.com/ministryofjustice/opg-modernising-lpa/internal/event"
	mock "github.com/stretchr/testify/mock"
)

// mockCorrespondentEventClient is an autogenerated mock type for the CorrespondentEventClient type
type mockCorrespondentEventClient struct {
	mock.Mock
}

type mockCorrespondentEventClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCorrespondentEventClient) EXPECT() *mockCorrespondentEventClient_Expecter {
	return &mockCorrespondentEventClient_Expecter{mock: &_m.Mock}
}

// SendCorrespondentUpdated provides a mock function with given fields: ctx, e
func (_m *mockCorrespondentEventClient) SendCorrespondentUpdated(ctx context.Context, e event.CorrespondentUpdated) error {
	ret := _m.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for SendCorrespondentUpdated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, event.CorrespondentUpdated) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCorrespondentEventClient_SendCorrespondentUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCorrespondentUpdated'
type mockCorrespondentEventClient_SendCorrespondentUpdated_Call struct {
	*mock.Call
}

// SendCorrespondentUpdated is a helper method to define mock.On call
//   - ctx context.Context
//   - e event.CorrespondentUpdated
func (_e *mockCorrespondentEventClient_Expecter) SendCorrespondentUpdated(ctx interface{}, e interface{}) *mockCorrespondentEventClient_SendCorrespondentUpdated_Call {
	return &mockCorrespondentEventClient_SendCorrespondentUpdated_Call{Call: _e.mock.On("SendCorrespondentUpdated", ctx, e)}
}

func (_c *mockCorrespondentEventClient_SendCorrespondentUpdated_Call) Run(run func(ctx context.Context, e event.CorrespondentUpdated)) *mockCorrespondentEventClient_SendCorrespondentUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(event.CorrespondentUpdated))
	})
	return _c
}

func (_c *mockCorrespondentEventClient_SendCorrespondentUpdated_Call) Return(_a0 error) *mockCorrespondentEventClient_SendCorrespondentUpdated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCorrespondentEventClient_SendCorrespondentUpdated_Call) RunAndReturn(run func(context.Context, event.CorrespondentUpdated) error) *mockCorrespondentEventClient_SendCorrespondentUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCorrespondentEventClient creates a new instance of mockCorrespondentEventClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCorrespondentEventClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCorrespondentEventClient {
	mock := &mockCorrespondentEventClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
