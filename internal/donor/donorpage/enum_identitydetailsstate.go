// Code generated by "enumerator -type identityDetailsState -trimprefix"; DO NOT EDIT.

package donorpage

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[identityDetailsStateMatched-0]
	_ = x[identityDetailsStateCannotChange-1]
	_ = x[identityDetailsStateDetailNotMatched-2]
	_ = x[identityDetailsStateAddressNotMatched-3]
}

const _identityDetailsState_name = "MatchedCannotChangeDetailNotMatchedAddressNotMatched"

var _identityDetailsState_index = [...]uint8{0, 7, 19, 35, 52}

func (i identityDetailsState) String() string {
	if i >= identityDetailsState(len(_identityDetailsState_index)-1) {
		return "identityDetailsState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _identityDetailsState_name[_identityDetailsState_index[i]:_identityDetailsState_index[i+1]]
}

func (i identityDetailsState) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *identityDetailsState) UnmarshalText(text []byte) error {
	val, err := ParseIdentityDetailsState(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i identityDetailsState) IsMatched() bool {
	return i == identityDetailsStateMatched
}

func (i identityDetailsState) IsCannotChange() bool {
	return i == identityDetailsStateCannotChange
}

func (i identityDetailsState) IsDetailNotMatched() bool {
	return i == identityDetailsStateDetailNotMatched
}

func (i identityDetailsState) IsAddressNotMatched() bool {
	return i == identityDetailsStateAddressNotMatched
}

func ParseIdentityDetailsState(s string) (identityDetailsState, error) {
	switch s {
	case "Matched":
		return identityDetailsStateMatched, nil
	case "CannotChange":
		return identityDetailsStateCannotChange, nil
	case "DetailNotMatched":
		return identityDetailsStateDetailNotMatched, nil
	case "AddressNotMatched":
		return identityDetailsStateAddressNotMatched, nil
	default:
		return identityDetailsState(0), fmt.Errorf("invalid identityDetailsState '%s'", s)
	}
}

type identityDetailsStateOptions struct {
	Matched           identityDetailsState
	CannotChange      identityDetailsState
	DetailNotMatched  identityDetailsState
	AddressNotMatched identityDetailsState
}

var identityDetailsStateValues = identityDetailsStateOptions{
	Matched:           identityDetailsStateMatched,
	CannotChange:      identityDetailsStateCannotChange,
	DetailNotMatched:  identityDetailsStateDetailNotMatched,
	AddressNotMatched: identityDetailsStateAddressNotMatched,
}
