// Code generated by mockery. DO NOT EDIT.

package donorpage

import (
	context "context"

	scheduled "github.com/ministryofjustice/opg-modernising-lpa/internal/scheduled"
	mock "github.com/stretchr/testify/mock"

	scheduleddata "github.com/ministryofjustice/opg-modernising-lpa/internal/scheduled/scheduleddata"
)

// mockScheduledStore is an autogenerated mock type for the ScheduledStore type
type mockScheduledStore struct {
	mock.Mock
}

type mockScheduledStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockScheduledStore) EXPECT() *mockScheduledStore_Expecter {
	return &mockScheduledStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, rows
func (_m *mockScheduledStore) Create(ctx context.Context, rows ...scheduled.Event) error {
	_va := make([]interface{}, len(rows))
	for _i := range rows {
		_va[_i] = rows[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...scheduled.Event) error); ok {
		r0 = rf(ctx, rows...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockScheduledStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockScheduledStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - rows ...scheduled.Event
func (_e *mockScheduledStore_Expecter) Create(ctx interface{}, rows ...interface{}) *mockScheduledStore_Create_Call {
	return &mockScheduledStore_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx}, rows...)...)}
}

func (_c *mockScheduledStore_Create_Call) Run(run func(ctx context.Context, rows ...scheduled.Event)) *mockScheduledStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]scheduled.Event, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(scheduled.Event)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *mockScheduledStore_Create_Call) Return(_a0 error) *mockScheduledStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockScheduledStore_Create_Call) RunAndReturn(run func(context.Context, ...scheduled.Event) error) *mockScheduledStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllActionByUID provides a mock function with given fields: ctx, actions, uid
func (_m *mockScheduledStore) DeleteAllActionByUID(ctx context.Context, actions []scheduleddata.Action, uid string) error {
	ret := _m.Called(ctx, actions, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllActionByUID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []scheduleddata.Action, string) error); ok {
		r0 = rf(ctx, actions, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockScheduledStore_DeleteAllActionByUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllActionByUID'
type mockScheduledStore_DeleteAllActionByUID_Call struct {
	*mock.Call
}

// DeleteAllActionByUID is a helper method to define mock.On call
//   - ctx context.Context
//   - actions []scheduleddata.Action
//   - uid string
func (_e *mockScheduledStore_Expecter) DeleteAllActionByUID(ctx interface{}, actions interface{}, uid interface{}) *mockScheduledStore_DeleteAllActionByUID_Call {
	return &mockScheduledStore_DeleteAllActionByUID_Call{Call: _e.mock.On("DeleteAllActionByUID", ctx, actions, uid)}
}

func (_c *mockScheduledStore_DeleteAllActionByUID_Call) Run(run func(ctx context.Context, actions []scheduleddata.Action, uid string)) *mockScheduledStore_DeleteAllActionByUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]scheduleddata.Action), args[2].(string))
	})
	return _c
}

func (_c *mockScheduledStore_DeleteAllActionByUID_Call) Return(_a0 error) *mockScheduledStore_DeleteAllActionByUID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockScheduledStore_DeleteAllActionByUID_Call) RunAndReturn(run func(context.Context, []scheduleddata.Action, string) error) *mockScheduledStore_DeleteAllActionByUID_Call {
	_c.Call.Return(run)
	return _c
}

// newMockScheduledStore creates a new instance of mockScheduledStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockScheduledStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockScheduledStore {
	mock := &mockScheduledStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
