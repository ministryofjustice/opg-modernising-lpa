// Code generated by mockery v2.45.0. DO NOT EDIT.

package donorpage

import (
	context "context"

	scheduled "github.com/ministryofjustice/opg-modernising-lpa/internal/scheduled"
	mock "github.com/stretchr/testify/mock"
)

// mockScheduledStore is an autogenerated mock type for the ScheduledStore type
type mockScheduledStore struct {
	mock.Mock
}

type mockScheduledStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockScheduledStore) EXPECT() *mockScheduledStore_Expecter {
	return &mockScheduledStore_Expecter{mock: &_m.Mock}
}

// Put provides a mock function with given fields: ctx, row
func (_m *mockScheduledStore) Put(ctx context.Context, row scheduled.Event) error {
	ret := _m.Called(ctx, row)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, scheduled.Event) error); ok {
		r0 = rf(ctx, row)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockScheduledStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockScheduledStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - row scheduled.Row
func (_e *mockScheduledStore_Expecter) Put(ctx interface{}, row interface{}) *mockScheduledStore_Put_Call {
	return &mockScheduledStore_Put_Call{Call: _e.mock.On("Put", ctx, row)}
}

func (_c *mockScheduledStore_Put_Call) Run(run func(ctx context.Context, row scheduled.Event)) *mockScheduledStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(scheduled.Event))
	})
	return _c
}

func (_c *mockScheduledStore_Put_Call) Return(_a0 error) *mockScheduledStore_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockScheduledStore_Put_Call) RunAndReturn(run func(context.Context, scheduled.Event) error) *mockScheduledStore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// newMockScheduledStore creates a new instance of mockScheduledStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockScheduledStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockScheduledStore {
	mock := &mockScheduledStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
