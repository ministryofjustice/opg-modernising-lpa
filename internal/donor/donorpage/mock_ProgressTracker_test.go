// Code generated by mockery v2.45.0. DO NOT EDIT.

package donorpage

import (
	progress "github.com/ministryofjustice/opg-modernising-lpa/internal/progress"
	mock "github.com/stretchr/testify/mock"
)

// mockProgressTracker is an autogenerated mock type for the ProgressTracker type
type mockProgressTracker struct {
	mock.Mock
}

type mockProgressTracker_Expecter struct {
	mock *mock.Mock
}

func (_m *mockProgressTracker) EXPECT() *mockProgressTracker_Expecter {
	return &mockProgressTracker_Expecter{mock: &_m.Mock}
}

// Completed provides a mock function with given fields:
func (_m *mockProgressTracker) Completed() []progress.Step {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Completed")
	}

	var r0 []progress.Step
	if rf, ok := ret.Get(0).(func() []progress.Step); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]progress.Step)
		}
	}

	return r0
}

// mockProgressTracker_Completed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Completed'
type mockProgressTracker_Completed_Call struct {
	*mock.Call
}

// Completed is a helper method to define mock.On call
func (_e *mockProgressTracker_Expecter) Completed() *mockProgressTracker_Completed_Call {
	return &mockProgressTracker_Completed_Call{Call: _e.mock.On("Completed")}
}

func (_c *mockProgressTracker_Completed_Call) Run(run func()) *mockProgressTracker_Completed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockProgressTracker_Completed_Call) Return(_a0 []progress.Step) *mockProgressTracker_Completed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockProgressTracker_Completed_Call) RunAndReturn(run func() []progress.Step) *mockProgressTracker_Completed_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: paidFullFee, isSupporter, completedSteps
func (_m *mockProgressTracker) Init(paidFullFee bool, isSupporter bool, completedSteps []progress.Step) {
	_m.Called(paidFullFee, isSupporter, completedSteps)
}

// mockProgressTracker_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type mockProgressTracker_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - paidFullFee bool
//   - isSupporter bool
//   - completedSteps []progress.Step
func (_e *mockProgressTracker_Expecter) Init(paidFullFee interface{}, isSupporter interface{}, completedSteps interface{}) *mockProgressTracker_Init_Call {
	return &mockProgressTracker_Init_Call{Call: _e.mock.On("Init", paidFullFee, isSupporter, completedSteps)}
}

func (_c *mockProgressTracker_Init_Call) Run(run func(paidFullFee bool, isSupporter bool, completedSteps []progress.Step)) *mockProgressTracker_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(bool), args[2].([]progress.Step))
	})
	return _c
}

func (_c *mockProgressTracker_Init_Call) Return() *mockProgressTracker_Init_Call {
	_c.Call.Return()
	return _c
}

func (_c *mockProgressTracker_Init_Call) RunAndReturn(run func(bool, bool, []progress.Step)) *mockProgressTracker_Init_Call {
	_c.Call.Return(run)
	return _c
}

// IsSupporter provides a mock function with given fields:
func (_m *mockProgressTracker) IsSupporter() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSupporter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockProgressTracker_IsSupporter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSupporter'
type mockProgressTracker_IsSupporter_Call struct {
	*mock.Call
}

// IsSupporter is a helper method to define mock.On call
func (_e *mockProgressTracker_Expecter) IsSupporter() *mockProgressTracker_IsSupporter_Call {
	return &mockProgressTracker_IsSupporter_Call{Call: _e.mock.On("IsSupporter")}
}

func (_c *mockProgressTracker_IsSupporter_Call) Run(run func()) *mockProgressTracker_IsSupporter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockProgressTracker_IsSupporter_Call) Return(_a0 bool) *mockProgressTracker_IsSupporter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockProgressTracker_IsSupporter_Call) RunAndReturn(run func() bool) *mockProgressTracker_IsSupporter_Call {
	_c.Call.Return(run)
	return _c
}

// Remaining provides a mock function with given fields:
func (_m *mockProgressTracker) Remaining() (progress.Step, []progress.Step) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Remaining")
	}

	var r0 progress.Step
	var r1 []progress.Step
	if rf, ok := ret.Get(0).(func() (progress.Step, []progress.Step)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() progress.Step); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(progress.Step)
	}

	if rf, ok := ret.Get(1).(func() []progress.Step); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]progress.Step)
		}
	}

	return r0, r1
}

// mockProgressTracker_Remaining_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remaining'
type mockProgressTracker_Remaining_Call struct {
	*mock.Call
}

// Remaining is a helper method to define mock.On call
func (_e *mockProgressTracker_Expecter) Remaining() *mockProgressTracker_Remaining_Call {
	return &mockProgressTracker_Remaining_Call{Call: _e.mock.On("Remaining")}
}

func (_c *mockProgressTracker_Remaining_Call) Run(run func()) *mockProgressTracker_Remaining_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockProgressTracker_Remaining_Call) Return(inProgress progress.Step, notStarted []progress.Step) *mockProgressTracker_Remaining_Call {
	_c.Call.Return(inProgress, notStarted)
	return _c
}

func (_c *mockProgressTracker_Remaining_Call) RunAndReturn(run func() (progress.Step, []progress.Step)) *mockProgressTracker_Remaining_Call {
	_c.Call.Return(run)
	return _c
}

// newMockProgressTracker creates a new instance of mockProgressTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockProgressTracker(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockProgressTracker {
	mock := &mockProgressTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
