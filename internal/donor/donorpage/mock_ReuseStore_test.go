// Code generated by mockery. DO NOT EDIT.

package donorpage

import (
	context "context"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"
	mock "github.com/stretchr/testify/mock"
)

// mockReuseStore is an autogenerated mock type for the ReuseStore type
type mockReuseStore struct {
	mock.Mock
}

type mockReuseStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockReuseStore) EXPECT() *mockReuseStore_Expecter {
	return &mockReuseStore_Expecter{mock: &_m.Mock}
}

// Correspondents provides a mock function with given fields: ctx
func (_m *mockReuseStore) Correspondents(ctx context.Context) ([]donordata.Correspondent, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Correspondents")
	}

	var r0 []donordata.Correspondent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]donordata.Correspondent, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []donordata.Correspondent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.Correspondent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockReuseStore_Correspondents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Correspondents'
type mockReuseStore_Correspondents_Call struct {
	*mock.Call
}

// Correspondents is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockReuseStore_Expecter) Correspondents(ctx interface{}) *mockReuseStore_Correspondents_Call {
	return &mockReuseStore_Correspondents_Call{Call: _e.mock.On("Correspondents", ctx)}
}

func (_c *mockReuseStore_Correspondents_Call) Run(run func(ctx context.Context)) *mockReuseStore_Correspondents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockReuseStore_Correspondents_Call) Return(_a0 []donordata.Correspondent, _a1 error) *mockReuseStore_Correspondents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockReuseStore_Correspondents_Call) RunAndReturn(run func(context.Context) ([]donordata.Correspondent, error)) *mockReuseStore_Correspondents_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCorrespondent provides a mock function with given fields: ctx, correspondent
func (_m *mockReuseStore) DeleteCorrespondent(ctx context.Context, correspondent donordata.Correspondent) error {
	ret := _m.Called(ctx, correspondent)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCorrespondent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.Correspondent) error); ok {
		r0 = rf(ctx, correspondent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_DeleteCorrespondent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCorrespondent'
type mockReuseStore_DeleteCorrespondent_Call struct {
	*mock.Call
}

// DeleteCorrespondent is a helper method to define mock.On call
//   - ctx context.Context
//   - correspondent donordata.Correspondent
func (_e *mockReuseStore_Expecter) DeleteCorrespondent(ctx interface{}, correspondent interface{}) *mockReuseStore_DeleteCorrespondent_Call {
	return &mockReuseStore_DeleteCorrespondent_Call{Call: _e.mock.On("DeleteCorrespondent", ctx, correspondent)}
}

func (_c *mockReuseStore_DeleteCorrespondent_Call) Run(run func(ctx context.Context, correspondent donordata.Correspondent)) *mockReuseStore_DeleteCorrespondent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.Correspondent))
	})
	return _c
}

func (_c *mockReuseStore_DeleteCorrespondent_Call) Return(_a0 error) *mockReuseStore_DeleteCorrespondent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_DeleteCorrespondent_Call) RunAndReturn(run func(context.Context, donordata.Correspondent) error) *mockReuseStore_DeleteCorrespondent_Call {
	_c.Call.Return(run)
	return _c
}

// PutCorrespondent provides a mock function with given fields: ctx, correspondent
func (_m *mockReuseStore) PutCorrespondent(ctx context.Context, correspondent donordata.Correspondent) error {
	ret := _m.Called(ctx, correspondent)

	if len(ret) == 0 {
		panic("no return value specified for PutCorrespondent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.Correspondent) error); ok {
		r0 = rf(ctx, correspondent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_PutCorrespondent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutCorrespondent'
type mockReuseStore_PutCorrespondent_Call struct {
	*mock.Call
}

// PutCorrespondent is a helper method to define mock.On call
//   - ctx context.Context
//   - correspondent donordata.Correspondent
func (_e *mockReuseStore_Expecter) PutCorrespondent(ctx interface{}, correspondent interface{}) *mockReuseStore_PutCorrespondent_Call {
	return &mockReuseStore_PutCorrespondent_Call{Call: _e.mock.On("PutCorrespondent", ctx, correspondent)}
}

func (_c *mockReuseStore_PutCorrespondent_Call) Run(run func(ctx context.Context, correspondent donordata.Correspondent)) *mockReuseStore_PutCorrespondent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.Correspondent))
	})
	return _c
}

func (_c *mockReuseStore_PutCorrespondent_Call) Return(_a0 error) *mockReuseStore_PutCorrespondent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_PutCorrespondent_Call) RunAndReturn(run func(context.Context, donordata.Correspondent) error) *mockReuseStore_PutCorrespondent_Call {
	_c.Call.Return(run)
	return _c
}

// newMockReuseStore creates a new instance of mockReuseStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockReuseStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockReuseStore {
	mock := &mockReuseStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
