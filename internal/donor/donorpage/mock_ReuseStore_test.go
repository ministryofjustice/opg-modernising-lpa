// Code generated by mockery. DO NOT EDIT.

package donorpage

import (
	context "context"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"
	mock "github.com/stretchr/testify/mock"
)

// mockReuseStore is an autogenerated mock type for the ReuseStore type
type mockReuseStore struct {
	mock.Mock
}

type mockReuseStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockReuseStore) EXPECT() *mockReuseStore_Expecter {
	return &mockReuseStore_Expecter{mock: &_m.Mock}
}

// Attorneys provides a mock function with given fields: ctx, provided
func (_m *mockReuseStore) Attorneys(ctx context.Context, provided *donordata.Provided) ([]donordata.Attorney, error) {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for Attorneys")
	}

	var r0 []donordata.Attorney
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) ([]donordata.Attorney, error)); ok {
		return rf(ctx, provided)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) []donordata.Attorney); ok {
		r0 = rf(ctx, provided)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.Attorney)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *donordata.Provided) error); ok {
		r1 = rf(ctx, provided)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockReuseStore_Attorneys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attorneys'
type mockReuseStore_Attorneys_Call struct {
	*mock.Call
}

// Attorneys is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockReuseStore_Expecter) Attorneys(ctx interface{}, provided interface{}) *mockReuseStore_Attorneys_Call {
	return &mockReuseStore_Attorneys_Call{Call: _e.mock.On("Attorneys", ctx, provided)}
}

func (_c *mockReuseStore_Attorneys_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockReuseStore_Attorneys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockReuseStore_Attorneys_Call) Return(_a0 []donordata.Attorney, _a1 error) *mockReuseStore_Attorneys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockReuseStore_Attorneys_Call) RunAndReturn(run func(context.Context, *donordata.Provided) ([]donordata.Attorney, error)) *mockReuseStore_Attorneys_Call {
	_c.Call.Return(run)
	return _c
}

// CertificateProviders provides a mock function with given fields: ctx
func (_m *mockReuseStore) CertificateProviders(ctx context.Context) ([]donordata.CertificateProvider, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CertificateProviders")
	}

	var r0 []donordata.CertificateProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]donordata.CertificateProvider, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []donordata.CertificateProvider); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.CertificateProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockReuseStore_CertificateProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificateProviders'
type mockReuseStore_CertificateProviders_Call struct {
	*mock.Call
}

// CertificateProviders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockReuseStore_Expecter) CertificateProviders(ctx interface{}) *mockReuseStore_CertificateProviders_Call {
	return &mockReuseStore_CertificateProviders_Call{Call: _e.mock.On("CertificateProviders", ctx)}
}

func (_c *mockReuseStore_CertificateProviders_Call) Run(run func(ctx context.Context)) *mockReuseStore_CertificateProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockReuseStore_CertificateProviders_Call) Return(_a0 []donordata.CertificateProvider, _a1 error) *mockReuseStore_CertificateProviders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockReuseStore_CertificateProviders_Call) RunAndReturn(run func(context.Context) ([]donordata.CertificateProvider, error)) *mockReuseStore_CertificateProviders_Call {
	_c.Call.Return(run)
	return _c
}

// Correspondents provides a mock function with given fields: ctx
func (_m *mockReuseStore) Correspondents(ctx context.Context) ([]donordata.Correspondent, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Correspondents")
	}

	var r0 []donordata.Correspondent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]donordata.Correspondent, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []donordata.Correspondent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.Correspondent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockReuseStore_Correspondents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Correspondents'
type mockReuseStore_Correspondents_Call struct {
	*mock.Call
}

// Correspondents is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockReuseStore_Expecter) Correspondents(ctx interface{}) *mockReuseStore_Correspondents_Call {
	return &mockReuseStore_Correspondents_Call{Call: _e.mock.On("Correspondents", ctx)}
}

func (_c *mockReuseStore_Correspondents_Call) Run(run func(ctx context.Context)) *mockReuseStore_Correspondents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockReuseStore_Correspondents_Call) Return(_a0 []donordata.Correspondent, _a1 error) *mockReuseStore_Correspondents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockReuseStore_Correspondents_Call) RunAndReturn(run func(context.Context) ([]donordata.Correspondent, error)) *mockReuseStore_Correspondents_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAttorney provides a mock function with given fields: ctx, attorney
func (_m *mockReuseStore) DeleteAttorney(ctx context.Context, attorney donordata.Attorney) error {
	ret := _m.Called(ctx, attorney)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttorney")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.Attorney) error); ok {
		r0 = rf(ctx, attorney)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_DeleteAttorney_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAttorney'
type mockReuseStore_DeleteAttorney_Call struct {
	*mock.Call
}

// DeleteAttorney is a helper method to define mock.On call
//   - ctx context.Context
//   - attorney donordata.Attorney
func (_e *mockReuseStore_Expecter) DeleteAttorney(ctx interface{}, attorney interface{}) *mockReuseStore_DeleteAttorney_Call {
	return &mockReuseStore_DeleteAttorney_Call{Call: _e.mock.On("DeleteAttorney", ctx, attorney)}
}

func (_c *mockReuseStore_DeleteAttorney_Call) Run(run func(ctx context.Context, attorney donordata.Attorney)) *mockReuseStore_DeleteAttorney_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.Attorney))
	})
	return _c
}

func (_c *mockReuseStore_DeleteAttorney_Call) Return(_a0 error) *mockReuseStore_DeleteAttorney_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_DeleteAttorney_Call) RunAndReturn(run func(context.Context, donordata.Attorney) error) *mockReuseStore_DeleteAttorney_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCertificateProvider provides a mock function with given fields: ctx, certificateProvider
func (_m *mockReuseStore) DeleteCertificateProvider(ctx context.Context, certificateProvider donordata.CertificateProvider) error {
	ret := _m.Called(ctx, certificateProvider)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificateProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.CertificateProvider) error); ok {
		r0 = rf(ctx, certificateProvider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_DeleteCertificateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificateProvider'
type mockReuseStore_DeleteCertificateProvider_Call struct {
	*mock.Call
}

// DeleteCertificateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateProvider donordata.CertificateProvider
func (_e *mockReuseStore_Expecter) DeleteCertificateProvider(ctx interface{}, certificateProvider interface{}) *mockReuseStore_DeleteCertificateProvider_Call {
	return &mockReuseStore_DeleteCertificateProvider_Call{Call: _e.mock.On("DeleteCertificateProvider", ctx, certificateProvider)}
}

func (_c *mockReuseStore_DeleteCertificateProvider_Call) Run(run func(ctx context.Context, certificateProvider donordata.CertificateProvider)) *mockReuseStore_DeleteCertificateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.CertificateProvider))
	})
	return _c
}

func (_c *mockReuseStore_DeleteCertificateProvider_Call) Return(_a0 error) *mockReuseStore_DeleteCertificateProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_DeleteCertificateProvider_Call) RunAndReturn(run func(context.Context, donordata.CertificateProvider) error) *mockReuseStore_DeleteCertificateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCorrespondent provides a mock function with given fields: ctx, correspondent
func (_m *mockReuseStore) DeleteCorrespondent(ctx context.Context, correspondent donordata.Correspondent) error {
	ret := _m.Called(ctx, correspondent)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCorrespondent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.Correspondent) error); ok {
		r0 = rf(ctx, correspondent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_DeleteCorrespondent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCorrespondent'
type mockReuseStore_DeleteCorrespondent_Call struct {
	*mock.Call
}

// DeleteCorrespondent is a helper method to define mock.On call
//   - ctx context.Context
//   - correspondent donordata.Correspondent
func (_e *mockReuseStore_Expecter) DeleteCorrespondent(ctx interface{}, correspondent interface{}) *mockReuseStore_DeleteCorrespondent_Call {
	return &mockReuseStore_DeleteCorrespondent_Call{Call: _e.mock.On("DeleteCorrespondent", ctx, correspondent)}
}

func (_c *mockReuseStore_DeleteCorrespondent_Call) Run(run func(ctx context.Context, correspondent donordata.Correspondent)) *mockReuseStore_DeleteCorrespondent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.Correspondent))
	})
	return _c
}

func (_c *mockReuseStore_DeleteCorrespondent_Call) Return(_a0 error) *mockReuseStore_DeleteCorrespondent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_DeleteCorrespondent_Call) RunAndReturn(run func(context.Context, donordata.Correspondent) error) *mockReuseStore_DeleteCorrespondent_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePersonToNotify provides a mock function with given fields: ctx, personToNotify
func (_m *mockReuseStore) DeletePersonToNotify(ctx context.Context, personToNotify donordata.PersonToNotify) error {
	ret := _m.Called(ctx, personToNotify)

	if len(ret) == 0 {
		panic("no return value specified for DeletePersonToNotify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.PersonToNotify) error); ok {
		r0 = rf(ctx, personToNotify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_DeletePersonToNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePersonToNotify'
type mockReuseStore_DeletePersonToNotify_Call struct {
	*mock.Call
}

// DeletePersonToNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - personToNotify donordata.PersonToNotify
func (_e *mockReuseStore_Expecter) DeletePersonToNotify(ctx interface{}, personToNotify interface{}) *mockReuseStore_DeletePersonToNotify_Call {
	return &mockReuseStore_DeletePersonToNotify_Call{Call: _e.mock.On("DeletePersonToNotify", ctx, personToNotify)}
}

func (_c *mockReuseStore_DeletePersonToNotify_Call) Run(run func(ctx context.Context, personToNotify donordata.PersonToNotify)) *mockReuseStore_DeletePersonToNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.PersonToNotify))
	})
	return _c
}

func (_c *mockReuseStore_DeletePersonToNotify_Call) Return(_a0 error) *mockReuseStore_DeletePersonToNotify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_DeletePersonToNotify_Call) RunAndReturn(run func(context.Context, donordata.PersonToNotify) error) *mockReuseStore_DeletePersonToNotify_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTrustCorporation provides a mock function with given fields: ctx, trustCorporation
func (_m *mockReuseStore) DeleteTrustCorporation(ctx context.Context, trustCorporation donordata.TrustCorporation) error {
	ret := _m.Called(ctx, trustCorporation)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrustCorporation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.TrustCorporation) error); ok {
		r0 = rf(ctx, trustCorporation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_DeleteTrustCorporation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTrustCorporation'
type mockReuseStore_DeleteTrustCorporation_Call struct {
	*mock.Call
}

// DeleteTrustCorporation is a helper method to define mock.On call
//   - ctx context.Context
//   - trustCorporation donordata.TrustCorporation
func (_e *mockReuseStore_Expecter) DeleteTrustCorporation(ctx interface{}, trustCorporation interface{}) *mockReuseStore_DeleteTrustCorporation_Call {
	return &mockReuseStore_DeleteTrustCorporation_Call{Call: _e.mock.On("DeleteTrustCorporation", ctx, trustCorporation)}
}

func (_c *mockReuseStore_DeleteTrustCorporation_Call) Run(run func(ctx context.Context, trustCorporation donordata.TrustCorporation)) *mockReuseStore_DeleteTrustCorporation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.TrustCorporation))
	})
	return _c
}

func (_c *mockReuseStore_DeleteTrustCorporation_Call) Return(_a0 error) *mockReuseStore_DeleteTrustCorporation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_DeleteTrustCorporation_Call) RunAndReturn(run func(context.Context, donordata.TrustCorporation) error) *mockReuseStore_DeleteTrustCorporation_Call {
	_c.Call.Return(run)
	return _c
}

// PeopleToNotify provides a mock function with given fields: ctx, provided
func (_m *mockReuseStore) PeopleToNotify(ctx context.Context, provided *donordata.Provided) ([]donordata.PersonToNotify, error) {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for PeopleToNotify")
	}

	var r0 []donordata.PersonToNotify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) ([]donordata.PersonToNotify, error)); ok {
		return rf(ctx, provided)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) []donordata.PersonToNotify); ok {
		r0 = rf(ctx, provided)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.PersonToNotify)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *donordata.Provided) error); ok {
		r1 = rf(ctx, provided)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockReuseStore_PeopleToNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PeopleToNotify'
type mockReuseStore_PeopleToNotify_Call struct {
	*mock.Call
}

// PeopleToNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockReuseStore_Expecter) PeopleToNotify(ctx interface{}, provided interface{}) *mockReuseStore_PeopleToNotify_Call {
	return &mockReuseStore_PeopleToNotify_Call{Call: _e.mock.On("PeopleToNotify", ctx, provided)}
}

func (_c *mockReuseStore_PeopleToNotify_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockReuseStore_PeopleToNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockReuseStore_PeopleToNotify_Call) Return(_a0 []donordata.PersonToNotify, _a1 error) *mockReuseStore_PeopleToNotify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockReuseStore_PeopleToNotify_Call) RunAndReturn(run func(context.Context, *donordata.Provided) ([]donordata.PersonToNotify, error)) *mockReuseStore_PeopleToNotify_Call {
	_c.Call.Return(run)
	return _c
}

// PutAttorney provides a mock function with given fields: ctx, attorney
func (_m *mockReuseStore) PutAttorney(ctx context.Context, attorney donordata.Attorney) error {
	ret := _m.Called(ctx, attorney)

	if len(ret) == 0 {
		panic("no return value specified for PutAttorney")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.Attorney) error); ok {
		r0 = rf(ctx, attorney)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_PutAttorney_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutAttorney'
type mockReuseStore_PutAttorney_Call struct {
	*mock.Call
}

// PutAttorney is a helper method to define mock.On call
//   - ctx context.Context
//   - attorney donordata.Attorney
func (_e *mockReuseStore_Expecter) PutAttorney(ctx interface{}, attorney interface{}) *mockReuseStore_PutAttorney_Call {
	return &mockReuseStore_PutAttorney_Call{Call: _e.mock.On("PutAttorney", ctx, attorney)}
}

func (_c *mockReuseStore_PutAttorney_Call) Run(run func(ctx context.Context, attorney donordata.Attorney)) *mockReuseStore_PutAttorney_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.Attorney))
	})
	return _c
}

func (_c *mockReuseStore_PutAttorney_Call) Return(_a0 error) *mockReuseStore_PutAttorney_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_PutAttorney_Call) RunAndReturn(run func(context.Context, donordata.Attorney) error) *mockReuseStore_PutAttorney_Call {
	_c.Call.Return(run)
	return _c
}

// PutAttorneys provides a mock function with given fields: ctx, attorneys
func (_m *mockReuseStore) PutAttorneys(ctx context.Context, attorneys []donordata.Attorney) error {
	ret := _m.Called(ctx, attorneys)

	if len(ret) == 0 {
		panic("no return value specified for PutAttorneys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []donordata.Attorney) error); ok {
		r0 = rf(ctx, attorneys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_PutAttorneys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutAttorneys'
type mockReuseStore_PutAttorneys_Call struct {
	*mock.Call
}

// PutAttorneys is a helper method to define mock.On call
//   - ctx context.Context
//   - attorneys []donordata.Attorney
func (_e *mockReuseStore_Expecter) PutAttorneys(ctx interface{}, attorneys interface{}) *mockReuseStore_PutAttorneys_Call {
	return &mockReuseStore_PutAttorneys_Call{Call: _e.mock.On("PutAttorneys", ctx, attorneys)}
}

func (_c *mockReuseStore_PutAttorneys_Call) Run(run func(ctx context.Context, attorneys []donordata.Attorney)) *mockReuseStore_PutAttorneys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]donordata.Attorney))
	})
	return _c
}

func (_c *mockReuseStore_PutAttorneys_Call) Return(_a0 error) *mockReuseStore_PutAttorneys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_PutAttorneys_Call) RunAndReturn(run func(context.Context, []donordata.Attorney) error) *mockReuseStore_PutAttorneys_Call {
	_c.Call.Return(run)
	return _c
}

// PutCertificateProvider provides a mock function with given fields: ctx, certificateProvider
func (_m *mockReuseStore) PutCertificateProvider(ctx context.Context, certificateProvider donordata.CertificateProvider) error {
	ret := _m.Called(ctx, certificateProvider)

	if len(ret) == 0 {
		panic("no return value specified for PutCertificateProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.CertificateProvider) error); ok {
		r0 = rf(ctx, certificateProvider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_PutCertificateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutCertificateProvider'
type mockReuseStore_PutCertificateProvider_Call struct {
	*mock.Call
}

// PutCertificateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateProvider donordata.CertificateProvider
func (_e *mockReuseStore_Expecter) PutCertificateProvider(ctx interface{}, certificateProvider interface{}) *mockReuseStore_PutCertificateProvider_Call {
	return &mockReuseStore_PutCertificateProvider_Call{Call: _e.mock.On("PutCertificateProvider", ctx, certificateProvider)}
}

func (_c *mockReuseStore_PutCertificateProvider_Call) Run(run func(ctx context.Context, certificateProvider donordata.CertificateProvider)) *mockReuseStore_PutCertificateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.CertificateProvider))
	})
	return _c
}

func (_c *mockReuseStore_PutCertificateProvider_Call) Return(_a0 error) *mockReuseStore_PutCertificateProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_PutCertificateProvider_Call) RunAndReturn(run func(context.Context, donordata.CertificateProvider) error) *mockReuseStore_PutCertificateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// PutCorrespondent provides a mock function with given fields: ctx, correspondent
func (_m *mockReuseStore) PutCorrespondent(ctx context.Context, correspondent donordata.Correspondent) error {
	ret := _m.Called(ctx, correspondent)

	if len(ret) == 0 {
		panic("no return value specified for PutCorrespondent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.Correspondent) error); ok {
		r0 = rf(ctx, correspondent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_PutCorrespondent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutCorrespondent'
type mockReuseStore_PutCorrespondent_Call struct {
	*mock.Call
}

// PutCorrespondent is a helper method to define mock.On call
//   - ctx context.Context
//   - correspondent donordata.Correspondent
func (_e *mockReuseStore_Expecter) PutCorrespondent(ctx interface{}, correspondent interface{}) *mockReuseStore_PutCorrespondent_Call {
	return &mockReuseStore_PutCorrespondent_Call{Call: _e.mock.On("PutCorrespondent", ctx, correspondent)}
}

func (_c *mockReuseStore_PutCorrespondent_Call) Run(run func(ctx context.Context, correspondent donordata.Correspondent)) *mockReuseStore_PutCorrespondent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.Correspondent))
	})
	return _c
}

func (_c *mockReuseStore_PutCorrespondent_Call) Return(_a0 error) *mockReuseStore_PutCorrespondent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_PutCorrespondent_Call) RunAndReturn(run func(context.Context, donordata.Correspondent) error) *mockReuseStore_PutCorrespondent_Call {
	_c.Call.Return(run)
	return _c
}

// PutPeopleToNotify provides a mock function with given fields: ctx, peopleToNotify
func (_m *mockReuseStore) PutPeopleToNotify(ctx context.Context, peopleToNotify []donordata.PersonToNotify) error {
	ret := _m.Called(ctx, peopleToNotify)

	if len(ret) == 0 {
		panic("no return value specified for PutPeopleToNotify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []donordata.PersonToNotify) error); ok {
		r0 = rf(ctx, peopleToNotify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_PutPeopleToNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPeopleToNotify'
type mockReuseStore_PutPeopleToNotify_Call struct {
	*mock.Call
}

// PutPeopleToNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - peopleToNotify []donordata.PersonToNotify
func (_e *mockReuseStore_Expecter) PutPeopleToNotify(ctx interface{}, peopleToNotify interface{}) *mockReuseStore_PutPeopleToNotify_Call {
	return &mockReuseStore_PutPeopleToNotify_Call{Call: _e.mock.On("PutPeopleToNotify", ctx, peopleToNotify)}
}

func (_c *mockReuseStore_PutPeopleToNotify_Call) Run(run func(ctx context.Context, peopleToNotify []donordata.PersonToNotify)) *mockReuseStore_PutPeopleToNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]donordata.PersonToNotify))
	})
	return _c
}

func (_c *mockReuseStore_PutPeopleToNotify_Call) Return(_a0 error) *mockReuseStore_PutPeopleToNotify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_PutPeopleToNotify_Call) RunAndReturn(run func(context.Context, []donordata.PersonToNotify) error) *mockReuseStore_PutPeopleToNotify_Call {
	_c.Call.Return(run)
	return _c
}

// PutPersonToNotify provides a mock function with given fields: ctx, personToNotify
func (_m *mockReuseStore) PutPersonToNotify(ctx context.Context, personToNotify donordata.PersonToNotify) error {
	ret := _m.Called(ctx, personToNotify)

	if len(ret) == 0 {
		panic("no return value specified for PutPersonToNotify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.PersonToNotify) error); ok {
		r0 = rf(ctx, personToNotify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_PutPersonToNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPersonToNotify'
type mockReuseStore_PutPersonToNotify_Call struct {
	*mock.Call
}

// PutPersonToNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - personToNotify donordata.PersonToNotify
func (_e *mockReuseStore_Expecter) PutPersonToNotify(ctx interface{}, personToNotify interface{}) *mockReuseStore_PutPersonToNotify_Call {
	return &mockReuseStore_PutPersonToNotify_Call{Call: _e.mock.On("PutPersonToNotify", ctx, personToNotify)}
}

func (_c *mockReuseStore_PutPersonToNotify_Call) Run(run func(ctx context.Context, personToNotify donordata.PersonToNotify)) *mockReuseStore_PutPersonToNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.PersonToNotify))
	})
	return _c
}

func (_c *mockReuseStore_PutPersonToNotify_Call) Return(_a0 error) *mockReuseStore_PutPersonToNotify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_PutPersonToNotify_Call) RunAndReturn(run func(context.Context, donordata.PersonToNotify) error) *mockReuseStore_PutPersonToNotify_Call {
	_c.Call.Return(run)
	return _c
}

// PutTrustCorporation provides a mock function with given fields: ctx, trustCorporation
func (_m *mockReuseStore) PutTrustCorporation(ctx context.Context, trustCorporation donordata.TrustCorporation) error {
	ret := _m.Called(ctx, trustCorporation)

	if len(ret) == 0 {
		panic("no return value specified for PutTrustCorporation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, donordata.TrustCorporation) error); ok {
		r0 = rf(ctx, trustCorporation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockReuseStore_PutTrustCorporation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutTrustCorporation'
type mockReuseStore_PutTrustCorporation_Call struct {
	*mock.Call
}

// PutTrustCorporation is a helper method to define mock.On call
//   - ctx context.Context
//   - trustCorporation donordata.TrustCorporation
func (_e *mockReuseStore_Expecter) PutTrustCorporation(ctx interface{}, trustCorporation interface{}) *mockReuseStore_PutTrustCorporation_Call {
	return &mockReuseStore_PutTrustCorporation_Call{Call: _e.mock.On("PutTrustCorporation", ctx, trustCorporation)}
}

func (_c *mockReuseStore_PutTrustCorporation_Call) Run(run func(ctx context.Context, trustCorporation donordata.TrustCorporation)) *mockReuseStore_PutTrustCorporation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(donordata.TrustCorporation))
	})
	return _c
}

func (_c *mockReuseStore_PutTrustCorporation_Call) Return(_a0 error) *mockReuseStore_PutTrustCorporation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockReuseStore_PutTrustCorporation_Call) RunAndReturn(run func(context.Context, donordata.TrustCorporation) error) *mockReuseStore_PutTrustCorporation_Call {
	_c.Call.Return(run)
	return _c
}

// TrustCorporations provides a mock function with given fields: ctx
func (_m *mockReuseStore) TrustCorporations(ctx context.Context) ([]donordata.TrustCorporation, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TrustCorporations")
	}

	var r0 []donordata.TrustCorporation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]donordata.TrustCorporation, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []donordata.TrustCorporation); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.TrustCorporation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockReuseStore_TrustCorporations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TrustCorporations'
type mockReuseStore_TrustCorporations_Call struct {
	*mock.Call
}

// TrustCorporations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockReuseStore_Expecter) TrustCorporations(ctx interface{}) *mockReuseStore_TrustCorporations_Call {
	return &mockReuseStore_TrustCorporations_Call{Call: _e.mock.On("TrustCorporations", ctx)}
}

func (_c *mockReuseStore_TrustCorporations_Call) Run(run func(ctx context.Context)) *mockReuseStore_TrustCorporations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockReuseStore_TrustCorporations_Call) Return(_a0 []donordata.TrustCorporation, _a1 error) *mockReuseStore_TrustCorporations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockReuseStore_TrustCorporations_Call) RunAndReturn(run func(context.Context) ([]donordata.TrustCorporation, error)) *mockReuseStore_TrustCorporations_Call {
	_c.Call.Return(run)
	return _c
}

// newMockReuseStore creates a new instance of mockReuseStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockReuseStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockReuseStore {
	mock := &mockReuseStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
