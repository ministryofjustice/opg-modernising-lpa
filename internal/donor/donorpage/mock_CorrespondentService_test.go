// Code generated by mockery. DO NOT EDIT.

package donorpage

import (
	context "context"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"
	mock "github.com/stretchr/testify/mock"
)

// mockCorrespondentService is an autogenerated mock type for the CorrespondentService type
type mockCorrespondentService struct {
	mock.Mock
}

type mockCorrespondentService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCorrespondentService) EXPECT() *mockCorrespondentService_Expecter {
	return &mockCorrespondentService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, provided
func (_m *mockCorrespondentService) Delete(ctx context.Context, provided *donordata.Provided) error {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) error); ok {
		r0 = rf(ctx, provided)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCorrespondentService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockCorrespondentService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockCorrespondentService_Expecter) Delete(ctx interface{}, provided interface{}) *mockCorrespondentService_Delete_Call {
	return &mockCorrespondentService_Delete_Call{Call: _e.mock.On("Delete", ctx, provided)}
}

func (_c *mockCorrespondentService_Delete_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockCorrespondentService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockCorrespondentService_Delete_Call) Return(_a0 error) *mockCorrespondentService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCorrespondentService_Delete_Call) RunAndReturn(run func(context.Context, *donordata.Provided) error) *mockCorrespondentService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// NotWanted provides a mock function with given fields: ctx, provided
func (_m *mockCorrespondentService) NotWanted(ctx context.Context, provided *donordata.Provided) error {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for NotWanted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) error); ok {
		r0 = rf(ctx, provided)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCorrespondentService_NotWanted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotWanted'
type mockCorrespondentService_NotWanted_Call struct {
	*mock.Call
}

// NotWanted is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockCorrespondentService_Expecter) NotWanted(ctx interface{}, provided interface{}) *mockCorrespondentService_NotWanted_Call {
	return &mockCorrespondentService_NotWanted_Call{Call: _e.mock.On("NotWanted", ctx, provided)}
}

func (_c *mockCorrespondentService_NotWanted_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockCorrespondentService_NotWanted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockCorrespondentService_NotWanted_Call) Return(_a0 error) *mockCorrespondentService_NotWanted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCorrespondentService_NotWanted_Call) RunAndReturn(run func(context.Context, *donordata.Provided) error) *mockCorrespondentService_NotWanted_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, provided
func (_m *mockCorrespondentService) Put(ctx context.Context, provided *donordata.Provided) error {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) error); ok {
		r0 = rf(ctx, provided)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCorrespondentService_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockCorrespondentService_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockCorrespondentService_Expecter) Put(ctx interface{}, provided interface{}) *mockCorrespondentService_Put_Call {
	return &mockCorrespondentService_Put_Call{Call: _e.mock.On("Put", ctx, provided)}
}

func (_c *mockCorrespondentService_Put_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockCorrespondentService_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockCorrespondentService_Put_Call) Return(_a0 error) *mockCorrespondentService_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCorrespondentService_Put_Call) RunAndReturn(run func(context.Context, *donordata.Provided) error) *mockCorrespondentService_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Reusable provides a mock function with given fields: ctx
func (_m *mockCorrespondentService) Reusable(ctx context.Context) ([]donordata.Correspondent, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reusable")
	}

	var r0 []donordata.Correspondent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]donordata.Correspondent, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []donordata.Correspondent); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.Correspondent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockCorrespondentService_Reusable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reusable'
type mockCorrespondentService_Reusable_Call struct {
	*mock.Call
}

// Reusable is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockCorrespondentService_Expecter) Reusable(ctx interface{}) *mockCorrespondentService_Reusable_Call {
	return &mockCorrespondentService_Reusable_Call{Call: _e.mock.On("Reusable", ctx)}
}

func (_c *mockCorrespondentService_Reusable_Call) Run(run func(ctx context.Context)) *mockCorrespondentService_Reusable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockCorrespondentService_Reusable_Call) Return(_a0 []donordata.Correspondent, _a1 error) *mockCorrespondentService_Reusable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockCorrespondentService_Reusable_Call) RunAndReturn(run func(context.Context) ([]donordata.Correspondent, error)) *mockCorrespondentService_Reusable_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCorrespondentService creates a new instance of mockCorrespondentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCorrespondentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCorrespondentService {
	mock := &mockCorrespondentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
