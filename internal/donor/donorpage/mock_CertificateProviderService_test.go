// Code generated by mockery. DO NOT EDIT.

package donorpage

import (
	context "context"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"
	mock "github.com/stretchr/testify/mock"
)

// mockCertificateProviderService is an autogenerated mock type for the CertificateProviderService type
type mockCertificateProviderService struct {
	mock.Mock
}

type mockCertificateProviderService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCertificateProviderService) EXPECT() *mockCertificateProviderService_Expecter {
	return &mockCertificateProviderService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, provided
func (_m *mockCertificateProviderService) Delete(ctx context.Context, provided *donordata.Provided) error {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) error); ok {
		r0 = rf(ctx, provided)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCertificateProviderService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockCertificateProviderService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockCertificateProviderService_Expecter) Delete(ctx interface{}, provided interface{}) *mockCertificateProviderService_Delete_Call {
	return &mockCertificateProviderService_Delete_Call{Call: _e.mock.On("Delete", ctx, provided)}
}

func (_c *mockCertificateProviderService_Delete_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockCertificateProviderService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockCertificateProviderService_Delete_Call) Return(_a0 error) *mockCertificateProviderService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCertificateProviderService_Delete_Call) RunAndReturn(run func(context.Context, *donordata.Provided) error) *mockCertificateProviderService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, provided
func (_m *mockCertificateProviderService) Put(ctx context.Context, provided *donordata.Provided) error {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) error); ok {
		r0 = rf(ctx, provided)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCertificateProviderService_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockCertificateProviderService_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockCertificateProviderService_Expecter) Put(ctx interface{}, provided interface{}) *mockCertificateProviderService_Put_Call {
	return &mockCertificateProviderService_Put_Call{Call: _e.mock.On("Put", ctx, provided)}
}

func (_c *mockCertificateProviderService_Put_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockCertificateProviderService_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockCertificateProviderService_Put_Call) Return(_a0 error) *mockCertificateProviderService_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCertificateProviderService_Put_Call) RunAndReturn(run func(context.Context, *donordata.Provided) error) *mockCertificateProviderService_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Reusable provides a mock function with given fields: ctx
func (_m *mockCertificateProviderService) Reusable(ctx context.Context) ([]donordata.CertificateProvider, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reusable")
	}

	var r0 []donordata.CertificateProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]donordata.CertificateProvider, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []donordata.CertificateProvider); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.CertificateProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockCertificateProviderService_Reusable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reusable'
type mockCertificateProviderService_Reusable_Call struct {
	*mock.Call
}

// Reusable is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockCertificateProviderService_Expecter) Reusable(ctx interface{}) *mockCertificateProviderService_Reusable_Call {
	return &mockCertificateProviderService_Reusable_Call{Call: _e.mock.On("Reusable", ctx)}
}

func (_c *mockCertificateProviderService_Reusable_Call) Run(run func(ctx context.Context)) *mockCertificateProviderService_Reusable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockCertificateProviderService_Reusable_Call) Return(_a0 []donordata.CertificateProvider, _a1 error) *mockCertificateProviderService_Reusable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockCertificateProviderService_Reusable_Call) RunAndReturn(run func(context.Context) ([]donordata.CertificateProvider, error)) *mockCertificateProviderService_Reusable_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCertificateProviderService creates a new instance of mockCertificateProviderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCertificateProviderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCertificateProviderService {
	mock := &mockCertificateProviderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
