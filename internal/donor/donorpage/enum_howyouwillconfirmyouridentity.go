// Code generated by "enumerator -type howYouWillConfirmYourIdentity -empty -trimprefix"; DO NOT EDIT.

package donorpage

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[howYouWillConfirmYourIdentityAtPostOffice-1]
	_ = x[howYouWillConfirmYourIdentityPostOfficeSuccessfully-2]
	_ = x[howYouWillConfirmYourIdentityOneLogin-3]
	_ = x[howYouWillConfirmYourIdentityWithdraw-4]
}

const _howYouWillConfirmYourIdentity_name = "AtPostOfficePostOfficeSuccessfullyOneLoginWithdraw"

var _howYouWillConfirmYourIdentity_index = [...]uint8{0, 12, 34, 42, 50}

func (i howYouWillConfirmYourIdentity) String() string {
	if i == 0 {
		return ""
	}
	i -= 1
	if i >= howYouWillConfirmYourIdentity(len(_howYouWillConfirmYourIdentity_index)-1) {
		return "howYouWillConfirmYourIdentity(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _howYouWillConfirmYourIdentity_name[_howYouWillConfirmYourIdentity_index[i]:_howYouWillConfirmYourIdentity_index[i+1]]
}

func (i howYouWillConfirmYourIdentity) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *howYouWillConfirmYourIdentity) UnmarshalText(text []byte) error {
	val, err := ParseHowYouWillConfirmYourIdentity(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i howYouWillConfirmYourIdentity) IsAtPostOffice() bool {
	return i == howYouWillConfirmYourIdentityAtPostOffice
}

func (i howYouWillConfirmYourIdentity) IsPostOfficeSuccessfully() bool {
	return i == howYouWillConfirmYourIdentityPostOfficeSuccessfully
}

func (i howYouWillConfirmYourIdentity) IsOneLogin() bool {
	return i == howYouWillConfirmYourIdentityOneLogin
}

func (i howYouWillConfirmYourIdentity) IsWithdraw() bool {
	return i == howYouWillConfirmYourIdentityWithdraw
}

func ParseHowYouWillConfirmYourIdentity(s string) (howYouWillConfirmYourIdentity, error) {
	switch s {
	case "":
		return howYouWillConfirmYourIdentity(0), nil
	case "AtPostOffice":
		return howYouWillConfirmYourIdentityAtPostOffice, nil
	case "PostOfficeSuccessfully":
		return howYouWillConfirmYourIdentityPostOfficeSuccessfully, nil
	case "OneLogin":
		return howYouWillConfirmYourIdentityOneLogin, nil
	case "Withdraw":
		return howYouWillConfirmYourIdentityWithdraw, nil
	default:
		return howYouWillConfirmYourIdentity(0), fmt.Errorf("invalid howYouWillConfirmYourIdentity '%s'", s)
	}
}

type howYouWillConfirmYourIdentityOptions struct {
	AtPostOffice           howYouWillConfirmYourIdentity
	PostOfficeSuccessfully howYouWillConfirmYourIdentity
	OneLogin               howYouWillConfirmYourIdentity
	Withdraw               howYouWillConfirmYourIdentity
}

var howYouWillConfirmYourIdentityValues = howYouWillConfirmYourIdentityOptions{
	AtPostOffice:           howYouWillConfirmYourIdentityAtPostOffice,
	PostOfficeSuccessfully: howYouWillConfirmYourIdentityPostOfficeSuccessfully,
	OneLogin:               howYouWillConfirmYourIdentityOneLogin,
	Withdraw:               howYouWillConfirmYourIdentityWithdraw,
}

func (i howYouWillConfirmYourIdentity) Empty() bool {
	return i == howYouWillConfirmYourIdentity(0)
}
