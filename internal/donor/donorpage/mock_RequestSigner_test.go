// Code generated by mockery v2.46.1. DO NOT EDIT.

package donorpage

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// mockRequestSigner is an autogenerated mock type for the RequestSigner type
type mockRequestSigner struct {
	mock.Mock
}

type mockRequestSigner_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRequestSigner) EXPECT() *mockRequestSigner_Expecter {
	return &mockRequestSigner_Expecter{mock: &_m.Mock}
}

// Sign provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockRequestSigner) Sign(_a0 context.Context, _a1 *http.Request, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRequestSigner_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type mockRequestSigner_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *http.Request
//   - _a2 string
func (_e *mockRequestSigner_Expecter) Sign(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockRequestSigner_Sign_Call {
	return &mockRequestSigner_Sign_Call{Call: _e.mock.On("Sign", _a0, _a1, _a2)}
}

func (_c *mockRequestSigner_Sign_Call) Run(run func(_a0 context.Context, _a1 *http.Request, _a2 string)) *mockRequestSigner_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*http.Request), args[2].(string))
	})
	return _c
}

func (_c *mockRequestSigner_Sign_Call) Return(_a0 error) *mockRequestSigner_Sign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRequestSigner_Sign_Call) RunAndReturn(run func(context.Context, *http.Request, string) error) *mockRequestSigner_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// newMockRequestSigner creates a new instance of mockRequestSigner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRequestSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRequestSigner {
	mock := &mockRequestSigner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
