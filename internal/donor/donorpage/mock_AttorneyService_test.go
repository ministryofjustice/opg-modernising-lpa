// Code generated by mockery. DO NOT EDIT.

package donorpage

import (
	context "context"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"
	form "github.com/ministryofjustice/opg-modernising-lpa/internal/form"

	mock "github.com/stretchr/testify/mock"
)

// mockAttorneyService is an autogenerated mock type for the AttorneyService type
type mockAttorneyService struct {
	mock.Mock
}

type mockAttorneyService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAttorneyService) EXPECT() *mockAttorneyService_Expecter {
	return &mockAttorneyService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, provided, attorney
func (_m *mockAttorneyService) Delete(ctx context.Context, provided *donordata.Provided, attorney donordata.Attorney) error {
	ret := _m.Called(ctx, provided, attorney)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, donordata.Attorney) error); ok {
		r0 = rf(ctx, provided, attorney)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAttorneyService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockAttorneyService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
//   - attorney donordata.Attorney
func (_e *mockAttorneyService_Expecter) Delete(ctx interface{}, provided interface{}, attorney interface{}) *mockAttorneyService_Delete_Call {
	return &mockAttorneyService_Delete_Call{Call: _e.mock.On("Delete", ctx, provided, attorney)}
}

func (_c *mockAttorneyService_Delete_Call) Run(run func(ctx context.Context, provided *donordata.Provided, attorney donordata.Attorney)) *mockAttorneyService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided), args[2].(donordata.Attorney))
	})
	return _c
}

func (_c *mockAttorneyService_Delete_Call) Return(_a0 error) *mockAttorneyService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAttorneyService_Delete_Call) RunAndReturn(run func(context.Context, *donordata.Provided, donordata.Attorney) error) *mockAttorneyService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTrustCorporation provides a mock function with given fields: ctx, provided
func (_m *mockAttorneyService) DeleteTrustCorporation(ctx context.Context, provided *donordata.Provided) error {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrustCorporation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) error); ok {
		r0 = rf(ctx, provided)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAttorneyService_DeleteTrustCorporation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTrustCorporation'
type mockAttorneyService_DeleteTrustCorporation_Call struct {
	*mock.Call
}

// DeleteTrustCorporation is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockAttorneyService_Expecter) DeleteTrustCorporation(ctx interface{}, provided interface{}) *mockAttorneyService_DeleteTrustCorporation_Call {
	return &mockAttorneyService_DeleteTrustCorporation_Call{Call: _e.mock.On("DeleteTrustCorporation", ctx, provided)}
}

func (_c *mockAttorneyService_DeleteTrustCorporation_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockAttorneyService_DeleteTrustCorporation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockAttorneyService_DeleteTrustCorporation_Call) Return(_a0 error) *mockAttorneyService_DeleteTrustCorporation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAttorneyService_DeleteTrustCorporation_Call) RunAndReturn(run func(context.Context, *donordata.Provided) error) *mockAttorneyService_DeleteTrustCorporation_Call {
	_c.Call.Return(run)
	return _c
}

// IsReplacement provides a mock function with no fields
func (_m *mockAttorneyService) IsReplacement() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsReplacement")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockAttorneyService_IsReplacement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsReplacement'
type mockAttorneyService_IsReplacement_Call struct {
	*mock.Call
}

// IsReplacement is a helper method to define mock.On call
func (_e *mockAttorneyService_Expecter) IsReplacement() *mockAttorneyService_IsReplacement_Call {
	return &mockAttorneyService_IsReplacement_Call{Call: _e.mock.On("IsReplacement")}
}

func (_c *mockAttorneyService_IsReplacement_Call) Run(run func()) *mockAttorneyService_IsReplacement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockAttorneyService_IsReplacement_Call) Return(_a0 bool) *mockAttorneyService_IsReplacement_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAttorneyService_IsReplacement_Call) RunAndReturn(run func() bool) *mockAttorneyService_IsReplacement_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, provided, attorney
func (_m *mockAttorneyService) Put(ctx context.Context, provided *donordata.Provided, attorney donordata.Attorney) error {
	ret := _m.Called(ctx, provided, attorney)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, donordata.Attorney) error); ok {
		r0 = rf(ctx, provided, attorney)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAttorneyService_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockAttorneyService_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
//   - attorney donordata.Attorney
func (_e *mockAttorneyService_Expecter) Put(ctx interface{}, provided interface{}, attorney interface{}) *mockAttorneyService_Put_Call {
	return &mockAttorneyService_Put_Call{Call: _e.mock.On("Put", ctx, provided, attorney)}
}

func (_c *mockAttorneyService_Put_Call) Run(run func(ctx context.Context, provided *donordata.Provided, attorney donordata.Attorney)) *mockAttorneyService_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided), args[2].(donordata.Attorney))
	})
	return _c
}

func (_c *mockAttorneyService_Put_Call) Return(_a0 error) *mockAttorneyService_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAttorneyService_Put_Call) RunAndReturn(run func(context.Context, *donordata.Provided, donordata.Attorney) error) *mockAttorneyService_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutMany provides a mock function with given fields: ctx, provided, attorneys
func (_m *mockAttorneyService) PutMany(ctx context.Context, provided *donordata.Provided, attorneys []donordata.Attorney) error {
	ret := _m.Called(ctx, provided, attorneys)

	if len(ret) == 0 {
		panic("no return value specified for PutMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, []donordata.Attorney) error); ok {
		r0 = rf(ctx, provided, attorneys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAttorneyService_PutMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMany'
type mockAttorneyService_PutMany_Call struct {
	*mock.Call
}

// PutMany is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
//   - attorneys []donordata.Attorney
func (_e *mockAttorneyService_Expecter) PutMany(ctx interface{}, provided interface{}, attorneys interface{}) *mockAttorneyService_PutMany_Call {
	return &mockAttorneyService_PutMany_Call{Call: _e.mock.On("PutMany", ctx, provided, attorneys)}
}

func (_c *mockAttorneyService_PutMany_Call) Run(run func(ctx context.Context, provided *donordata.Provided, attorneys []donordata.Attorney)) *mockAttorneyService_PutMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided), args[2].([]donordata.Attorney))
	})
	return _c
}

func (_c *mockAttorneyService_PutMany_Call) Return(_a0 error) *mockAttorneyService_PutMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAttorneyService_PutMany_Call) RunAndReturn(run func(context.Context, *donordata.Provided, []donordata.Attorney) error) *mockAttorneyService_PutMany_Call {
	_c.Call.Return(run)
	return _c
}

// PutTrustCorporation provides a mock function with given fields: ctx, provided, trustCorporation
func (_m *mockAttorneyService) PutTrustCorporation(ctx context.Context, provided *donordata.Provided, trustCorporation donordata.TrustCorporation) error {
	ret := _m.Called(ctx, provided, trustCorporation)

	if len(ret) == 0 {
		panic("no return value specified for PutTrustCorporation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, donordata.TrustCorporation) error); ok {
		r0 = rf(ctx, provided, trustCorporation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAttorneyService_PutTrustCorporation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutTrustCorporation'
type mockAttorneyService_PutTrustCorporation_Call struct {
	*mock.Call
}

// PutTrustCorporation is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
//   - trustCorporation donordata.TrustCorporation
func (_e *mockAttorneyService_Expecter) PutTrustCorporation(ctx interface{}, provided interface{}, trustCorporation interface{}) *mockAttorneyService_PutTrustCorporation_Call {
	return &mockAttorneyService_PutTrustCorporation_Call{Call: _e.mock.On("PutTrustCorporation", ctx, provided, trustCorporation)}
}

func (_c *mockAttorneyService_PutTrustCorporation_Call) Run(run func(ctx context.Context, provided *donordata.Provided, trustCorporation donordata.TrustCorporation)) *mockAttorneyService_PutTrustCorporation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided), args[2].(donordata.TrustCorporation))
	})
	return _c
}

func (_c *mockAttorneyService_PutTrustCorporation_Call) Return(_a0 error) *mockAttorneyService_PutTrustCorporation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAttorneyService_PutTrustCorporation_Call) RunAndReturn(run func(context.Context, *donordata.Provided, donordata.TrustCorporation) error) *mockAttorneyService_PutTrustCorporation_Call {
	_c.Call.Return(run)
	return _c
}

// Reusable provides a mock function with given fields: ctx, provided
func (_m *mockAttorneyService) Reusable(ctx context.Context, provided *donordata.Provided) ([]donordata.Attorney, error) {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for Reusable")
	}

	var r0 []donordata.Attorney
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) ([]donordata.Attorney, error)); ok {
		return rf(ctx, provided)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) []donordata.Attorney); ok {
		r0 = rf(ctx, provided)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.Attorney)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *donordata.Provided) error); ok {
		r1 = rf(ctx, provided)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAttorneyService_Reusable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reusable'
type mockAttorneyService_Reusable_Call struct {
	*mock.Call
}

// Reusable is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockAttorneyService_Expecter) Reusable(ctx interface{}, provided interface{}) *mockAttorneyService_Reusable_Call {
	return &mockAttorneyService_Reusable_Call{Call: _e.mock.On("Reusable", ctx, provided)}
}

func (_c *mockAttorneyService_Reusable_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockAttorneyService_Reusable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockAttorneyService_Reusable_Call) Return(_a0 []donordata.Attorney, _a1 error) *mockAttorneyService_Reusable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAttorneyService_Reusable_Call) RunAndReturn(run func(context.Context, *donordata.Provided) ([]donordata.Attorney, error)) *mockAttorneyService_Reusable_Call {
	_c.Call.Return(run)
	return _c
}

// ReusableTrustCorporations provides a mock function with given fields: ctx, provided
func (_m *mockAttorneyService) ReusableTrustCorporations(ctx context.Context, provided *donordata.Provided) ([]donordata.TrustCorporation, error) {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for ReusableTrustCorporations")
	}

	var r0 []donordata.TrustCorporation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) ([]donordata.TrustCorporation, error)); ok {
		return rf(ctx, provided)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) []donordata.TrustCorporation); ok {
		r0 = rf(ctx, provided)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.TrustCorporation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *donordata.Provided) error); ok {
		r1 = rf(ctx, provided)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAttorneyService_ReusableTrustCorporations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReusableTrustCorporations'
type mockAttorneyService_ReusableTrustCorporations_Call struct {
	*mock.Call
}

// ReusableTrustCorporations is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockAttorneyService_Expecter) ReusableTrustCorporations(ctx interface{}, provided interface{}) *mockAttorneyService_ReusableTrustCorporations_Call {
	return &mockAttorneyService_ReusableTrustCorporations_Call{Call: _e.mock.On("ReusableTrustCorporations", ctx, provided)}
}

func (_c *mockAttorneyService_ReusableTrustCorporations_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockAttorneyService_ReusableTrustCorporations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockAttorneyService_ReusableTrustCorporations_Call) Return(_a0 []donordata.TrustCorporation, _a1 error) *mockAttorneyService_ReusableTrustCorporations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAttorneyService_ReusableTrustCorporations_Call) RunAndReturn(run func(context.Context, *donordata.Provided) ([]donordata.TrustCorporation, error)) *mockAttorneyService_ReusableTrustCorporations_Call {
	_c.Call.Return(run)
	return _c
}

// WantReplacements provides a mock function with given fields: ctx, provided, yesNo
func (_m *mockAttorneyService) WantReplacements(ctx context.Context, provided *donordata.Provided, yesNo form.YesNo) error {
	ret := _m.Called(ctx, provided, yesNo)

	if len(ret) == 0 {
		panic("no return value specified for WantReplacements")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, form.YesNo) error); ok {
		r0 = rf(ctx, provided, yesNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAttorneyService_WantReplacements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WantReplacements'
type mockAttorneyService_WantReplacements_Call struct {
	*mock.Call
}

// WantReplacements is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
//   - yesNo form.YesNo
func (_e *mockAttorneyService_Expecter) WantReplacements(ctx interface{}, provided interface{}, yesNo interface{}) *mockAttorneyService_WantReplacements_Call {
	return &mockAttorneyService_WantReplacements_Call{Call: _e.mock.On("WantReplacements", ctx, provided, yesNo)}
}

func (_c *mockAttorneyService_WantReplacements_Call) Run(run func(ctx context.Context, provided *donordata.Provided, yesNo form.YesNo)) *mockAttorneyService_WantReplacements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided), args[2].(form.YesNo))
	})
	return _c
}

func (_c *mockAttorneyService_WantReplacements_Call) Return(_a0 error) *mockAttorneyService_WantReplacements_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAttorneyService_WantReplacements_Call) RunAndReturn(run func(context.Context, *donordata.Provided, form.YesNo) error) *mockAttorneyService_WantReplacements_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAttorneyService creates a new instance of mockAttorneyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAttorneyService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAttorneyService {
	mock := &mockAttorneyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
