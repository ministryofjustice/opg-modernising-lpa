// Code generated by mockery. DO NOT EDIT.

package donorpage

import (
	context "context"

	appcontext "github.com/ministryofjustice/opg-modernising-lpa/internal/appcontext"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"

	mock "github.com/stretchr/testify/mock"
)

// mockAccessCodeSender is an autogenerated mock type for the AccessCodeSender type
type mockAccessCodeSender struct {
	mock.Mock
}

type mockAccessCodeSender_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAccessCodeSender) EXPECT() *mockAccessCodeSender_Expecter {
	return &mockAccessCodeSender_Expecter{mock: &_m.Mock}
}

// SendCertificateProviderInvite provides a mock function with given fields: ctx, appData, provided
func (_m *mockAccessCodeSender) SendCertificateProviderInvite(ctx context.Context, appData appcontext.Data, provided *donordata.Provided) error {
	ret := _m.Called(ctx, appData, provided)

	if len(ret) == 0 {
		panic("no return value specified for SendCertificateProviderInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, appcontext.Data, *donordata.Provided) error); ok {
		r0 = rf(ctx, appData, provided)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAccessCodeSender_SendCertificateProviderInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCertificateProviderInvite'
type mockAccessCodeSender_SendCertificateProviderInvite_Call struct {
	*mock.Call
}

// SendCertificateProviderInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - appData appcontext.Data
//   - provided *donordata.Provided
func (_e *mockAccessCodeSender_Expecter) SendCertificateProviderInvite(ctx interface{}, appData interface{}, provided interface{}) *mockAccessCodeSender_SendCertificateProviderInvite_Call {
	return &mockAccessCodeSender_SendCertificateProviderInvite_Call{Call: _e.mock.On("SendCertificateProviderInvite", ctx, appData, provided)}
}

func (_c *mockAccessCodeSender_SendCertificateProviderInvite_Call) Run(run func(ctx context.Context, appData appcontext.Data, provided *donordata.Provided)) *mockAccessCodeSender_SendCertificateProviderInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(appcontext.Data), args[2].(*donordata.Provided))
	})
	return _c
}

func (_c *mockAccessCodeSender_SendCertificateProviderInvite_Call) Return(_a0 error) *mockAccessCodeSender_SendCertificateProviderInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAccessCodeSender_SendCertificateProviderInvite_Call) RunAndReturn(run func(context.Context, appcontext.Data, *donordata.Provided) error) *mockAccessCodeSender_SendCertificateProviderInvite_Call {
	_c.Call.Return(run)
	return _c
}

// SendCertificateProviderPrompt provides a mock function with given fields: ctx, appData, provided
func (_m *mockAccessCodeSender) SendCertificateProviderPrompt(ctx context.Context, appData appcontext.Data, provided *donordata.Provided) error {
	ret := _m.Called(ctx, appData, provided)

	if len(ret) == 0 {
		panic("no return value specified for SendCertificateProviderPrompt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, appcontext.Data, *donordata.Provided) error); ok {
		r0 = rf(ctx, appData, provided)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAccessCodeSender_SendCertificateProviderPrompt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCertificateProviderPrompt'
type mockAccessCodeSender_SendCertificateProviderPrompt_Call struct {
	*mock.Call
}

// SendCertificateProviderPrompt is a helper method to define mock.On call
//   - ctx context.Context
//   - appData appcontext.Data
//   - provided *donordata.Provided
func (_e *mockAccessCodeSender_Expecter) SendCertificateProviderPrompt(ctx interface{}, appData interface{}, provided interface{}) *mockAccessCodeSender_SendCertificateProviderPrompt_Call {
	return &mockAccessCodeSender_SendCertificateProviderPrompt_Call{Call: _e.mock.On("SendCertificateProviderPrompt", ctx, appData, provided)}
}

func (_c *mockAccessCodeSender_SendCertificateProviderPrompt_Call) Run(run func(ctx context.Context, appData appcontext.Data, provided *donordata.Provided)) *mockAccessCodeSender_SendCertificateProviderPrompt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(appcontext.Data), args[2].(*donordata.Provided))
	})
	return _c
}

func (_c *mockAccessCodeSender_SendCertificateProviderPrompt_Call) Return(_a0 error) *mockAccessCodeSender_SendCertificateProviderPrompt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAccessCodeSender_SendCertificateProviderPrompt_Call) RunAndReturn(run func(context.Context, appcontext.Data, *donordata.Provided) error) *mockAccessCodeSender_SendCertificateProviderPrompt_Call {
	_c.Call.Return(run)
	return _c
}

// SendVoucherAccessCode provides a mock function with given fields: ctx, donor, appData
func (_m *mockAccessCodeSender) SendVoucherAccessCode(ctx context.Context, donor *donordata.Provided, appData appcontext.Data) error {
	ret := _m.Called(ctx, donor, appData)

	if len(ret) == 0 {
		panic("no return value specified for SendVoucherAccessCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, appcontext.Data) error); ok {
		r0 = rf(ctx, donor, appData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAccessCodeSender_SendVoucherAccessCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVoucherAccessCode'
type mockAccessCodeSender_SendVoucherAccessCode_Call struct {
	*mock.Call
}

// SendVoucherAccessCode is a helper method to define mock.On call
//   - ctx context.Context
//   - donor *donordata.Provided
//   - appData appcontext.Data
func (_e *mockAccessCodeSender_Expecter) SendVoucherAccessCode(ctx interface{}, donor interface{}, appData interface{}) *mockAccessCodeSender_SendVoucherAccessCode_Call {
	return &mockAccessCodeSender_SendVoucherAccessCode_Call{Call: _e.mock.On("SendVoucherAccessCode", ctx, donor, appData)}
}

func (_c *mockAccessCodeSender_SendVoucherAccessCode_Call) Run(run func(ctx context.Context, donor *donordata.Provided, appData appcontext.Data)) *mockAccessCodeSender_SendVoucherAccessCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided), args[2].(appcontext.Data))
	})
	return _c
}

func (_c *mockAccessCodeSender_SendVoucherAccessCode_Call) Return(_a0 error) *mockAccessCodeSender_SendVoucherAccessCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAccessCodeSender_SendVoucherAccessCode_Call) RunAndReturn(run func(context.Context, *donordata.Provided, appcontext.Data) error) *mockAccessCodeSender_SendVoucherAccessCode_Call {
	_c.Call.Return(run)
	return _c
}

// SendVoucherInvite provides a mock function with given fields: ctx, donor, appData
func (_m *mockAccessCodeSender) SendVoucherInvite(ctx context.Context, donor *donordata.Provided, appData appcontext.Data) error {
	ret := _m.Called(ctx, donor, appData)

	if len(ret) == 0 {
		panic("no return value specified for SendVoucherInvite")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, appcontext.Data) error); ok {
		r0 = rf(ctx, donor, appData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockAccessCodeSender_SendVoucherInvite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVoucherInvite'
type mockAccessCodeSender_SendVoucherInvite_Call struct {
	*mock.Call
}

// SendVoucherInvite is a helper method to define mock.On call
//   - ctx context.Context
//   - donor *donordata.Provided
//   - appData appcontext.Data
func (_e *mockAccessCodeSender_Expecter) SendVoucherInvite(ctx interface{}, donor interface{}, appData interface{}) *mockAccessCodeSender_SendVoucherInvite_Call {
	return &mockAccessCodeSender_SendVoucherInvite_Call{Call: _e.mock.On("SendVoucherInvite", ctx, donor, appData)}
}

func (_c *mockAccessCodeSender_SendVoucherInvite_Call) Run(run func(ctx context.Context, donor *donordata.Provided, appData appcontext.Data)) *mockAccessCodeSender_SendVoucherInvite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided), args[2].(appcontext.Data))
	})
	return _c
}

func (_c *mockAccessCodeSender_SendVoucherInvite_Call) Return(_a0 error) *mockAccessCodeSender_SendVoucherInvite_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockAccessCodeSender_SendVoucherInvite_Call) RunAndReturn(run func(context.Context, *donordata.Provided, appcontext.Data) error) *mockAccessCodeSender_SendVoucherInvite_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAccessCodeSender creates a new instance of mockAccessCodeSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAccessCodeSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAccessCodeSender {
	mock := &mockAccessCodeSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
