// Code generated by mockery. DO NOT EDIT.

package donorpage

import (
	context "context"

	actoruid "github.com/ministryofjustice/opg-modernising-lpa/internal/actor/actoruid"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"

	form "github.com/ministryofjustice/opg-modernising-lpa/internal/form"

	mock "github.com/stretchr/testify/mock"
)

// mockPeopleToNotifyService is an autogenerated mock type for the PeopleToNotifyService type
type mockPeopleToNotifyService struct {
	mock.Mock
}

type mockPeopleToNotifyService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockPeopleToNotifyService) EXPECT() *mockPeopleToNotifyService_Expecter {
	return &mockPeopleToNotifyService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, provided, person
func (_m *mockPeopleToNotifyService) Delete(ctx context.Context, provided *donordata.Provided, person donordata.PersonToNotify) error {
	ret := _m.Called(ctx, provided, person)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, donordata.PersonToNotify) error); ok {
		r0 = rf(ctx, provided, person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockPeopleToNotifyService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockPeopleToNotifyService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
//   - person donordata.PersonToNotify
func (_e *mockPeopleToNotifyService_Expecter) Delete(ctx interface{}, provided interface{}, person interface{}) *mockPeopleToNotifyService_Delete_Call {
	return &mockPeopleToNotifyService_Delete_Call{Call: _e.mock.On("Delete", ctx, provided, person)}
}

func (_c *mockPeopleToNotifyService_Delete_Call) Run(run func(ctx context.Context, provided *donordata.Provided, person donordata.PersonToNotify)) *mockPeopleToNotifyService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided), args[2].(donordata.PersonToNotify))
	})
	return _c
}

func (_c *mockPeopleToNotifyService_Delete_Call) Return(_a0 error) *mockPeopleToNotifyService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockPeopleToNotifyService_Delete_Call) RunAndReturn(run func(context.Context, *donordata.Provided, donordata.PersonToNotify) error) *mockPeopleToNotifyService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, provided, person
func (_m *mockPeopleToNotifyService) Put(ctx context.Context, provided *donordata.Provided, person donordata.PersonToNotify) (actoruid.UID, error) {
	ret := _m.Called(ctx, provided, person)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 actoruid.UID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, donordata.PersonToNotify) (actoruid.UID, error)); ok {
		return rf(ctx, provided, person)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, donordata.PersonToNotify) actoruid.UID); ok {
		r0 = rf(ctx, provided, person)
	} else {
		r0 = ret.Get(0).(actoruid.UID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *donordata.Provided, donordata.PersonToNotify) error); ok {
		r1 = rf(ctx, provided, person)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockPeopleToNotifyService_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockPeopleToNotifyService_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
//   - person donordata.PersonToNotify
func (_e *mockPeopleToNotifyService_Expecter) Put(ctx interface{}, provided interface{}, person interface{}) *mockPeopleToNotifyService_Put_Call {
	return &mockPeopleToNotifyService_Put_Call{Call: _e.mock.On("Put", ctx, provided, person)}
}

func (_c *mockPeopleToNotifyService_Put_Call) Run(run func(ctx context.Context, provided *donordata.Provided, person donordata.PersonToNotify)) *mockPeopleToNotifyService_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided), args[2].(donordata.PersonToNotify))
	})
	return _c
}

func (_c *mockPeopleToNotifyService_Put_Call) Return(_a0 actoruid.UID, _a1 error) *mockPeopleToNotifyService_Put_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockPeopleToNotifyService_Put_Call) RunAndReturn(run func(context.Context, *donordata.Provided, donordata.PersonToNotify) (actoruid.UID, error)) *mockPeopleToNotifyService_Put_Call {
	_c.Call.Return(run)
	return _c
}

// PutMany provides a mock function with given fields: ctx, provided, people
func (_m *mockPeopleToNotifyService) PutMany(ctx context.Context, provided *donordata.Provided, people []donordata.PersonToNotify) error {
	ret := _m.Called(ctx, provided, people)

	if len(ret) == 0 {
		panic("no return value specified for PutMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, []donordata.PersonToNotify) error); ok {
		r0 = rf(ctx, provided, people)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockPeopleToNotifyService_PutMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMany'
type mockPeopleToNotifyService_PutMany_Call struct {
	*mock.Call
}

// PutMany is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
//   - people []donordata.PersonToNotify
func (_e *mockPeopleToNotifyService_Expecter) PutMany(ctx interface{}, provided interface{}, people interface{}) *mockPeopleToNotifyService_PutMany_Call {
	return &mockPeopleToNotifyService_PutMany_Call{Call: _e.mock.On("PutMany", ctx, provided, people)}
}

func (_c *mockPeopleToNotifyService_PutMany_Call) Run(run func(ctx context.Context, provided *donordata.Provided, people []donordata.PersonToNotify)) *mockPeopleToNotifyService_PutMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided), args[2].([]donordata.PersonToNotify))
	})
	return _c
}

func (_c *mockPeopleToNotifyService_PutMany_Call) Return(_a0 error) *mockPeopleToNotifyService_PutMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockPeopleToNotifyService_PutMany_Call) RunAndReturn(run func(context.Context, *donordata.Provided, []donordata.PersonToNotify) error) *mockPeopleToNotifyService_PutMany_Call {
	_c.Call.Return(run)
	return _c
}

// Reusable provides a mock function with given fields: ctx, provided
func (_m *mockPeopleToNotifyService) Reusable(ctx context.Context, provided *donordata.Provided) ([]donordata.PersonToNotify, error) {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for Reusable")
	}

	var r0 []donordata.PersonToNotify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) ([]donordata.PersonToNotify, error)); ok {
		return rf(ctx, provided)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) []donordata.PersonToNotify); ok {
		r0 = rf(ctx, provided)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]donordata.PersonToNotify)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *donordata.Provided) error); ok {
		r1 = rf(ctx, provided)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockPeopleToNotifyService_Reusable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reusable'
type mockPeopleToNotifyService_Reusable_Call struct {
	*mock.Call
}

// Reusable is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockPeopleToNotifyService_Expecter) Reusable(ctx interface{}, provided interface{}) *mockPeopleToNotifyService_Reusable_Call {
	return &mockPeopleToNotifyService_Reusable_Call{Call: _e.mock.On("Reusable", ctx, provided)}
}

func (_c *mockPeopleToNotifyService_Reusable_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockPeopleToNotifyService_Reusable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockPeopleToNotifyService_Reusable_Call) Return(_a0 []donordata.PersonToNotify, _a1 error) *mockPeopleToNotifyService_Reusable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockPeopleToNotifyService_Reusable_Call) RunAndReturn(run func(context.Context, *donordata.Provided) ([]donordata.PersonToNotify, error)) *mockPeopleToNotifyService_Reusable_Call {
	_c.Call.Return(run)
	return _c
}

// WantPeopleToNotify provides a mock function with given fields: ctx, provided, yesNo
func (_m *mockPeopleToNotifyService) WantPeopleToNotify(ctx context.Context, provided *donordata.Provided, yesNo form.YesNo) error {
	ret := _m.Called(ctx, provided, yesNo)

	if len(ret) == 0 {
		panic("no return value specified for WantPeopleToNotify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided, form.YesNo) error); ok {
		r0 = rf(ctx, provided, yesNo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockPeopleToNotifyService_WantPeopleToNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WantPeopleToNotify'
type mockPeopleToNotifyService_WantPeopleToNotify_Call struct {
	*mock.Call
}

// WantPeopleToNotify is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
//   - yesNo form.YesNo
func (_e *mockPeopleToNotifyService_Expecter) WantPeopleToNotify(ctx interface{}, provided interface{}, yesNo interface{}) *mockPeopleToNotifyService_WantPeopleToNotify_Call {
	return &mockPeopleToNotifyService_WantPeopleToNotify_Call{Call: _e.mock.On("WantPeopleToNotify", ctx, provided, yesNo)}
}

func (_c *mockPeopleToNotifyService_WantPeopleToNotify_Call) Run(run func(ctx context.Context, provided *donordata.Provided, yesNo form.YesNo)) *mockPeopleToNotifyService_WantPeopleToNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided), args[2].(form.YesNo))
	})
	return _c
}

func (_c *mockPeopleToNotifyService_WantPeopleToNotify_Call) Return(_a0 error) *mockPeopleToNotifyService_WantPeopleToNotify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockPeopleToNotifyService_WantPeopleToNotify_Call) RunAndReturn(run func(context.Context, *donordata.Provided, form.YesNo) error) *mockPeopleToNotifyService_WantPeopleToNotify_Call {
	_c.Call.Return(run)
	return _c
}

// newMockPeopleToNotifyService creates a new instance of mockPeopleToNotifyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPeopleToNotifyService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPeopleToNotifyService {
	mock := &mockPeopleToNotifyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
