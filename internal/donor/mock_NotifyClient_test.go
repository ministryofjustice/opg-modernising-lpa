// Code generated by mockery. DO NOT EDIT.

package donor

import (
	context "context"

	notify "github.com/ministryofjustice/opg-modernising-lpa/internal/notify"
	mock "github.com/stretchr/testify/mock"
)

// mockNotifyClient is an autogenerated mock type for the NotifyClient type
type mockNotifyClient struct {
	mock.Mock
}

type mockNotifyClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockNotifyClient) EXPECT() *mockNotifyClient_Expecter {
	return &mockNotifyClient_Expecter{mock: &_m.Mock}
}

// SendActorSMS provides a mock function with given fields: _a0, to, lpaUID, sms
func (_m *mockNotifyClient) SendActorSMS(_a0 context.Context, to notify.ToMobile, lpaUID string, sms notify.SMS) error {
	ret := _m.Called(_a0, to, lpaUID, sms)

	if len(ret) == 0 {
		panic("no return value specified for SendActorSMS")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, notify.ToMobile, string, notify.SMS) error); ok {
		r0 = rf(_a0, to, lpaUID, sms)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockNotifyClient_SendActorSMS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendActorSMS'
type mockNotifyClient_SendActorSMS_Call struct {
	*mock.Call
}

// SendActorSMS is a helper method to define mock.On call
//   - _a0 context.Context
//   - to notify.ToMobile
//   - lpaUID string
//   - sms notify.SMS
func (_e *mockNotifyClient_Expecter) SendActorSMS(_a0 interface{}, to interface{}, lpaUID interface{}, sms interface{}) *mockNotifyClient_SendActorSMS_Call {
	return &mockNotifyClient_SendActorSMS_Call{Call: _e.mock.On("SendActorSMS", _a0, to, lpaUID, sms)}
}

func (_c *mockNotifyClient_SendActorSMS_Call) Run(run func(_a0 context.Context, to notify.ToMobile, lpaUID string, sms notify.SMS)) *mockNotifyClient_SendActorSMS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(notify.ToMobile), args[2].(string), args[3].(notify.SMS))
	})
	return _c
}

func (_c *mockNotifyClient_SendActorSMS_Call) Return(_a0 error) *mockNotifyClient_SendActorSMS_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockNotifyClient_SendActorSMS_Call) RunAndReturn(run func(context.Context, notify.ToMobile, string, notify.SMS) error) *mockNotifyClient_SendActorSMS_Call {
	_c.Call.Return(run)
	return _c
}

// newMockNotifyClient creates a new instance of mockNotifyClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockNotifyClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockNotifyClient {
	mock := &mockNotifyClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
