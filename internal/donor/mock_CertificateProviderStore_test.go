// Code generated by mockery v2.46.1. DO NOT EDIT.

package donor

import (
	context "context"

	certificateproviderdata "github.com/ministryofjustice/opg-modernising-lpa/internal/certificateprovider/certificateproviderdata"

	mock "github.com/stretchr/testify/mock"
)

// mockCertificateProviderStore is an autogenerated mock type for the CertificateProviderStore type
type mockCertificateProviderStore struct {
	mock.Mock
}

type mockCertificateProviderStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCertificateProviderStore) EXPECT() *mockCertificateProviderStore_Expecter {
	return &mockCertificateProviderStore_Expecter{mock: &_m.Mock}
}

// GetAny provides a mock function with given fields: _a0
func (_m *mockCertificateProviderStore) GetAny(_a0 context.Context) (*certificateproviderdata.Provided, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAny")
	}

	var r0 *certificateproviderdata.Provided
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*certificateproviderdata.Provided, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *certificateproviderdata.Provided); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificateproviderdata.Provided)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockCertificateProviderStore_GetAny_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAny'
type mockCertificateProviderStore_GetAny_Call struct {
	*mock.Call
}

// GetAny is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockCertificateProviderStore_Expecter) GetAny(_a0 interface{}) *mockCertificateProviderStore_GetAny_Call {
	return &mockCertificateProviderStore_GetAny_Call{Call: _e.mock.On("GetAny", _a0)}
}

func (_c *mockCertificateProviderStore_GetAny_Call) Run(run func(_a0 context.Context)) *mockCertificateProviderStore_GetAny_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockCertificateProviderStore_GetAny_Call) Return(_a0 *certificateproviderdata.Provided, _a1 error) *mockCertificateProviderStore_GetAny_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockCertificateProviderStore_GetAny_Call) RunAndReturn(run func(context.Context) (*certificateproviderdata.Provided, error)) *mockCertificateProviderStore_GetAny_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCertificateProviderStore creates a new instance of mockCertificateProviderStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCertificateProviderStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCertificateProviderStore {
	mock := &mockCertificateProviderStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
