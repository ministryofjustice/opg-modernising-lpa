// Code generated by "enumerator -type PreviousFee -empty -trimprefix"; DO NOT EDIT.

package pay

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PreviousFeeFull-1]
	_ = x[PreviousFeeHalf-2]
	_ = x[PreviousFeeExemption-3]
	_ = x[PreviousFeeHardship-4]
}

const _PreviousFee_name = "FullHalfExemptionHardship"

var _PreviousFee_index = [...]uint8{0, 4, 8, 17, 25}

func (i PreviousFee) String() string {
	if i == 0 {
		return ""
	}
	i -= 1
	if i >= PreviousFee(len(_PreviousFee_index)-1) {
		return "PreviousFee(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _PreviousFee_name[_PreviousFee_index[i]:_PreviousFee_index[i+1]]
}

func (i PreviousFee) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *PreviousFee) UnmarshalText(text []byte) error {
	val, err := ParsePreviousFee(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i PreviousFee) IsFull() bool {
	return i == PreviousFeeFull
}

func (i PreviousFee) IsHalf() bool {
	return i == PreviousFeeHalf
}

func (i PreviousFee) IsExemption() bool {
	return i == PreviousFeeExemption
}

func (i PreviousFee) IsHardship() bool {
	return i == PreviousFeeHardship
}

func ParsePreviousFee(s string) (PreviousFee, error) {
	switch s {
	case "":
		return PreviousFee(0), nil
	case "Full":
		return PreviousFeeFull, nil
	case "Half":
		return PreviousFeeHalf, nil
	case "Exemption":
		return PreviousFeeExemption, nil
	case "Hardship":
		return PreviousFeeHardship, nil
	default:
		return PreviousFee(0), fmt.Errorf("invalid PreviousFee '%s'", s)
	}
}

type PreviousFeeOptions struct {
	Full      PreviousFee
	Half      PreviousFee
	Exemption PreviousFee
	Hardship  PreviousFee
}

var PreviousFeeValues = PreviousFeeOptions{
	Full:      PreviousFeeFull,
	Half:      PreviousFeeHalf,
	Exemption: PreviousFeeExemption,
	Hardship:  PreviousFeeHardship,
}

func (i PreviousFee) Empty() bool {
	return i == PreviousFee(0)
}
