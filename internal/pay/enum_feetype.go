// Code generated by "enumerator -type FeeType"; DO NOT EDIT.
package pay

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FullFee-0]
	_ = x[HalfFee-1]
	_ = x[NoFee-2]
	_ = x[HardshipFee-3]
	_ = x[RepeatApplicationFee-4]
}

const _FeeType_name = "FullFeeHalfFeeNoFeeHardshipFeeRepeatApplicationFee"

var _FeeType_index = [...]uint8{0, 7, 14, 19, 30, 50}

func (i FeeType) String() string {
	if i >= FeeType(len(_FeeType_index)-1) {
		return "FeeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FeeType_name[_FeeType_index[i]:_FeeType_index[i+1]]
}

func (i FeeType) IsFullFee() bool {
	return i == FullFee
}

func (i FeeType) IsHalfFee() bool {
	return i == HalfFee
}

func (i FeeType) IsNoFee() bool {
	return i == NoFee
}

func (i FeeType) IsHardshipFee() bool {
	return i == HardshipFee
}

func (i FeeType) IsRepeatApplicationFee() bool {
	return i == RepeatApplicationFee
}

func ParseFeeType(s string) (FeeType, error) {
	switch s {
	case "FullFee":
		return FullFee, nil
	case "HalfFee":
		return HalfFee, nil
	case "NoFee":
		return NoFee, nil
	case "HardshipFee":
		return HardshipFee, nil
	case "RepeatApplicationFee":
		return RepeatApplicationFee, nil
	default:
		return FeeType(0), fmt.Errorf("invalid FeeType '%s'", s)
	}
}

type FeeTypeOptions struct {
	FullFee              FeeType
	HalfFee              FeeType
	NoFee                FeeType
	HardshipFee          FeeType
	RepeatApplicationFee FeeType
}

var FeeTypeValues = FeeTypeOptions{
	FullFee:              FullFee,
	HalfFee:              HalfFee,
	NoFee:                NoFee,
	HardshipFee:          HardshipFee,
	RepeatApplicationFee: RepeatApplicationFee,
}
