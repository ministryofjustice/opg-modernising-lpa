// Code generated by "enumerator -type ReturnCode --trimprefix"; DO NOT EDIT.

package onelogin

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ReturnCodeUnknown-0]
	_ = x[ReturnCodeA-1]
	_ = x[ReturnCodeD-2]
	_ = x[ReturnCodeN-3]
	_ = x[ReturnCodeP-4]
	_ = x[ReturnCodeT-5]
	_ = x[ReturnCodeV-6]
	_ = x[ReturnCodeX-7]
	_ = x[ReturnCodeZ-8]
}

const _ReturnCode_name = "UnknownADNPTVXZ"

var _ReturnCode_index = [...]uint8{0, 7, 8, 9, 10, 11, 12, 13, 14, 15}

func (i ReturnCode) String() string {
	if i >= ReturnCode(len(_ReturnCode_index)-1) {
		return "ReturnCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ReturnCode_name[_ReturnCode_index[i]:_ReturnCode_index[i+1]]
}

func (i ReturnCode) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *ReturnCode) UnmarshalText(text []byte) error {
	val, err := ParseReturnCode(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i ReturnCode) IsUnknown() bool {
	return i == ReturnCodeUnknown
}

func (i ReturnCode) IsA() bool {
	return i == ReturnCodeA
}

func (i ReturnCode) IsD() bool {
	return i == ReturnCodeD
}

func (i ReturnCode) IsN() bool {
	return i == ReturnCodeN
}

func (i ReturnCode) IsP() bool {
	return i == ReturnCodeP
}

func (i ReturnCode) IsT() bool {
	return i == ReturnCodeT
}

func (i ReturnCode) IsV() bool {
	return i == ReturnCodeV
}

func (i ReturnCode) IsX() bool {
	return i == ReturnCodeX
}

func (i ReturnCode) IsZ() bool {
	return i == ReturnCodeZ
}

func ParseReturnCode(s string) (ReturnCode, error) {
	switch s {
	case "Unknown":
		return ReturnCodeUnknown, nil
	case "A":
		return ReturnCodeA, nil
	case "D":
		return ReturnCodeD, nil
	case "N":
		return ReturnCodeN, nil
	case "P":
		return ReturnCodeP, nil
	case "T":
		return ReturnCodeT, nil
	case "V":
		return ReturnCodeV, nil
	case "X":
		return ReturnCodeX, nil
	case "Z":
		return ReturnCodeZ, nil
	default:
		return ReturnCode(0), fmt.Errorf("invalid ReturnCode '%s'", s)
	}
}

type ReturnCodeOptions struct {
	Unknown ReturnCode
	A       ReturnCode
	D       ReturnCode
	N       ReturnCode
	P       ReturnCode
	T       ReturnCode
	V       ReturnCode
	X       ReturnCode
	Z       ReturnCode
}

var ReturnCodeValues = ReturnCodeOptions{
	Unknown: ReturnCodeUnknown,
	A:       ReturnCodeA,
	D:       ReturnCodeD,
	N:       ReturnCodeN,
	P:       ReturnCodeP,
	T:       ReturnCodeT,
	V:       ReturnCodeV,
	X:       ReturnCodeX,
	Z:       ReturnCodeZ,
}
