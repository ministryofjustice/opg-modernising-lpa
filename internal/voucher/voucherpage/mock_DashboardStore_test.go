// Code generated by mockery v2.42.2. DO NOT EDIT.

package voucherpage

import (
	context "context"

	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"

	dashboarddata "github.com/ministryofjustice/opg-modernising-lpa/internal/dashboard/dashboarddata"

	mock "github.com/stretchr/testify/mock"
)

// mockDashboardStore is an autogenerated mock type for the DashboardStore type
type mockDashboardStore struct {
	mock.Mock
}

type mockDashboardStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDashboardStore) EXPECT() *mockDashboardStore_Expecter {
	return &mockDashboardStore_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: ctx
func (_m *mockDashboardStore) GetAll(ctx context.Context) (dashboarddata.Results, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 dashboarddata.Results
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (dashboarddata.Results, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) dashboarddata.Results); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dashboarddata.Results)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDashboardStore_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type mockDashboardStore_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDashboardStore_Expecter) GetAll(ctx interface{}) *mockDashboardStore_GetAll_Call {
	return &mockDashboardStore_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *mockDashboardStore_GetAll_Call) Run(run func(ctx context.Context)) *mockDashboardStore_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDashboardStore_GetAll_Call) Return(results dashboarddata.Results, err error) *mockDashboardStore_GetAll_Call {
	_c.Call.Return(results, err)
	return _c
}

func (_c *mockDashboardStore_GetAll_Call) RunAndReturn(run func(context.Context) (dashboarddata.Results, error)) *mockDashboardStore_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// SubExistsForActorType provides a mock function with given fields: ctx, sub, actorType
func (_m *mockDashboardStore) SubExistsForActorType(ctx context.Context, sub string, actorType actor.Type) (bool, error) {
	ret := _m.Called(ctx, sub, actorType)

	if len(ret) == 0 {
		panic("no return value specified for SubExistsForActorType")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, actor.Type) (bool, error)); ok {
		return rf(ctx, sub, actorType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, actor.Type) bool); ok {
		r0 = rf(ctx, sub, actorType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, actor.Type) error); ok {
		r1 = rf(ctx, sub, actorType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDashboardStore_SubExistsForActorType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubExistsForActorType'
type mockDashboardStore_SubExistsForActorType_Call struct {
	*mock.Call
}

// SubExistsForActorType is a helper method to define mock.On call
//   - ctx context.Context
//   - sub string
//   - actorType actor.Type
func (_e *mockDashboardStore_Expecter) SubExistsForActorType(ctx interface{}, sub interface{}, actorType interface{}) *mockDashboardStore_SubExistsForActorType_Call {
	return &mockDashboardStore_SubExistsForActorType_Call{Call: _e.mock.On("SubExistsForActorType", ctx, sub, actorType)}
}

func (_c *mockDashboardStore_SubExistsForActorType_Call) Run(run func(ctx context.Context, sub string, actorType actor.Type)) *mockDashboardStore_SubExistsForActorType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(actor.Type))
	})
	return _c
}

func (_c *mockDashboardStore_SubExistsForActorType_Call) Return(_a0 bool, _a1 error) *mockDashboardStore_SubExistsForActorType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDashboardStore_SubExistsForActorType_Call) RunAndReturn(run func(context.Context, string, actor.Type) (bool, error)) *mockDashboardStore_SubExistsForActorType_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDashboardStore creates a new instance of mockDashboardStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDashboardStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDashboardStore {
	mock := &mockDashboardStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
