// Code generated by mockery v2.42.2. DO NOT EDIT.

package voucherpage

import (
	context "context"

	sharecodedata "github.com/ministryofjustice/opg-modernising-lpa/internal/sharecode/sharecodedata"
	mock "github.com/stretchr/testify/mock"
)

// mockVoucherStore is an autogenerated mock type for the VoucherStore type
type mockVoucherStore struct {
	mock.Mock
}

type mockVoucherStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockVoucherStore) EXPECT() *mockVoucherStore_Expecter {
	return &mockVoucherStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, shareCode, email
func (_m *mockVoucherStore) Create(ctx context.Context, shareCode sharecodedata.Link, email string) (interface{}, error) {
	ret := _m.Called(ctx, shareCode, email)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharecodedata.Link, string) (interface{}, error)); ok {
		return rf(ctx, shareCode, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharecodedata.Link, string) interface{}); ok {
		r0 = rf(ctx, shareCode, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharecodedata.Link, string) error); ok {
		r1 = rf(ctx, shareCode, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockVoucherStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockVoucherStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - shareCode sharecodedata.Link
//   - email string
func (_e *mockVoucherStore_Expecter) Create(ctx interface{}, shareCode interface{}, email interface{}) *mockVoucherStore_Create_Call {
	return &mockVoucherStore_Create_Call{Call: _e.mock.On("Create", ctx, shareCode, email)}
}

func (_c *mockVoucherStore_Create_Call) Run(run func(ctx context.Context, shareCode sharecodedata.Link, email string)) *mockVoucherStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharecodedata.Link), args[2].(string))
	})
	return _c
}

func (_c *mockVoucherStore_Create_Call) Return(_a0 interface{}, _a1 error) *mockVoucherStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockVoucherStore_Create_Call) RunAndReturn(run func(context.Context, sharecodedata.Link, string) (interface{}, error)) *mockVoucherStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// newMockVoucherStore creates a new instance of mockVoucherStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockVoucherStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockVoucherStore {
	mock := &mockVoucherStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
