// Code generated by mockery. DO NOT EDIT.

package certificateproviderpage

import (
	context "context"

	certificateproviderdata "github.com/ministryofjustice/opg-modernising-lpa/internal/certificateprovider/certificateproviderdata"

	mock "github.com/stretchr/testify/mock"

	sharecodedata "github.com/ministryofjustice/opg-modernising-lpa/internal/sharecode/sharecodedata"
)

// mockCertificateProviderStore is an autogenerated mock type for the CertificateProviderStore type
type mockCertificateProviderStore struct {
	mock.Mock
}

type mockCertificateProviderStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCertificateProviderStore) EXPECT() *mockCertificateProviderStore_Expecter {
	return &mockCertificateProviderStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, shareCode, email
func (_m *mockCertificateProviderStore) Create(ctx context.Context, shareCode sharecodedata.Link, email string) (*certificateproviderdata.Provided, error) {
	ret := _m.Called(ctx, shareCode, email)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *certificateproviderdata.Provided
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sharecodedata.Link, string) (*certificateproviderdata.Provided, error)); ok {
		return rf(ctx, shareCode, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sharecodedata.Link, string) *certificateproviderdata.Provided); ok {
		r0 = rf(ctx, shareCode, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificateproviderdata.Provided)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sharecodedata.Link, string) error); ok {
		r1 = rf(ctx, shareCode, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockCertificateProviderStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockCertificateProviderStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - shareCode sharecodedata.Link
//   - email string
func (_e *mockCertificateProviderStore_Expecter) Create(ctx interface{}, shareCode interface{}, email interface{}) *mockCertificateProviderStore_Create_Call {
	return &mockCertificateProviderStore_Create_Call{Call: _e.mock.On("Create", ctx, shareCode, email)}
}

func (_c *mockCertificateProviderStore_Create_Call) Run(run func(ctx context.Context, shareCode sharecodedata.Link, email string)) *mockCertificateProviderStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sharecodedata.Link), args[2].(string))
	})
	return _c
}

func (_c *mockCertificateProviderStore_Create_Call) Return(_a0 *certificateproviderdata.Provided, _a1 error) *mockCertificateProviderStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockCertificateProviderStore_Create_Call) RunAndReturn(run func(context.Context, sharecodedata.Link, string) (*certificateproviderdata.Provided, error)) *mockCertificateProviderStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx
func (_m *mockCertificateProviderStore) Delete(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCertificateProviderStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockCertificateProviderStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockCertificateProviderStore_Expecter) Delete(ctx interface{}) *mockCertificateProviderStore_Delete_Call {
	return &mockCertificateProviderStore_Delete_Call{Call: _e.mock.On("Delete", ctx)}
}

func (_c *mockCertificateProviderStore_Delete_Call) Run(run func(ctx context.Context)) *mockCertificateProviderStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockCertificateProviderStore_Delete_Call) Return(_a0 error) *mockCertificateProviderStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCertificateProviderStore_Delete_Call) RunAndReturn(run func(context.Context) error) *mockCertificateProviderStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *mockCertificateProviderStore) Get(ctx context.Context) (*certificateproviderdata.Provided, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *certificateproviderdata.Provided
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*certificateproviderdata.Provided, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *certificateproviderdata.Provided); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*certificateproviderdata.Provided)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockCertificateProviderStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockCertificateProviderStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockCertificateProviderStore_Expecter) Get(ctx interface{}) *mockCertificateProviderStore_Get_Call {
	return &mockCertificateProviderStore_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *mockCertificateProviderStore_Get_Call) Run(run func(ctx context.Context)) *mockCertificateProviderStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockCertificateProviderStore_Get_Call) Return(_a0 *certificateproviderdata.Provided, _a1 error) *mockCertificateProviderStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockCertificateProviderStore_Get_Call) RunAndReturn(run func(context.Context) (*certificateproviderdata.Provided, error)) *mockCertificateProviderStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, certificateProvider
func (_m *mockCertificateProviderStore) Put(ctx context.Context, certificateProvider *certificateproviderdata.Provided) error {
	ret := _m.Called(ctx, certificateProvider)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *certificateproviderdata.Provided) error); ok {
		r0 = rf(ctx, certificateProvider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCertificateProviderStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockCertificateProviderStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateProvider *certificateproviderdata.Provided
func (_e *mockCertificateProviderStore_Expecter) Put(ctx interface{}, certificateProvider interface{}) *mockCertificateProviderStore_Put_Call {
	return &mockCertificateProviderStore_Put_Call{Call: _e.mock.On("Put", ctx, certificateProvider)}
}

func (_c *mockCertificateProviderStore_Put_Call) Run(run func(ctx context.Context, certificateProvider *certificateproviderdata.Provided)) *mockCertificateProviderStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*certificateproviderdata.Provided))
	})
	return _c
}

func (_c *mockCertificateProviderStore_Put_Call) Return(_a0 error) *mockCertificateProviderStore_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCertificateProviderStore_Put_Call) RunAndReturn(run func(context.Context, *certificateproviderdata.Provided) error) *mockCertificateProviderStore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCertificateProviderStore creates a new instance of mockCertificateProviderStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCertificateProviderStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCertificateProviderStore {
	mock := &mockCertificateProviderStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
