// Code generated by mockery. DO NOT EDIT.

package certificateproviderpage

import (
	context "context"

	event "github.com/ministryofjustice/opg-modernising-lpa/internal/event"
	mock "github.com/stretchr/testify/mock"
)

// mockEventClient is an autogenerated mock type for the EventClient type
type mockEventClient struct {
	mock.Mock
}

type mockEventClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockEventClient) EXPECT() *mockEventClient_Expecter {
	return &mockEventClient_Expecter{mock: &_m.Mock}
}

// SendIdentityCheckMismatched provides a mock function with given fields: ctx, e
func (_m *mockEventClient) SendIdentityCheckMismatched(ctx context.Context, e event.IdentityCheckMismatched) error {
	ret := _m.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for SendIdentityCheckMismatched")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, event.IdentityCheckMismatched) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockEventClient_SendIdentityCheckMismatched_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendIdentityCheckMismatched'
type mockEventClient_SendIdentityCheckMismatched_Call struct {
	*mock.Call
}

// SendIdentityCheckMismatched is a helper method to define mock.On call
//   - ctx context.Context
//   - e event.IdentityCheckMismatched
func (_e *mockEventClient_Expecter) SendIdentityCheckMismatched(ctx interface{}, e interface{}) *mockEventClient_SendIdentityCheckMismatched_Call {
	return &mockEventClient_SendIdentityCheckMismatched_Call{Call: _e.mock.On("SendIdentityCheckMismatched", ctx, e)}
}

func (_c *mockEventClient_SendIdentityCheckMismatched_Call) Run(run func(ctx context.Context, e event.IdentityCheckMismatched)) *mockEventClient_SendIdentityCheckMismatched_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(event.IdentityCheckMismatched))
	})
	return _c
}

func (_c *mockEventClient_SendIdentityCheckMismatched_Call) Return(_a0 error) *mockEventClient_SendIdentityCheckMismatched_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockEventClient_SendIdentityCheckMismatched_Call) RunAndReturn(run func(context.Context, event.IdentityCheckMismatched) error) *mockEventClient_SendIdentityCheckMismatched_Call {
	_c.Call.Return(run)
	return _c
}

// newMockEventClient creates a new instance of mockEventClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockEventClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockEventClient {
	mock := &mockEventClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
