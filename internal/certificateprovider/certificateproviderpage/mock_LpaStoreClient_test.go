// Code generated by mockery. DO NOT EDIT.

package certificateproviderpage

import (
	context "context"

	actoruid "github.com/ministryofjustice/opg-modernising-lpa/internal/actor/actoruid"
	certificateproviderdata "github.com/ministryofjustice/opg-modernising-lpa/internal/certificateprovider/certificateproviderdata"

	lpadata "github.com/ministryofjustice/opg-modernising-lpa/internal/lpastore/lpadata"

	mock "github.com/stretchr/testify/mock"
)

// mockLpaStoreClient is an autogenerated mock type for the LpaStoreClient type
type mockLpaStoreClient struct {
	mock.Mock
}

type mockLpaStoreClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLpaStoreClient) EXPECT() *mockLpaStoreClient_Expecter {
	return &mockLpaStoreClient_Expecter{mock: &_m.Mock}
}

// Lpa provides a mock function with given fields: ctx, lpaUID
func (_m *mockLpaStoreClient) Lpa(ctx context.Context, lpaUID string) (*lpadata.Lpa, error) {
	ret := _m.Called(ctx, lpaUID)

	if len(ret) == 0 {
		panic("no return value specified for Lpa")
	}

	var r0 *lpadata.Lpa
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*lpadata.Lpa, error)); ok {
		return rf(ctx, lpaUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *lpadata.Lpa); ok {
		r0 = rf(ctx, lpaUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lpadata.Lpa)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, lpaUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockLpaStoreClient_Lpa_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lpa'
type mockLpaStoreClient_Lpa_Call struct {
	*mock.Call
}

// Lpa is a helper method to define mock.On call
//   - ctx context.Context
//   - lpaUID string
func (_e *mockLpaStoreClient_Expecter) Lpa(ctx interface{}, lpaUID interface{}) *mockLpaStoreClient_Lpa_Call {
	return &mockLpaStoreClient_Lpa_Call{Call: _e.mock.On("Lpa", ctx, lpaUID)}
}

func (_c *mockLpaStoreClient_Lpa_Call) Run(run func(ctx context.Context, lpaUID string)) *mockLpaStoreClient_Lpa_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockLpaStoreClient_Lpa_Call) Return(_a0 *lpadata.Lpa, _a1 error) *mockLpaStoreClient_Lpa_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockLpaStoreClient_Lpa_Call) RunAndReturn(run func(context.Context, string) (*lpadata.Lpa, error)) *mockLpaStoreClient_Lpa_Call {
	_c.Call.Return(run)
	return _c
}

// SendCertificateProvider provides a mock function with given fields: ctx, certificateProvider, lpa
func (_m *mockLpaStoreClient) SendCertificateProvider(ctx context.Context, certificateProvider *certificateproviderdata.Provided, lpa *lpadata.Lpa) error {
	ret := _m.Called(ctx, certificateProvider, lpa)

	if len(ret) == 0 {
		panic("no return value specified for SendCertificateProvider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *certificateproviderdata.Provided, *lpadata.Lpa) error); ok {
		r0 = rf(ctx, certificateProvider, lpa)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockLpaStoreClient_SendCertificateProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCertificateProvider'
type mockLpaStoreClient_SendCertificateProvider_Call struct {
	*mock.Call
}

// SendCertificateProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - certificateProvider *certificateproviderdata.Provided
//   - lpa *lpadata.Lpa
func (_e *mockLpaStoreClient_Expecter) SendCertificateProvider(ctx interface{}, certificateProvider interface{}, lpa interface{}) *mockLpaStoreClient_SendCertificateProvider_Call {
	return &mockLpaStoreClient_SendCertificateProvider_Call{Call: _e.mock.On("SendCertificateProvider", ctx, certificateProvider, lpa)}
}

func (_c *mockLpaStoreClient_SendCertificateProvider_Call) Run(run func(ctx context.Context, certificateProvider *certificateproviderdata.Provided, lpa *lpadata.Lpa)) *mockLpaStoreClient_SendCertificateProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*certificateproviderdata.Provided), args[2].(*lpadata.Lpa))
	})
	return _c
}

func (_c *mockLpaStoreClient_SendCertificateProvider_Call) Return(_a0 error) *mockLpaStoreClient_SendCertificateProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLpaStoreClient_SendCertificateProvider_Call) RunAndReturn(run func(context.Context, *certificateproviderdata.Provided, *lpadata.Lpa) error) *mockLpaStoreClient_SendCertificateProvider_Call {
	_c.Call.Return(run)
	return _c
}

// SendCertificateProviderConfirmIdentity provides a mock function with given fields: ctx, lpaUID, certificateProvider
func (_m *mockLpaStoreClient) SendCertificateProviderConfirmIdentity(ctx context.Context, lpaUID string, certificateProvider *certificateproviderdata.Provided) error {
	ret := _m.Called(ctx, lpaUID, certificateProvider)

	if len(ret) == 0 {
		panic("no return value specified for SendCertificateProviderConfirmIdentity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *certificateproviderdata.Provided) error); ok {
		r0 = rf(ctx, lpaUID, certificateProvider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockLpaStoreClient_SendCertificateProviderConfirmIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCertificateProviderConfirmIdentity'
type mockLpaStoreClient_SendCertificateProviderConfirmIdentity_Call struct {
	*mock.Call
}

// SendCertificateProviderConfirmIdentity is a helper method to define mock.On call
//   - ctx context.Context
//   - lpaUID string
//   - certificateProvider *certificateproviderdata.Provided
func (_e *mockLpaStoreClient_Expecter) SendCertificateProviderConfirmIdentity(ctx interface{}, lpaUID interface{}, certificateProvider interface{}) *mockLpaStoreClient_SendCertificateProviderConfirmIdentity_Call {
	return &mockLpaStoreClient_SendCertificateProviderConfirmIdentity_Call{Call: _e.mock.On("SendCertificateProviderConfirmIdentity", ctx, lpaUID, certificateProvider)}
}

func (_c *mockLpaStoreClient_SendCertificateProviderConfirmIdentity_Call) Run(run func(ctx context.Context, lpaUID string, certificateProvider *certificateproviderdata.Provided)) *mockLpaStoreClient_SendCertificateProviderConfirmIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*certificateproviderdata.Provided))
	})
	return _c
}

func (_c *mockLpaStoreClient_SendCertificateProviderConfirmIdentity_Call) Return(_a0 error) *mockLpaStoreClient_SendCertificateProviderConfirmIdentity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLpaStoreClient_SendCertificateProviderConfirmIdentity_Call) RunAndReturn(run func(context.Context, string, *certificateproviderdata.Provided) error) *mockLpaStoreClient_SendCertificateProviderConfirmIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// SendCertificateProviderOptOut provides a mock function with given fields: ctx, lpaUID, actorUID
func (_m *mockLpaStoreClient) SendCertificateProviderOptOut(ctx context.Context, lpaUID string, actorUID actoruid.UID) error {
	ret := _m.Called(ctx, lpaUID, actorUID)

	if len(ret) == 0 {
		panic("no return value specified for SendCertificateProviderOptOut")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, actoruid.UID) error); ok {
		r0 = rf(ctx, lpaUID, actorUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockLpaStoreClient_SendCertificateProviderOptOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCertificateProviderOptOut'
type mockLpaStoreClient_SendCertificateProviderOptOut_Call struct {
	*mock.Call
}

// SendCertificateProviderOptOut is a helper method to define mock.On call
//   - ctx context.Context
//   - lpaUID string
//   - actorUID actoruid.UID
func (_e *mockLpaStoreClient_Expecter) SendCertificateProviderOptOut(ctx interface{}, lpaUID interface{}, actorUID interface{}) *mockLpaStoreClient_SendCertificateProviderOptOut_Call {
	return &mockLpaStoreClient_SendCertificateProviderOptOut_Call{Call: _e.mock.On("SendCertificateProviderOptOut", ctx, lpaUID, actorUID)}
}

func (_c *mockLpaStoreClient_SendCertificateProviderOptOut_Call) Run(run func(ctx context.Context, lpaUID string, actorUID actoruid.UID)) *mockLpaStoreClient_SendCertificateProviderOptOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(actoruid.UID))
	})
	return _c
}

func (_c *mockLpaStoreClient_SendCertificateProviderOptOut_Call) Return(_a0 error) *mockLpaStoreClient_SendCertificateProviderOptOut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLpaStoreClient_SendCertificateProviderOptOut_Call) RunAndReturn(run func(context.Context, string, actoruid.UID) error) *mockLpaStoreClient_SendCertificateProviderOptOut_Call {
	_c.Call.Return(run)
	return _c
}

// SendPaperCertificateProviderAccessOnline provides a mock function with given fields: ctx, lpa, certificateProviderEmail
func (_m *mockLpaStoreClient) SendPaperCertificateProviderAccessOnline(ctx context.Context, lpa *lpadata.Lpa, certificateProviderEmail string) error {
	ret := _m.Called(ctx, lpa, certificateProviderEmail)

	if len(ret) == 0 {
		panic("no return value specified for SendPaperCertificateProviderAccessOnline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lpadata.Lpa, string) error); ok {
		r0 = rf(ctx, lpa, certificateProviderEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockLpaStoreClient_SendPaperCertificateProviderAccessOnline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPaperCertificateProviderAccessOnline'
type mockLpaStoreClient_SendPaperCertificateProviderAccessOnline_Call struct {
	*mock.Call
}

// SendPaperCertificateProviderAccessOnline is a helper method to define mock.On call
//   - ctx context.Context
//   - lpa *lpadata.Lpa
//   - certificateProviderEmail string
func (_e *mockLpaStoreClient_Expecter) SendPaperCertificateProviderAccessOnline(ctx interface{}, lpa interface{}, certificateProviderEmail interface{}) *mockLpaStoreClient_SendPaperCertificateProviderAccessOnline_Call {
	return &mockLpaStoreClient_SendPaperCertificateProviderAccessOnline_Call{Call: _e.mock.On("SendPaperCertificateProviderAccessOnline", ctx, lpa, certificateProviderEmail)}
}

func (_c *mockLpaStoreClient_SendPaperCertificateProviderAccessOnline_Call) Run(run func(ctx context.Context, lpa *lpadata.Lpa, certificateProviderEmail string)) *mockLpaStoreClient_SendPaperCertificateProviderAccessOnline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*lpadata.Lpa), args[2].(string))
	})
	return _c
}

func (_c *mockLpaStoreClient_SendPaperCertificateProviderAccessOnline_Call) Return(_a0 error) *mockLpaStoreClient_SendPaperCertificateProviderAccessOnline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockLpaStoreClient_SendPaperCertificateProviderAccessOnline_Call) RunAndReturn(run func(context.Context, *lpadata.Lpa, string) error) *mockLpaStoreClient_SendPaperCertificateProviderAccessOnline_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLpaStoreClient creates a new instance of mockLpaStoreClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLpaStoreClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLpaStoreClient {
	mock := &mockLpaStoreClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
