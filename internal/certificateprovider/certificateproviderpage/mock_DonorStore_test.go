// Code generated by mockery v2.45.0. DO NOT EDIT.

package certificateproviderpage

import (
	context "context"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"
	mock "github.com/stretchr/testify/mock"
)

// mockDonorStore is an autogenerated mock type for the DonorStore type
type mockDonorStore struct {
	mock.Mock
}

type mockDonorStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDonorStore) EXPECT() *mockDonorStore_Expecter {
	return &mockDonorStore_Expecter{mock: &_m.Mock}
}

// GetAny provides a mock function with given fields: ctx
func (_m *mockDonorStore) GetAny(ctx context.Context) (*donordata.Provided, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAny")
	}

	var r0 *donordata.Provided
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*donordata.Provided, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *donordata.Provided); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*donordata.Provided)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDonorStore_GetAny_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAny'
type mockDonorStore_GetAny_Call struct {
	*mock.Call
}

// GetAny is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDonorStore_Expecter) GetAny(ctx interface{}) *mockDonorStore_GetAny_Call {
	return &mockDonorStore_GetAny_Call{Call: _e.mock.On("GetAny", ctx)}
}

func (_c *mockDonorStore_GetAny_Call) Run(run func(ctx context.Context)) *mockDonorStore_GetAny_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDonorStore_GetAny_Call) Return(_a0 *donordata.Provided, _a1 error) *mockDonorStore_GetAny_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDonorStore_GetAny_Call) RunAndReturn(run func(context.Context) (*donordata.Provided, error)) *mockDonorStore_GetAny_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, donor
func (_m *mockDonorStore) Put(ctx context.Context, donor *donordata.Provided) error {
	ret := _m.Called(ctx, donor)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) error); ok {
		r0 = rf(ctx, donor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDonorStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockDonorStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - donor *donordata.Provided
func (_e *mockDonorStore_Expecter) Put(ctx interface{}, donor interface{}) *mockDonorStore_Put_Call {
	return &mockDonorStore_Put_Call{Call: _e.mock.On("Put", ctx, donor)}
}

func (_c *mockDonorStore_Put_Call) Run(run func(ctx context.Context, donor *donordata.Provided)) *mockDonorStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockDonorStore_Put_Call) Return(_a0 error) *mockDonorStore_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDonorStore_Put_Call) RunAndReturn(run func(context.Context, *donordata.Provided) error) *mockDonorStore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDonorStore creates a new instance of mockDonorStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDonorStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDonorStore {
	mock := &mockDonorStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
