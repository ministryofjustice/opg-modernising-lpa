// Code generated by mockery v2.20.0. DO NOT EDIT.

package app

import (
	context "context"

	dynamo "github.com/ministryofjustice/opg-modernising-lpa/internal/dynamo"
	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// mockDynamoClient is an autogenerated mock type for the DynamoClient type
type mockDynamoClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, v
func (_m *mockDynamoClient) Create(ctx context.Context, v interface{}) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, pk, sk, v
func (_m *mockDynamoClient) Get(ctx context.Context, pk string, sk string, v interface{}) error {
	ret := _m.Called(ctx, pk, sk, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, pk, sk, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllByGsi provides a mock function with given fields: ctx, gsi, sk, v
func (_m *mockDynamoClient) GetAllByGsi(ctx context.Context, gsi string, sk string, v interface{}) error {
	ret := _m.Called(ctx, gsi, sk, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, gsi, sk, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllByKeys provides a mock function with given fields: ctx, pks
func (_m *mockDynamoClient) GetAllByKeys(ctx context.Context, pks []dynamo.Key) ([]map[string]types.AttributeValue, error) {
	ret := _m.Called(ctx, pks)

	var r0 []map[string]types.AttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []dynamo.Key) ([]map[string]types.AttributeValue, error)); ok {
		return rf(ctx, pks)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []dynamo.Key) []map[string]types.AttributeValue); ok {
		r0 = rf(ctx, pks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]types.AttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []dynamo.Key) error); ok {
		r1 = rf(ctx, pks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneByPartialSk provides a mock function with given fields: ctx, pk, partialSk, v
func (_m *mockDynamoClient) GetOneByPartialSk(ctx context.Context, pk string, partialSk string, v interface{}) error {
	ret := _m.Called(ctx, pk, partialSk, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, pk, partialSk, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: ctx, v
func (_m *mockDynamoClient) Put(ctx context.Context, v interface{}) error {
	ret := _m.Called(ctx, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewMockDynamoClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDynamoClient creates a new instance of mockDynamoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDynamoClient(t mockConstructorTestingTnewMockDynamoClient) *mockDynamoClient {
	mock := &mockDynamoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
