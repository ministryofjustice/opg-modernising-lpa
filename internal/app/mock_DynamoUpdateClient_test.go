// Code generated by mockery. DO NOT EDIT.

package app

import (
	context "context"

	dynamo "github.com/ministryofjustice/opg-modernising-lpa/internal/dynamo"
	mock "github.com/stretchr/testify/mock"
)

// mockDynamoUpdateClient is an autogenerated mock type for the DynamoUpdateClient type
type mockDynamoUpdateClient struct {
	mock.Mock
}

type mockDynamoUpdateClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDynamoUpdateClient) EXPECT() *mockDynamoUpdateClient_Expecter {
	return &mockDynamoUpdateClient_Expecter{mock: &_m.Mock}
}

// WriteTransaction provides a mock function with given fields: ctx, transaction
func (_m *mockDynamoUpdateClient) WriteTransaction(ctx context.Context, transaction *dynamo.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for WriteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamo.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoUpdateClient_WriteTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTransaction'
type mockDynamoUpdateClient_WriteTransaction_Call struct {
	*mock.Call
}

// WriteTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *dynamo.Transaction
func (_e *mockDynamoUpdateClient_Expecter) WriteTransaction(ctx interface{}, transaction interface{}) *mockDynamoUpdateClient_WriteTransaction_Call {
	return &mockDynamoUpdateClient_WriteTransaction_Call{Call: _e.mock.On("WriteTransaction", ctx, transaction)}
}

func (_c *mockDynamoUpdateClient_WriteTransaction_Call) Run(run func(ctx context.Context, transaction *dynamo.Transaction)) *mockDynamoUpdateClient_WriteTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dynamo.Transaction))
	})
	return _c
}

func (_c *mockDynamoUpdateClient_WriteTransaction_Call) Return(_a0 error) *mockDynamoUpdateClient_WriteTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoUpdateClient_WriteTransaction_Call) RunAndReturn(run func(context.Context, *dynamo.Transaction) error) *mockDynamoUpdateClient_WriteTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDynamoUpdateClient creates a new instance of mockDynamoUpdateClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDynamoUpdateClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDynamoUpdateClient {
	mock := &mockDynamoUpdateClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
