// Code generated by mockery v2.20.0. DO NOT EDIT.

package app

import (
	context "context"

	event "github.com/ministryofjustice/opg-modernising-lpa/internal/event"
	mock "github.com/stretchr/testify/mock"
)

// mockEventClient is an autogenerated mock type for the EventClient type
type mockEventClient struct {
	mock.Mock
}

// SendApplicationUpdated provides a mock function with given fields: _a0, _a1
func (_m *mockEventClient) SendApplicationUpdated(_a0 context.Context, _a1 event.ApplicationUpdated) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, event.ApplicationUpdated) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendPreviousApplicationLinked provides a mock function with given fields: _a0, _a1
func (_m *mockEventClient) SendPreviousApplicationLinked(_a0 context.Context, _a1 event.PreviousApplicationLinked) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, event.PreviousApplicationLinked) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendUidRequested provides a mock function with given fields: _a0, _a1
func (_m *mockEventClient) SendUidRequested(_a0 context.Context, _a1 event.UidRequested) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, event.UidRequested) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewMockEventClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockEventClient creates a new instance of mockEventClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockEventClient(t mockConstructorTestingTnewMockEventClient) *mockEventClient {
	mock := &mockEventClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
