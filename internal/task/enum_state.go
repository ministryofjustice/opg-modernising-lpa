// Code generated by "enumerator -type State -linecomment -trimprefix"; DO NOT EDIT.

package task

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StateNotStarted-0]
	_ = x[StateInProgress-1]
	_ = x[StateCompleted-2]
}

const _State_name = "notStartedinProgresscompleted"

var _State_index = [...]uint8{0, 10, 20, 29}

func (i State) String() string {
	if i >= State(len(_State_index)-1) {
		return "State(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _State_name[_State_index[i]:_State_index[i+1]]
}

func (i State) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *State) UnmarshalText(text []byte) error {
	val, err := ParseState(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i State) IsNotStarted() bool {
	return i == StateNotStarted
}

func (i State) IsInProgress() bool {
	return i == StateInProgress
}

func (i State) IsCompleted() bool {
	return i == StateCompleted
}

func ParseState(s string) (State, error) {
	switch s {
	case "notStarted":
		return StateNotStarted, nil
	case "inProgress":
		return StateInProgress, nil
	case "completed":
		return StateCompleted, nil
	default:
		return State(0), fmt.Errorf("invalid State '%s'", s)
	}
}

type StateOptions struct {
	NotStarted State
	InProgress State
	Completed  State
}

var StateValues = StateOptions{
	NotStarted: StateNotStarted,
	InProgress: StateInProgress,
	Completed:  StateCompleted,
}
