// Code generated by "enumerator -type IdentityState -trimprefix"; DO NOT EDIT.
package task

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IdentityStateNotStarted-0]
	_ = x[IdentityStateInProgress-1]
	_ = x[IdentityStatePending-2]
	_ = x[IdentityStateProblem-3]
	_ = x[IdentityStateCompleted-4]
}

const _IdentityState_name = "NotStartedInProgressPendingProblemCompleted"

var _IdentityState_index = [...]uint8{0, 10, 20, 27, 34, 43}

func (i IdentityState) String() string {
	if i >= IdentityState(len(_IdentityState_index)-1) {
		return "IdentityState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _IdentityState_name[_IdentityState_index[i]:_IdentityState_index[i+1]]
}

func (i IdentityState) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *IdentityState) UnmarshalText(text []byte) error {
	val, err := ParseIdentityState(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i IdentityState) IsNotStarted() bool {
	return i == IdentityStateNotStarted
}

func (i IdentityState) IsInProgress() bool {
	return i == IdentityStateInProgress
}

func (i IdentityState) IsPending() bool {
	return i == IdentityStatePending
}

func (i IdentityState) IsProblem() bool {
	return i == IdentityStateProblem
}

func (i IdentityState) IsCompleted() bool {
	return i == IdentityStateCompleted
}

func ParseIdentityState(s string) (IdentityState, error) {
	switch s {
	case "NotStarted":
		return IdentityStateNotStarted, nil
	case "InProgress":
		return IdentityStateInProgress, nil
	case "Pending":
		return IdentityStatePending, nil
	case "Problem":
		return IdentityStateProblem, nil
	case "Completed":
		return IdentityStateCompleted, nil
	default:
		return IdentityState(0), fmt.Errorf("invalid IdentityState '%s'", s)
	}
}

type IdentityStateOptions struct {
	NotStarted IdentityState
	InProgress IdentityState
	Pending    IdentityState
	Problem    IdentityState
	Completed  IdentityState
}

var IdentityStateValues = IdentityStateOptions{
	NotStarted: IdentityStateNotStarted,
	InProgress: IdentityStateInProgress,
	Pending:    IdentityStatePending,
	Problem:    IdentityStateProblem,
	Completed:  IdentityStateCompleted,
}
