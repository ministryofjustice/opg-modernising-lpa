// Code generated by "enumerator -type NotificationSubject -empty -trimprefix"; DO NOT EDIT.

package task

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NotificationSuccessfulVouch-0]
}

const _NotificationSubject_name = "NotificationSuccessfulVouch"

var _NotificationSubject_index = [...]uint8{0, 27}

func (i NotificationSubject) String() string {
	if i == 0 {
		return ""
	}
	if i >= NotificationSubject(len(_NotificationSubject_index)-1) {
		return "NotificationSubject(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NotificationSubject_name[_NotificationSubject_index[i]:_NotificationSubject_index[i+1]]
}

func (i NotificationSubject) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *NotificationSubject) UnmarshalText(text []byte) error {
	val, err := ParseNotificationSubject(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i NotificationSubject) IsNotificationSuccessfulVouch() bool {
	return i == NotificationSuccessfulVouch
}

func ParseNotificationSubject(s string) (NotificationSubject, error) {
	switch s {
	case "":
		return NotificationSubject(0), nil
	case "NotificationSuccessfulVouch":
		return NotificationSuccessfulVouch, nil
	default:
		return NotificationSubject(0), fmt.Errorf("invalid NotificationSubject '%s'", s)
	}
}

type NotificationSubjectOptions struct {
	NotificationSuccessfulVouch NotificationSubject
}

var NotificationSubjectValues = NotificationSubjectOptions{
	NotificationSuccessfulVouch: NotificationSuccessfulVouch,
}

func (i NotificationSubject) Empty() bool {
	return i == NotificationSubject(0)
}
