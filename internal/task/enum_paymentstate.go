// Code generated by "enumerator -type PaymentState -trimprefix"; DO NOT EDIT.

package task

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PaymentStateNotStarted-0]
	_ = x[PaymentStateInProgress-1]
	_ = x[PaymentStatePending-2]
	_ = x[PaymentStateApproved-3]
	_ = x[PaymentStateDenied-4]
	_ = x[PaymentStateMoreEvidenceRequired-5]
	_ = x[PaymentStateCompleted-6]
}

const _PaymentState_name = "NotStartedInProgressPendingApprovedDeniedMoreEvidenceRequiredCompleted"

var _PaymentState_index = [...]uint8{0, 10, 20, 27, 35, 41, 61, 70}

func (i PaymentState) String() string {
	if i >= PaymentState(len(_PaymentState_index)-1) {
		return "PaymentState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _PaymentState_name[_PaymentState_index[i]:_PaymentState_index[i+1]]
}

func (i PaymentState) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *PaymentState) UnmarshalText(text []byte) error {
	val, err := ParsePaymentState(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i PaymentState) IsNotStarted() bool {
	return i == PaymentStateNotStarted
}

func (i PaymentState) IsInProgress() bool {
	return i == PaymentStateInProgress
}

func (i PaymentState) IsPending() bool {
	return i == PaymentStatePending
}

func (i PaymentState) IsApproved() bool {
	return i == PaymentStateApproved
}

func (i PaymentState) IsDenied() bool {
	return i == PaymentStateDenied
}

func (i PaymentState) IsMoreEvidenceRequired() bool {
	return i == PaymentStateMoreEvidenceRequired
}

func (i PaymentState) IsCompleted() bool {
	return i == PaymentStateCompleted
}

func ParsePaymentState(s string) (PaymentState, error) {
	switch s {
	case "NotStarted":
		return PaymentStateNotStarted, nil
	case "InProgress":
		return PaymentStateInProgress, nil
	case "Pending":
		return PaymentStatePending, nil
	case "Approved":
		return PaymentStateApproved, nil
	case "Denied":
		return PaymentStateDenied, nil
	case "MoreEvidenceRequired":
		return PaymentStateMoreEvidenceRequired, nil
	case "Completed":
		return PaymentStateCompleted, nil
	default:
		return PaymentState(0), fmt.Errorf("invalid PaymentState '%s'", s)
	}
}

type PaymentStateOptions struct {
	NotStarted           PaymentState
	InProgress           PaymentState
	Pending              PaymentState
	Approved             PaymentState
	Denied               PaymentState
	MoreEvidenceRequired PaymentState
	Completed            PaymentState
}

var PaymentStateValues = PaymentStateOptions{
	NotStarted:           PaymentStateNotStarted,
	InProgress:           PaymentStateInProgress,
	Pending:              PaymentStatePending,
	Approved:             PaymentStateApproved,
	Denied:               PaymentStateDenied,
	MoreEvidenceRequired: PaymentStateMoreEvidenceRequired,
	Completed:            PaymentStateCompleted,
}
