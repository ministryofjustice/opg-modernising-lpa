// Code generated by "enumerator -type Lang -linecomment -empty"; DO NOT EDIT.

package localize

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[En-1]
	_ = x[Cy-2]
}

const _Lang_name = "ency"

var _Lang_index = [...]uint8{0, 2, 4}

func (i Lang) String() string {
	if i == 0 {
		return ""
	}
	i -= 1
	if i >= Lang(len(_Lang_index)-1) {
		return "Lang(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Lang_name[_Lang_index[i]:_Lang_index[i+1]]
}

func (i Lang) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *Lang) UnmarshalText(text []byte) error {
	val, err := ParseLang(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i Lang) IsEn() bool {
	return i == En
}

func (i Lang) IsCy() bool {
	return i == Cy
}

func ParseLang(s string) (Lang, error) {
	switch s {
	case "":
		return Lang(0), nil
	case "en":
		return En, nil
	case "cy":
		return Cy, nil
	default:
		return Lang(0), fmt.Errorf("invalid Lang '%s'", s)
	}
}

type LangOptions struct {
	En Lang
	Cy Lang
}

var LangValues = LangOptions{
	En: En,
	Cy: Cy,
}

func (i Lang) Empty() bool {
	return i == Lang(0)
}
