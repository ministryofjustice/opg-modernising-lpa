// Code generated by mockery v2.45.0. DO NOT EDIT.

package dashboard

import (
	context "context"

	dynamo "github.com/ministryofjustice/opg-modernising-lpa/internal/dynamo"
	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// mockDynamoClient is an autogenerated mock type for the DynamoClient type
type mockDynamoClient struct {
	mock.Mock
}

type mockDynamoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDynamoClient) EXPECT() *mockDynamoClient_Expecter {
	return &mockDynamoClient_Expecter{mock: &_m.Mock}
}

// AllByKeys provides a mock function with given fields: ctx, keys
func (_m *mockDynamoClient) AllByKeys(ctx context.Context, keys []dynamo.Keys) ([]map[string]types.AttributeValue, error) {
	ret := _m.Called(ctx, keys)

	if len(ret) == 0 {
		panic("no return value specified for AllByKeys")
	}

	var r0 []map[string]types.AttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []dynamo.Keys) ([]map[string]types.AttributeValue, error)); ok {
		return rf(ctx, keys)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []dynamo.Keys) []map[string]types.AttributeValue); ok {
		r0 = rf(ctx, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]types.AttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []dynamo.Keys) error); ok {
		r1 = rf(ctx, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoClient_AllByKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllByKeys'
type mockDynamoClient_AllByKeys_Call struct {
	*mock.Call
}

// AllByKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []dynamo.Keys
func (_e *mockDynamoClient_Expecter) AllByKeys(ctx interface{}, keys interface{}) *mockDynamoClient_AllByKeys_Call {
	return &mockDynamoClient_AllByKeys_Call{Call: _e.mock.On("AllByKeys", ctx, keys)}
}

func (_c *mockDynamoClient_AllByKeys_Call) Run(run func(ctx context.Context, keys []dynamo.Keys)) *mockDynamoClient_AllByKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]dynamo.Keys))
	})
	return _c
}

func (_c *mockDynamoClient_AllByKeys_Call) Return(_a0 []map[string]types.AttributeValue, _a1 error) *mockDynamoClient_AllByKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoClient_AllByKeys_Call) RunAndReturn(run func(context.Context, []dynamo.Keys) ([]map[string]types.AttributeValue, error)) *mockDynamoClient_AllByKeys_Call {
	_c.Call.Return(run)
	return _c
}

// AllBySK provides a mock function with given fields: ctx, sk, v
func (_m *mockDynamoClient) AllBySK(ctx context.Context, sk dynamo.SK, v interface{}) error {
	ret := _m.Called(ctx, sk, v)

	if len(ret) == 0 {
		panic("no return value specified for AllBySK")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.SK, interface{}) error); ok {
		r0 = rf(ctx, sk, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_AllBySK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllBySK'
type mockDynamoClient_AllBySK_Call struct {
	*mock.Call
}

// AllBySK is a helper method to define mock.On call
//   - ctx context.Context
//   - sk dynamo.SK
//   - v interface{}
func (_e *mockDynamoClient_Expecter) AllBySK(ctx interface{}, sk interface{}, v interface{}) *mockDynamoClient_AllBySK_Call {
	return &mockDynamoClient_AllBySK_Call{Call: _e.mock.On("AllBySK", ctx, sk, v)}
}

func (_c *mockDynamoClient_AllBySK_Call) Run(run func(ctx context.Context, sk dynamo.SK, v interface{})) *mockDynamoClient_AllBySK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.SK), args[2].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_AllBySK_Call) Return(_a0 error) *mockDynamoClient_AllBySK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_AllBySK_Call) RunAndReturn(run func(context.Context, dynamo.SK, interface{}) error) *mockDynamoClient_AllBySK_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDynamoClient creates a new instance of mockDynamoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDynamoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDynamoClient {
	mock := &mockDynamoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
