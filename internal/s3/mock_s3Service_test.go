// Code generated by mockery v2.39.1. DO NOT EDIT.

package s3

import (
	context "context"

	services3 "github.com/aws/aws-sdk-go-v2/service/s3"
	mock "github.com/stretchr/testify/mock"
)

// mockS3Service is an autogenerated mock type for the s3Service type
type mockS3Service struct {
	mock.Mock
}

// DeleteObject provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockS3Service) DeleteObject(_a0 context.Context, _a1 *services3.DeleteObjectInput, _a2 ...func(*services3.Options)) (*services3.DeleteObjectOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 *services3.DeleteObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services3.DeleteObjectInput, ...func(*services3.Options)) (*services3.DeleteObjectOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services3.DeleteObjectInput, ...func(*services3.Options)) *services3.DeleteObjectOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services3.DeleteObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services3.DeleteObjectInput, ...func(*services3.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteObjects provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockS3Service) DeleteObjects(_a0 context.Context, _a1 *services3.DeleteObjectsInput, _a2 ...func(*services3.Options)) (*services3.DeleteObjectsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObjects")
	}

	var r0 *services3.DeleteObjectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services3.DeleteObjectsInput, ...func(*services3.Options)) (*services3.DeleteObjectsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services3.DeleteObjectsInput, ...func(*services3.Options)) *services3.DeleteObjectsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services3.DeleteObjectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services3.DeleteObjectsInput, ...func(*services3.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectTagging provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockS3Service) GetObjectTagging(_a0 context.Context, _a1 *services3.GetObjectTaggingInput, _a2 ...func(*services3.Options)) (*services3.GetObjectTaggingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectTagging")
	}

	var r0 *services3.GetObjectTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services3.GetObjectTaggingInput, ...func(*services3.Options)) (*services3.GetObjectTaggingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services3.GetObjectTaggingInput, ...func(*services3.Options)) *services3.GetObjectTaggingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services3.GetObjectTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services3.GetObjectTaggingInput, ...func(*services3.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObject provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockS3Service) PutObject(_a0 context.Context, _a1 *services3.PutObjectInput, _a2 ...func(*services3.Options)) (*services3.PutObjectOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 *services3.PutObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services3.PutObjectInput, ...func(*services3.Options)) (*services3.PutObjectOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services3.PutObjectInput, ...func(*services3.Options)) *services3.PutObjectOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services3.PutObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services3.PutObjectInput, ...func(*services3.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObjectTagging provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockS3Service) PutObjectTagging(_a0 context.Context, _a1 *services3.PutObjectTaggingInput, _a2 ...func(*services3.Options)) (*services3.PutObjectTaggingOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutObjectTagging")
	}

	var r0 *services3.PutObjectTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services3.PutObjectTaggingInput, ...func(*services3.Options)) (*services3.PutObjectTaggingOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services3.PutObjectTaggingInput, ...func(*services3.Options)) *services3.PutObjectTaggingOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services3.PutObjectTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services3.PutObjectTaggingInput, ...func(*services3.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockS3Service creates a new instance of mockS3Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockS3Service(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockS3Service {
	mock := &mockS3Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
