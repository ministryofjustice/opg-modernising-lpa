// Code generated by "enumerator -type StepName -empty"; DO NOT EDIT.

package progress

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FeeEvidenceSubmitted-1]
	_ = x[FeeEvidenceNotification-2]
	_ = x[FeeEvidenceApproved-3]
	_ = x[DonorPaid-4]
	_ = x[DonorProvedID-5]
	_ = x[DonorSignedLPA-6]
	_ = x[CertificateProvided-7]
	_ = x[AllAttorneysSignedLPA-8]
	_ = x[NoticesOfIntentSent-9]
	_ = x[LpaSubmitted-10]
	_ = x[StatutoryWaitingPeriodFinished-11]
	_ = x[LpaRegistered-12]
}

const _StepName_name = "FeeEvidenceSubmittedFeeEvidenceNotificationFeeEvidenceApprovedDonorPaidDonorProvedIDDonorSignedLPACertificateProvidedAllAttorneysSignedLPANoticesOfIntentSentLpaSubmittedStatutoryWaitingPeriodFinishedLpaRegistered"

var _StepName_index = [...]uint8{0, 20, 43, 62, 71, 84, 98, 117, 138, 157, 169, 199, 212}

func (i StepName) String() string {
	if i == 0 {
		return ""
	}
	i -= 1
	if i >= StepName(len(_StepName_index)-1) {
		return "StepName(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _StepName_name[_StepName_index[i]:_StepName_index[i+1]]
}

func (i StepName) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *StepName) UnmarshalText(text []byte) error {
	val, err := ParseStepName(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i StepName) IsFeeEvidenceSubmitted() bool {
	return i == FeeEvidenceSubmitted
}

func (i StepName) IsFeeEvidenceNotification() bool {
	return i == FeeEvidenceNotification
}

func (i StepName) IsFeeEvidenceApproved() bool {
	return i == FeeEvidenceApproved
}

func (i StepName) IsDonorPaid() bool {
	return i == DonorPaid
}

func (i StepName) IsDonorProvedID() bool {
	return i == DonorProvedID
}

func (i StepName) IsDonorSignedLPA() bool {
	return i == DonorSignedLPA
}

func (i StepName) IsCertificateProvided() bool {
	return i == CertificateProvided
}

func (i StepName) IsAllAttorneysSignedLPA() bool {
	return i == AllAttorneysSignedLPA
}

func (i StepName) IsNoticesOfIntentSent() bool {
	return i == NoticesOfIntentSent
}

func (i StepName) IsLpaSubmitted() bool {
	return i == LpaSubmitted
}

func (i StepName) IsStatutoryWaitingPeriodFinished() bool {
	return i == StatutoryWaitingPeriodFinished
}

func (i StepName) IsLpaRegistered() bool {
	return i == LpaRegistered
}

func ParseStepName(s string) (StepName, error) {
	switch s {
	case "FeeEvidenceSubmitted":
		return FeeEvidenceSubmitted, nil
	case "FeeEvidenceNotification":
		return FeeEvidenceNotification, nil
	case "FeeEvidenceApproved":
		return FeeEvidenceApproved, nil
	case "DonorPaid":
		return DonorPaid, nil
	case "DonorProvedID":
		return DonorProvedID, nil
	case "DonorSignedLPA":
		return DonorSignedLPA, nil
	case "CertificateProvided":
		return CertificateProvided, nil
	case "AllAttorneysSignedLPA":
		return AllAttorneysSignedLPA, nil
	case "NoticesOfIntentSent":
		return NoticesOfIntentSent, nil
	case "LpaSubmitted":
		return LpaSubmitted, nil
	case "StatutoryWaitingPeriodFinished":
		return StatutoryWaitingPeriodFinished, nil
	case "LpaRegistered":
		return LpaRegistered, nil
	default:
		return StepName(0), fmt.Errorf("invalid StepName '%s'", s)
	}
}

type StepNameOptions struct {
	FeeEvidenceSubmitted           StepName
	FeeEvidenceNotification        StepName
	FeeEvidenceApproved            StepName
	DonorPaid                      StepName
	DonorProvedID                  StepName
	DonorSignedLPA                 StepName
	CertificateProvided            StepName
	AllAttorneysSignedLPA          StepName
	NoticesOfIntentSent            StepName
	LpaSubmitted                   StepName
	StatutoryWaitingPeriodFinished StepName
	LpaRegistered                  StepName
}

var StepNameValues = StepNameOptions{
	FeeEvidenceSubmitted:           FeeEvidenceSubmitted,
	FeeEvidenceNotification:        FeeEvidenceNotification,
	FeeEvidenceApproved:            FeeEvidenceApproved,
	DonorPaid:                      DonorPaid,
	DonorProvedID:                  DonorProvedID,
	DonorSignedLPA:                 DonorSignedLPA,
	CertificateProvided:            CertificateProvided,
	AllAttorneysSignedLPA:          AllAttorneysSignedLPA,
	NoticesOfIntentSent:            NoticesOfIntentSent,
	LpaSubmitted:                   LpaSubmitted,
	StatutoryWaitingPeriodFinished: StatutoryWaitingPeriodFinished,
	LpaRegistered:                  LpaRegistered,
}

func (i StepName) Empty() bool {
	return i == StepName(0)
}
