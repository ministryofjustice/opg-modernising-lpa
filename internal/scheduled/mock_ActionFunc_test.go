// Code generated by mockery. DO NOT EDIT.

package scheduled

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockActionFunc is an autogenerated mock type for the ActionFunc type
type mockActionFunc struct {
	mock.Mock
}

type mockActionFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *mockActionFunc) EXPECT() *mockActionFunc_Expecter {
	return &mockActionFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, row
func (_m *mockActionFunc) Execute(ctx context.Context, row *Event) error {
	ret := _m.Called(ctx, row)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Event) error); ok {
		r0 = rf(ctx, row)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockActionFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type mockActionFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - row *Event
func (_e *mockActionFunc_Expecter) Execute(ctx interface{}, row interface{}) *mockActionFunc_Execute_Call {
	return &mockActionFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, row)}
}

func (_c *mockActionFunc_Execute_Call) Run(run func(ctx context.Context, row *Event)) *mockActionFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Event))
	})
	return _c
}

func (_c *mockActionFunc_Execute_Call) Return(_a0 error) *mockActionFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockActionFunc_Execute_Call) RunAndReturn(run func(context.Context, *Event) error) *mockActionFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// newMockActionFunc creates a new instance of mockActionFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockActionFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockActionFunc {
	mock := &mockActionFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
