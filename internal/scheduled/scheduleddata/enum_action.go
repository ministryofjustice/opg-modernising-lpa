// Code generated by "enumerator -type Action -trimprefix"; DO NOT EDIT.

package scheduleddata

import (
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ActionExpireDonorIdentity-1]
	_ = x[ActionRemindCertificateProviderToComplete-2]
	_ = x[ActionRemindCertificateProviderToConfirmIdentity-3]
	_ = x[ActionRemindAttorneyToComplete-4]
}

const _Action_name = "ExpireDonorIdentityRemindCertificateProviderToCompleteRemindCertificateProviderToConfirmIdentityRemindAttorneyToComplete"

var _Action_index = [...]uint8{0, 19, 54, 96, 120}

func (i Action) String() string {
	i -= 1
	if i >= Action(len(_Action_index)-1) {
		return "Action(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _Action_name[_Action_index[i]:_Action_index[i+1]]
}

func (i Action) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

func (i *Action) UnmarshalText(text []byte) error {
	val, err := ParseAction(string(text))
	if err != nil {
		return err
	}

	*i = val
	return nil
}

func (i Action) IsExpireDonorIdentity() bool {
	return i == ActionExpireDonorIdentity
}

func (i Action) IsRemindCertificateProviderToComplete() bool {
	return i == ActionRemindCertificateProviderToComplete
}

func (i Action) IsRemindCertificateProviderToConfirmIdentity() bool {
	return i == ActionRemindCertificateProviderToConfirmIdentity
}

func (i Action) IsRemindAttorneyToComplete() bool {
	return i == ActionRemindAttorneyToComplete
}

func ParseAction(s string) (Action, error) {
	switch s {
	case "ExpireDonorIdentity":
		return ActionExpireDonorIdentity, nil
	case "RemindCertificateProviderToComplete":
		return ActionRemindCertificateProviderToComplete, nil
	case "RemindCertificateProviderToConfirmIdentity":
		return ActionRemindCertificateProviderToConfirmIdentity, nil
	case "RemindAttorneyToComplete":
		return ActionRemindAttorneyToComplete, nil
	default:
		return Action(0), fmt.Errorf("invalid Action '%s'", s)
	}
}

type ActionOptions struct {
	ExpireDonorIdentity                        Action
	RemindCertificateProviderToComplete        Action
	RemindCertificateProviderToConfirmIdentity Action
	RemindAttorneyToComplete                   Action
}

var ActionValues = ActionOptions{
	ExpireDonorIdentity:                        ActionExpireDonorIdentity,
	RemindCertificateProviderToComplete:        ActionRemindCertificateProviderToComplete,
	RemindCertificateProviderToConfirmIdentity: ActionRemindCertificateProviderToConfirmIdentity,
	RemindAttorneyToComplete:                   ActionRemindAttorneyToComplete,
}
