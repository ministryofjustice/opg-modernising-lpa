// Code generated by mockery. DO NOT EDIT.

package scheduled

import (
	context "context"

	dynamo "github.com/ministryofjustice/opg-modernising-lpa/internal/dynamo"
	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// mockDynamoClient is an autogenerated mock type for the DynamoClient type
type mockDynamoClient struct {
	mock.Mock
}

type mockDynamoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDynamoClient) EXPECT() *mockDynamoClient_Expecter {
	return &mockDynamoClient_Expecter{mock: &_m.Mock}
}

// AllByKeys provides a mock function with given fields: ctx, keys
func (_m *mockDynamoClient) AllByKeys(ctx context.Context, keys []dynamo.Keys) ([]map[string]types.AttributeValue, error) {
	ret := _m.Called(ctx, keys)

	if len(ret) == 0 {
		panic("no return value specified for AllByKeys")
	}

	var r0 []map[string]types.AttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []dynamo.Keys) ([]map[string]types.AttributeValue, error)); ok {
		return rf(ctx, keys)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []dynamo.Keys) []map[string]types.AttributeValue); ok {
		r0 = rf(ctx, keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]types.AttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []dynamo.Keys) error); ok {
		r1 = rf(ctx, keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoClient_AllByKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllByKeys'
type mockDynamoClient_AllByKeys_Call struct {
	*mock.Call
}

// AllByKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []dynamo.Keys
func (_e *mockDynamoClient_Expecter) AllByKeys(ctx interface{}, keys interface{}) *mockDynamoClient_AllByKeys_Call {
	return &mockDynamoClient_AllByKeys_Call{Call: _e.mock.On("AllByKeys", ctx, keys)}
}

func (_c *mockDynamoClient_AllByKeys_Call) Run(run func(ctx context.Context, keys []dynamo.Keys)) *mockDynamoClient_AllByKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]dynamo.Keys))
	})
	return _c
}

func (_c *mockDynamoClient_AllByKeys_Call) Return(_a0 []map[string]types.AttributeValue, _a1 error) *mockDynamoClient_AllByKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoClient_AllByKeys_Call) RunAndReturn(run func(context.Context, []dynamo.Keys) ([]map[string]types.AttributeValue, error)) *mockDynamoClient_AllByKeys_Call {
	_c.Call.Return(run)
	return _c
}

// AllByLpaUIDAndPartialSK provides a mock function with given fields: ctx, uid, partialSK
func (_m *mockDynamoClient) AllByLpaUIDAndPartialSK(ctx context.Context, uid string, partialSK dynamo.SK) ([]dynamo.Keys, error) {
	ret := _m.Called(ctx, uid, partialSK)

	if len(ret) == 0 {
		panic("no return value specified for AllByLpaUIDAndPartialSK")
	}

	var r0 []dynamo.Keys
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, dynamo.SK) ([]dynamo.Keys, error)); ok {
		return rf(ctx, uid, partialSK)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, dynamo.SK) []dynamo.Keys); ok {
		r0 = rf(ctx, uid, partialSK)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dynamo.Keys)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, dynamo.SK) error); ok {
		r1 = rf(ctx, uid, partialSK)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoClient_AllByLpaUIDAndPartialSK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllByLpaUIDAndPartialSK'
type mockDynamoClient_AllByLpaUIDAndPartialSK_Call struct {
	*mock.Call
}

// AllByLpaUIDAndPartialSK is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - partialSK dynamo.SK
func (_e *mockDynamoClient_Expecter) AllByLpaUIDAndPartialSK(ctx interface{}, uid interface{}, partialSK interface{}) *mockDynamoClient_AllByLpaUIDAndPartialSK_Call {
	return &mockDynamoClient_AllByLpaUIDAndPartialSK_Call{Call: _e.mock.On("AllByLpaUIDAndPartialSK", ctx, uid, partialSK)}
}

func (_c *mockDynamoClient_AllByLpaUIDAndPartialSK_Call) Run(run func(ctx context.Context, uid string, partialSK dynamo.SK)) *mockDynamoClient_AllByLpaUIDAndPartialSK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(dynamo.SK))
	})
	return _c
}

func (_c *mockDynamoClient_AllByLpaUIDAndPartialSK_Call) Return(_a0 []dynamo.Keys, _a1 error) *mockDynamoClient_AllByLpaUIDAndPartialSK_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoClient_AllByLpaUIDAndPartialSK_Call) RunAndReturn(run func(context.Context, string, dynamo.SK) ([]dynamo.Keys, error)) *mockDynamoClient_AllByLpaUIDAndPartialSK_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteKeys provides a mock function with given fields: ctx, keys
func (_m *mockDynamoClient) DeleteKeys(ctx context.Context, keys []dynamo.Keys) error {
	ret := _m.Called(ctx, keys)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeys")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []dynamo.Keys) error); ok {
		r0 = rf(ctx, keys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_DeleteKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteKeys'
type mockDynamoClient_DeleteKeys_Call struct {
	*mock.Call
}

// DeleteKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []dynamo.Keys
func (_e *mockDynamoClient_Expecter) DeleteKeys(ctx interface{}, keys interface{}) *mockDynamoClient_DeleteKeys_Call {
	return &mockDynamoClient_DeleteKeys_Call{Call: _e.mock.On("DeleteKeys", ctx, keys)}
}

func (_c *mockDynamoClient_DeleteKeys_Call) Run(run func(ctx context.Context, keys []dynamo.Keys)) *mockDynamoClient_DeleteKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]dynamo.Keys))
	})
	return _c
}

func (_c *mockDynamoClient_DeleteKeys_Call) Return(_a0 error) *mockDynamoClient_DeleteKeys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_DeleteKeys_Call) RunAndReturn(run func(context.Context, []dynamo.Keys) error) *mockDynamoClient_DeleteKeys_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function with given fields: ctx, oldKeys, value
func (_m *mockDynamoClient) Move(ctx context.Context, oldKeys dynamo.Keys, value interface{}) error {
	ret := _m.Called(ctx, oldKeys, value)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.Keys, interface{}) error); ok {
		r0 = rf(ctx, oldKeys, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type mockDynamoClient_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - ctx context.Context
//   - oldKeys dynamo.Keys
//   - value interface{}
func (_e *mockDynamoClient_Expecter) Move(ctx interface{}, oldKeys interface{}, value interface{}) *mockDynamoClient_Move_Call {
	return &mockDynamoClient_Move_Call{Call: _e.mock.On("Move", ctx, oldKeys, value)}
}

func (_c *mockDynamoClient_Move_Call) Run(run func(ctx context.Context, oldKeys dynamo.Keys, value interface{})) *mockDynamoClient_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.Keys), args[2].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_Move_Call) Return(_a0 error) *mockDynamoClient_Move_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_Move_Call) RunAndReturn(run func(context.Context, dynamo.Keys, interface{}) error) *mockDynamoClient_Move_Call {
	_c.Call.Return(run)
	return _c
}

// OneByPK provides a mock function with given fields: ctx, pk, v
func (_m *mockDynamoClient) OneByPK(ctx context.Context, pk dynamo.PK, v interface{}) error {
	ret := _m.Called(ctx, pk, v)

	if len(ret) == 0 {
		panic("no return value specified for OneByPK")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dynamo.PK, interface{}) error); ok {
		r0 = rf(ctx, pk, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_OneByPK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OneByPK'
type mockDynamoClient_OneByPK_Call struct {
	*mock.Call
}

// OneByPK is a helper method to define mock.On call
//   - ctx context.Context
//   - pk dynamo.PK
//   - v interface{}
func (_e *mockDynamoClient_Expecter) OneByPK(ctx interface{}, pk interface{}, v interface{}) *mockDynamoClient_OneByPK_Call {
	return &mockDynamoClient_OneByPK_Call{Call: _e.mock.On("OneByPK", ctx, pk, v)}
}

func (_c *mockDynamoClient_OneByPK_Call) Run(run func(ctx context.Context, pk dynamo.PK, v interface{})) *mockDynamoClient_OneByPK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dynamo.PK), args[2].(interface{}))
	})
	return _c
}

func (_c *mockDynamoClient_OneByPK_Call) Return(_a0 error) *mockDynamoClient_OneByPK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_OneByPK_Call) RunAndReturn(run func(context.Context, dynamo.PK, interface{}) error) *mockDynamoClient_OneByPK_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTransaction provides a mock function with given fields: ctx, transaction
func (_m *mockDynamoClient) WriteTransaction(ctx context.Context, transaction *dynamo.Transaction) error {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for WriteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamo.Transaction) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDynamoClient_WriteTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTransaction'
type mockDynamoClient_WriteTransaction_Call struct {
	*mock.Call
}

// WriteTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - transaction *dynamo.Transaction
func (_e *mockDynamoClient_Expecter) WriteTransaction(ctx interface{}, transaction interface{}) *mockDynamoClient_WriteTransaction_Call {
	return &mockDynamoClient_WriteTransaction_Call{Call: _e.mock.On("WriteTransaction", ctx, transaction)}
}

func (_c *mockDynamoClient_WriteTransaction_Call) Run(run func(ctx context.Context, transaction *dynamo.Transaction)) *mockDynamoClient_WriteTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dynamo.Transaction))
	})
	return _c
}

func (_c *mockDynamoClient_WriteTransaction_Call) Return(_a0 error) *mockDynamoClient_WriteTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynamoClient_WriteTransaction_Call) RunAndReturn(run func(context.Context, *dynamo.Transaction) error) *mockDynamoClient_WriteTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDynamoClient creates a new instance of mockDynamoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDynamoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDynamoClient {
	mock := &mockDynamoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
