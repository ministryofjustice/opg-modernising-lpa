// Code generated by mockery. DO NOT EDIT.

package scheduled

import (
	context "context"

	donordata "github.com/ministryofjustice/opg-modernising-lpa/internal/donor/donordata"
	lpadata "github.com/ministryofjustice/opg-modernising-lpa/internal/lpastore/lpadata"

	mock "github.com/stretchr/testify/mock"
)

// mockLpaStoreResolvingService is an autogenerated mock type for the LpaStoreResolvingService type
type mockLpaStoreResolvingService struct {
	mock.Mock
}

type mockLpaStoreResolvingService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLpaStoreResolvingService) EXPECT() *mockLpaStoreResolvingService_Expecter {
	return &mockLpaStoreResolvingService_Expecter{mock: &_m.Mock}
}

// Resolve provides a mock function with given fields: ctx, provided
func (_m *mockLpaStoreResolvingService) Resolve(ctx context.Context, provided *donordata.Provided) (*lpadata.Lpa, error) {
	ret := _m.Called(ctx, provided)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 *lpadata.Lpa
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) (*lpadata.Lpa, error)); ok {
		return rf(ctx, provided)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *donordata.Provided) *lpadata.Lpa); ok {
		r0 = rf(ctx, provided)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lpadata.Lpa)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *donordata.Provided) error); ok {
		r1 = rf(ctx, provided)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockLpaStoreResolvingService_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type mockLpaStoreResolvingService_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - ctx context.Context
//   - provided *donordata.Provided
func (_e *mockLpaStoreResolvingService_Expecter) Resolve(ctx interface{}, provided interface{}) *mockLpaStoreResolvingService_Resolve_Call {
	return &mockLpaStoreResolvingService_Resolve_Call{Call: _e.mock.On("Resolve", ctx, provided)}
}

func (_c *mockLpaStoreResolvingService_Resolve_Call) Run(run func(ctx context.Context, provided *donordata.Provided)) *mockLpaStoreResolvingService_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*donordata.Provided))
	})
	return _c
}

func (_c *mockLpaStoreResolvingService_Resolve_Call) Return(_a0 *lpadata.Lpa, _a1 error) *mockLpaStoreResolvingService_Resolve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockLpaStoreResolvingService_Resolve_Call) RunAndReturn(run func(context.Context, *donordata.Provided) (*lpadata.Lpa, error)) *mockLpaStoreResolvingService_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// newMockLpaStoreResolvingService creates a new instance of mockLpaStoreResolvingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLpaStoreResolvingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLpaStoreResolvingService {
	mock := &mockLpaStoreResolvingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
