// Code generated by mockery v2.42.0. DO NOT EDIT.

package dynamo

import (
	context "context"

	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	mock "github.com/stretchr/testify/mock"
)

// mockDynamoDB is an autogenerated mock type for the dynamoDB type
type mockDynamoDB struct {
	mock.Mock
}

type mockDynamoDB_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDynamoDB) EXPECT() *mockDynamoDB_Expecter {
	return &mockDynamoDB_Expecter{mock: &_m.Mock}
}

// BatchGetItem provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockDynamoDB) BatchGetItem(_a0 context.Context, _a1 *dynamodb.BatchGetItemInput, _a2 ...func(*dynamodb.Options)) (*dynamodb.BatchGetItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetItem")
	}

	var r0 *dynamodb.BatchGetItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchGetItemInput, ...func(*dynamodb.Options)) (*dynamodb.BatchGetItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchGetItemInput, ...func(*dynamodb.Options)) *dynamodb.BatchGetItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchGetItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.BatchGetItemInput, ...func(*dynamodb.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoDB_BatchGetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGetItem'
type mockDynamoDB_BatchGetItem_Call struct {
	*mock.Call
}

// BatchGetItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.BatchGetItemInput
//   - _a2 ...func(*dynamodb.Options)
func (_e *mockDynamoDB_Expecter) BatchGetItem(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockDynamoDB_BatchGetItem_Call {
	return &mockDynamoDB_BatchGetItem_Call{Call: _e.mock.On("BatchGetItem",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockDynamoDB_BatchGetItem_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.BatchGetItemInput, _a2 ...func(*dynamodb.Options))) *mockDynamoDB_BatchGetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*dynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*dynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.BatchGetItemInput), variadicArgs...)
	})
	return _c
}

func (_c *mockDynamoDB_BatchGetItem_Call) Return(_a0 *dynamodb.BatchGetItemOutput, _a1 error) *mockDynamoDB_BatchGetItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoDB_BatchGetItem_Call) RunAndReturn(run func(context.Context, *dynamodb.BatchGetItemInput, ...func(*dynamodb.Options)) (*dynamodb.BatchGetItemOutput, error)) *mockDynamoDB_BatchGetItem_Call {
	_c.Call.Return(run)
	return _c
}

// BatchWriteItem provides a mock function with given fields: ctx, params, optFns
func (_m *mockDynamoDB) BatchWriteItem(ctx context.Context, params *dynamodb.BatchWriteItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.BatchWriteItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchWriteItem")
	}

	var r0 *dynamodb.BatchWriteItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchWriteItemInput, ...func(*dynamodb.Options)) (*dynamodb.BatchWriteItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.BatchWriteItemInput, ...func(*dynamodb.Options)) *dynamodb.BatchWriteItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.BatchWriteItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.BatchWriteItemInput, ...func(*dynamodb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoDB_BatchWriteItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchWriteItem'
type mockDynamoDB_BatchWriteItem_Call struct {
	*mock.Call
}

// BatchWriteItem is a helper method to define mock.On call
//   - ctx context.Context
//   - params *dynamodb.BatchWriteItemInput
//   - optFns ...func(*dynamodb.Options)
func (_e *mockDynamoDB_Expecter) BatchWriteItem(ctx interface{}, params interface{}, optFns ...interface{}) *mockDynamoDB_BatchWriteItem_Call {
	return &mockDynamoDB_BatchWriteItem_Call{Call: _e.mock.On("BatchWriteItem",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *mockDynamoDB_BatchWriteItem_Call) Run(run func(ctx context.Context, params *dynamodb.BatchWriteItemInput, optFns ...func(*dynamodb.Options))) *mockDynamoDB_BatchWriteItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*dynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*dynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.BatchWriteItemInput), variadicArgs...)
	})
	return _c
}

func (_c *mockDynamoDB_BatchWriteItem_Call) Return(_a0 *dynamodb.BatchWriteItemOutput, _a1 error) *mockDynamoDB_BatchWriteItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoDB_BatchWriteItem_Call) RunAndReturn(run func(context.Context, *dynamodb.BatchWriteItemInput, ...func(*dynamodb.Options)) (*dynamodb.BatchWriteItemOutput, error)) *mockDynamoDB_BatchWriteItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItem provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockDynamoDB) DeleteItem(_a0 context.Context, _a1 *dynamodb.DeleteItemInput, _a2 ...func(*dynamodb.Options)) (*dynamodb.DeleteItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 *dynamodb.DeleteItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DeleteItemInput, ...func(*dynamodb.Options)) (*dynamodb.DeleteItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.DeleteItemInput, ...func(*dynamodb.Options)) *dynamodb.DeleteItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DeleteItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.DeleteItemInput, ...func(*dynamodb.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoDB_DeleteItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItem'
type mockDynamoDB_DeleteItem_Call struct {
	*mock.Call
}

// DeleteItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.DeleteItemInput
//   - _a2 ...func(*dynamodb.Options)
func (_e *mockDynamoDB_Expecter) DeleteItem(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockDynamoDB_DeleteItem_Call {
	return &mockDynamoDB_DeleteItem_Call{Call: _e.mock.On("DeleteItem",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockDynamoDB_DeleteItem_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.DeleteItemInput, _a2 ...func(*dynamodb.Options))) *mockDynamoDB_DeleteItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*dynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*dynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.DeleteItemInput), variadicArgs...)
	})
	return _c
}

func (_c *mockDynamoDB_DeleteItem_Call) Return(_a0 *dynamodb.DeleteItemOutput, _a1 error) *mockDynamoDB_DeleteItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoDB_DeleteItem_Call) RunAndReturn(run func(context.Context, *dynamodb.DeleteItemInput, ...func(*dynamodb.Options)) (*dynamodb.DeleteItemOutput, error)) *mockDynamoDB_DeleteItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetItem provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockDynamoDB) GetItem(_a0 context.Context, _a1 *dynamodb.GetItemInput, _a2 ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 *dynamodb.GetItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.GetItemInput, ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.GetItemInput, ...func(*dynamodb.Options)) *dynamodb.GetItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.GetItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.GetItemInput, ...func(*dynamodb.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoDB_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type mockDynamoDB_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.GetItemInput
//   - _a2 ...func(*dynamodb.Options)
func (_e *mockDynamoDB_Expecter) GetItem(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockDynamoDB_GetItem_Call {
	return &mockDynamoDB_GetItem_Call{Call: _e.mock.On("GetItem",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockDynamoDB_GetItem_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.GetItemInput, _a2 ...func(*dynamodb.Options))) *mockDynamoDB_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*dynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*dynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.GetItemInput), variadicArgs...)
	})
	return _c
}

func (_c *mockDynamoDB_GetItem_Call) Return(_a0 *dynamodb.GetItemOutput, _a1 error) *mockDynamoDB_GetItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoDB_GetItem_Call) RunAndReturn(run func(context.Context, *dynamodb.GetItemInput, ...func(*dynamodb.Options)) (*dynamodb.GetItemOutput, error)) *mockDynamoDB_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// PutItem provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockDynamoDB) PutItem(_a0 context.Context, _a1 *dynamodb.PutItemInput, _a2 ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutItem")
	}

	var r0 *dynamodb.PutItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.PutItemInput, ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.PutItemInput, ...func(*dynamodb.Options)) *dynamodb.PutItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.PutItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.PutItemInput, ...func(*dynamodb.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoDB_PutItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutItem'
type mockDynamoDB_PutItem_Call struct {
	*mock.Call
}

// PutItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.PutItemInput
//   - _a2 ...func(*dynamodb.Options)
func (_e *mockDynamoDB_Expecter) PutItem(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockDynamoDB_PutItem_Call {
	return &mockDynamoDB_PutItem_Call{Call: _e.mock.On("PutItem",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockDynamoDB_PutItem_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.PutItemInput, _a2 ...func(*dynamodb.Options))) *mockDynamoDB_PutItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*dynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*dynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.PutItemInput), variadicArgs...)
	})
	return _c
}

func (_c *mockDynamoDB_PutItem_Call) Return(_a0 *dynamodb.PutItemOutput, _a1 error) *mockDynamoDB_PutItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoDB_PutItem_Call) RunAndReturn(run func(context.Context, *dynamodb.PutItemInput, ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error)) *mockDynamoDB_PutItem_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockDynamoDB) Query(_a0 context.Context, _a1 *dynamodb.QueryInput, _a2 ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *dynamodb.QueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.QueryInput, ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.QueryInput, ...func(*dynamodb.Options)) *dynamodb.QueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.QueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.QueryInput, ...func(*dynamodb.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoDB_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type mockDynamoDB_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.QueryInput
//   - _a2 ...func(*dynamodb.Options)
func (_e *mockDynamoDB_Expecter) Query(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockDynamoDB_Query_Call {
	return &mockDynamoDB_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockDynamoDB_Query_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.QueryInput, _a2 ...func(*dynamodb.Options))) *mockDynamoDB_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*dynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*dynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.QueryInput), variadicArgs...)
	})
	return _c
}

func (_c *mockDynamoDB_Query_Call) Return(_a0 *dynamodb.QueryOutput, _a1 error) *mockDynamoDB_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoDB_Query_Call) RunAndReturn(run func(context.Context, *dynamodb.QueryInput, ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error)) *mockDynamoDB_Query_Call {
	_c.Call.Return(run)
	return _c
}

// TransactWriteItems provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockDynamoDB) TransactWriteItems(_a0 context.Context, _a1 *dynamodb.TransactWriteItemsInput, _a2 ...func(*dynamodb.Options)) (*dynamodb.TransactWriteItemsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TransactWriteItems")
	}

	var r0 *dynamodb.TransactWriteItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.TransactWriteItemsInput, ...func(*dynamodb.Options)) (*dynamodb.TransactWriteItemsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.TransactWriteItemsInput, ...func(*dynamodb.Options)) *dynamodb.TransactWriteItemsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.TransactWriteItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.TransactWriteItemsInput, ...func(*dynamodb.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoDB_TransactWriteItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransactWriteItems'
type mockDynamoDB_TransactWriteItems_Call struct {
	*mock.Call
}

// TransactWriteItems is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.TransactWriteItemsInput
//   - _a2 ...func(*dynamodb.Options)
func (_e *mockDynamoDB_Expecter) TransactWriteItems(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockDynamoDB_TransactWriteItems_Call {
	return &mockDynamoDB_TransactWriteItems_Call{Call: _e.mock.On("TransactWriteItems",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockDynamoDB_TransactWriteItems_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.TransactWriteItemsInput, _a2 ...func(*dynamodb.Options))) *mockDynamoDB_TransactWriteItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*dynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*dynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.TransactWriteItemsInput), variadicArgs...)
	})
	return _c
}

func (_c *mockDynamoDB_TransactWriteItems_Call) Return(_a0 *dynamodb.TransactWriteItemsOutput, _a1 error) *mockDynamoDB_TransactWriteItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoDB_TransactWriteItems_Call) RunAndReturn(run func(context.Context, *dynamodb.TransactWriteItemsInput, ...func(*dynamodb.Options)) (*dynamodb.TransactWriteItemsOutput, error)) *mockDynamoDB_TransactWriteItems_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateItem provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockDynamoDB) UpdateItem(_a0 context.Context, _a1 *dynamodb.UpdateItemInput, _a2 ...func(*dynamodb.Options)) (*dynamodb.UpdateItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateItem")
	}

	var r0 *dynamodb.UpdateItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateItemInput, ...func(*dynamodb.Options)) (*dynamodb.UpdateItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dynamodb.UpdateItemInput, ...func(*dynamodb.Options)) *dynamodb.UpdateItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.UpdateItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dynamodb.UpdateItemInput, ...func(*dynamodb.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDynamoDB_UpdateItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateItem'
type mockDynamoDB_UpdateItem_Call struct {
	*mock.Call
}

// UpdateItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *dynamodb.UpdateItemInput
//   - _a2 ...func(*dynamodb.Options)
func (_e *mockDynamoDB_Expecter) UpdateItem(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *mockDynamoDB_UpdateItem_Call {
	return &mockDynamoDB_UpdateItem_Call{Call: _e.mock.On("UpdateItem",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *mockDynamoDB_UpdateItem_Call) Run(run func(_a0 context.Context, _a1 *dynamodb.UpdateItemInput, _a2 ...func(*dynamodb.Options))) *mockDynamoDB_UpdateItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*dynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*dynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*dynamodb.UpdateItemInput), variadicArgs...)
	})
	return _c
}

func (_c *mockDynamoDB_UpdateItem_Call) Return(_a0 *dynamodb.UpdateItemOutput, _a1 error) *mockDynamoDB_UpdateItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDynamoDB_UpdateItem_Call) RunAndReturn(run func(context.Context, *dynamodb.UpdateItemInput, ...func(*dynamodb.Options)) (*dynamodb.UpdateItemOutput, error)) *mockDynamoDB_UpdateItem_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDynamoDB creates a new instance of mockDynamoDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDynamoDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDynamoDB {
	mock := &mockDynamoDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
