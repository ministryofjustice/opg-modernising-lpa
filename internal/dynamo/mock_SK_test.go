// Code generated by mockery. DO NOT EDIT.

package dynamo

import mock "github.com/stretchr/testify/mock"

// mockSK is an autogenerated mock type for the SK type
type mockSK struct {
	mock.Mock
}

type mockSK_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSK) EXPECT() *mockSK_Expecter {
	return &mockSK_Expecter{mock: &_m.Mock}
}

// SK provides a mock function with no fields
func (_m *mockSK) SK() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SK")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockSK_SK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SK'
type mockSK_SK_Call struct {
	*mock.Call
}

// SK is a helper method to define mock.On call
func (_e *mockSK_Expecter) SK() *mockSK_SK_Call {
	return &mockSK_SK_Call{Call: _e.mock.On("SK")}
}

func (_c *mockSK_SK_Call) Run(run func()) *mockSK_SK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSK_SK_Call) Return(_a0 string) *mockSK_SK_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSK_SK_Call) RunAndReturn(run func() string) *mockSK_SK_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSK creates a new instance of mockSK. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSK(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSK {
	mock := &mockSK{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
