// Code generated by mockery v2.42.2. DO NOT EDIT.

package sharecode

import (
	context "context"

	actor "github.com/ministryofjustice/opg-modernising-lpa/internal/actor"

	mock "github.com/stretchr/testify/mock"

	sharecodedata "github.com/ministryofjustice/opg-modernising-lpa/internal/sharecode/sharecodedata"
)

// mockShareCodeStore is an autogenerated mock type for the ShareCodeStore type
type mockShareCodeStore struct {
	mock.Mock
}

type mockShareCodeStore_Expecter struct {
	mock *mock.Mock
}

func (_m *mockShareCodeStore) EXPECT() *mockShareCodeStore_Expecter {
	return &mockShareCodeStore_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, actorType, shareCode
func (_m *mockShareCodeStore) Get(ctx context.Context, actorType actor.Type, shareCode string) (sharecodedata.Data, error) {
	ret := _m.Called(ctx, actorType, shareCode)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 sharecodedata.Data
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, actor.Type, string) (sharecodedata.Data, error)); ok {
		return rf(ctx, actorType, shareCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, actor.Type, string) sharecodedata.Data); ok {
		r0 = rf(ctx, actorType, shareCode)
	} else {
		r0 = ret.Get(0).(sharecodedata.Data)
	}

	if rf, ok := ret.Get(1).(func(context.Context, actor.Type, string) error); ok {
		r1 = rf(ctx, actorType, shareCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockShareCodeStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockShareCodeStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - actorType actor.Type
//   - shareCode string
func (_e *mockShareCodeStore_Expecter) Get(ctx interface{}, actorType interface{}, shareCode interface{}) *mockShareCodeStore_Get_Call {
	return &mockShareCodeStore_Get_Call{Call: _e.mock.On("Get", ctx, actorType, shareCode)}
}

func (_c *mockShareCodeStore_Get_Call) Run(run func(ctx context.Context, actorType actor.Type, shareCode string)) *mockShareCodeStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(actor.Type), args[2].(string))
	})
	return _c
}

func (_c *mockShareCodeStore_Get_Call) Return(_a0 sharecodedata.Data, _a1 error) *mockShareCodeStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockShareCodeStore_Get_Call) RunAndReturn(run func(context.Context, actor.Type, string) (sharecodedata.Data, error)) *mockShareCodeStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ctx, actorType, shareCode, data
func (_m *mockShareCodeStore) Put(ctx context.Context, actorType actor.Type, shareCode string, data sharecodedata.Data) error {
	ret := _m.Called(ctx, actorType, shareCode, data)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, actor.Type, string, sharecodedata.Data) error); ok {
		r0 = rf(ctx, actorType, shareCode, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockShareCodeStore_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type mockShareCodeStore_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - actorType actor.Type
//   - shareCode string
//   - data sharecodedata.Data
func (_e *mockShareCodeStore_Expecter) Put(ctx interface{}, actorType interface{}, shareCode interface{}, data interface{}) *mockShareCodeStore_Put_Call {
	return &mockShareCodeStore_Put_Call{Call: _e.mock.On("Put", ctx, actorType, shareCode, data)}
}

func (_c *mockShareCodeStore_Put_Call) Run(run func(ctx context.Context, actorType actor.Type, shareCode string, data sharecodedata.Data)) *mockShareCodeStore_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(actor.Type), args[2].(string), args[3].(sharecodedata.Data))
	})
	return _c
}

func (_c *mockShareCodeStore_Put_Call) Return(_a0 error) *mockShareCodeStore_Put_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockShareCodeStore_Put_Call) RunAndReturn(run func(context.Context, actor.Type, string, sharecodedata.Data) error) *mockShareCodeStore_Put_Call {
	_c.Call.Return(run)
	return _c
}

// newMockShareCodeStore creates a new instance of mockShareCodeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockShareCodeStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockShareCodeStore {
	mock := &mockShareCodeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
