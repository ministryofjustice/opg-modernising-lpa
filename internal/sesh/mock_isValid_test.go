// Code generated by mockery v2.42.0. DO NOT EDIT.

package sesh

import mock "github.com/stretchr/testify/mock"

// mockIsValid is an autogenerated mock type for the isValid type
type mockIsValid struct {
	mock.Mock
}

type mockIsValid_Expecter struct {
	mock *mock.Mock
}

func (_m *mockIsValid) EXPECT() *mockIsValid_Expecter {
	return &mockIsValid_Expecter{mock: &_m.Mock}
}

// Valid provides a mock function with given fields:
func (_m *mockIsValid) Valid() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Valid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockIsValid_Valid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Valid'
type mockIsValid_Valid_Call struct {
	*mock.Call
}

// Valid is a helper method to define mock.On call
func (_e *mockIsValid_Expecter) Valid() *mockIsValid_Valid_Call {
	return &mockIsValid_Valid_Call{Call: _e.mock.On("Valid")}
}

func (_c *mockIsValid_Valid_Call) Run(run func()) *mockIsValid_Valid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockIsValid_Valid_Call) Return(_a0 bool) *mockIsValid_Valid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockIsValid_Valid_Call) RunAndReturn(run func() bool) *mockIsValid_Valid_Call {
	_c.Call.Return(run)
	return _c
}

// newMockIsValid creates a new instance of mockIsValid. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockIsValid(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockIsValid {
	mock := &mockIsValid{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
