name: "[Job] Manage Image Tags and Environment Workspaces"

on:
  workflow_call:
    inputs:
      changes_detected:
        description: 'Boolean value for changes detected in /app from main'
        required: true
        type: string
    outputs:
      version_tag:
        description: "Docker Image Tag"
        value: ${{ jobs.consolidate_tags.outputs.docker_tag }}
      environment_workspace_name:
        description: "Terraform Environment Workspace Name"
        value: ${{ jobs.generate_environment_workspace_name.outputs.environment_workspace_name }}
      s3_av_scanner_zip_tag:
        description: "Version tag for S3 antivirus lambda zip packages"
        value: ${{ jobs.pull_s3_av_tag.outputs.s3_av_scanner_zip_tag }}

jobs:
  create_tags:
    if : ${{ inputs.changes_detected == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Extract branch name
        id: extract_branch
        run: |
          if [ "$GITHUB_EVENT_NAME" == "push" ]; then
            echo BRANCH_NAME=main >> $GITHUB_ENV
          else
            branch=${{ github.head_ref }}
            branch=${branch//-}
            branch=${branch//_}
            branch=${branch//\/}
            echo BRANCH_NAME=${branch} >> $GITHUB_ENV
          fi
      - name: Bump version
        id: bump_version
        uses: anothrNick/github-tag-action@1.71.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INITIAL_VERSION: 0.0.0
          DEFAULT_BUMP: minor
          PRERELEASE: true
          PRERELEASE_SUFFIX: ${{ env.BRANCH_NAME }}
          RELEASE_BRANCHES: main
          WITH_V: true
    outputs:
      docker_tag: ${{ steps.bump_version.outputs.tag }}

  generate_environment_workspace_name:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Generate workspace name
        id: name_workspace
        run: |
          workspace=${{ github.event.number }}
          if ${{ contains(fromJSON('["weblate-pr"]'), github.head_ref) }}; then
            workspace="weblate"
          fi
          echo "name=${workspace}" >> $GITHUB_OUTPUT
          echo ${workspace}
    outputs:
      environment_workspace_name: ${{ steps.name_workspace.outputs.name }}

  pull_tags:
    if : |
      always() &&
      needs.create_tags.result == 'skipped'
    runs-on: ubuntu-latest
    needs: [
      create_tags,
      generate_environment_workspace_name
    ]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::311462405659:role/modernising-lpa-github-actions-ssm-get-parameter
          role-duration-seconds: 900
          role-session-name: GithubActionsSSMGetParameter
      - name: Pull ${{ needs.get_environment_for_tag.outputs.environment_tag_to_pull }} tag
        id: pull_tag
        run: |
          key="/modernising-lpa/container-version/${{ needs.generate_environment_workspace_name.outputs.environment_workspace_name }}"
          value=$(aws ssm get-parameter --name "$key" --query 'Parameter.Value' --output text 2>/dev/null || true)
          if [ -z "$value" ]; then
              key="/modernising-lpa/container-version/production"
              value=$(aws ssm get-parameter --name "$key" --query 'Parameter.Value' --output text)
          fi
          echo "Using $key: $value"

          echo "tag=${value}" >> $GITHUB_OUTPUT
          echo "env=${key}" >> $GITHUB_OUTPUT
    outputs:
      docker_tag: ${{ steps.pull_tag.outputs.tag }}
      tag_from: ${{ steps.pull_tag.outputs.env }}

  pull_s3_av_tag:
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/modernising-lpa-github-actions-ssm-get-parameter
          role-duration-seconds: 900
          role-session-name: GithubActionsSSMGetParameter
      - name: Pull S3 AV Zip tag
        id: pull_s3_av_tag
        run: |
          key="/opg-s3-antivirus/zip-version-main"
          value=$(aws ssm get-parameter --name "$key" --query 'Parameter.Value' --output text 2>/dev/null || true)
          echo "Using $key: $value"
          echo "tag=${value}" >> $GITHUB_OUTPUT
    outputs:
      s3_av_scanner_zip_tag: ${{ steps.pull_s3_av_tag.outputs.tag }}

  consolidate_tags:
    needs: [
      create_tags,
      pull_tags,
      generate_environment_workspace_name
      ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: consolidate tags
        id: consolidate_tags
        run: |
          if ${{needs.create_tags.result == 'skipped'}}; then
            echo "tag=${{needs.pull_tags.outputs.docker_tag}}" >> $GITHUB_OUTPUT
            echo '### Tag for deployment ${{needs.pull_tags.outputs.docker_tag}} pulled from ${{needs.pull_tags.outputs.tag_from}}' >> $GITHUB_STEP_SUMMARY
          else
            echo "tag=${{needs.create_tags.outputs.docker_tag}}" >> $GITHUB_OUTPUT
            echo '### New tag for deployment ${{needs.create_tags.outputs.docker_tag}}' >> $GITHUB_STEP_SUMMARY
          fi
    outputs:
      docker_tag: ${{ steps.consolidate_tags.outputs.tag }}
