name: "[Job] Manage AWS Environment Infrastructure"

on:
  workflow_call:
    inputs:
      workspace_name:
        description: 'The terraform workspace to target for environment actions'
        required: true
        type: string
      version_tag:
        description: 'The docker image tag to deploy in the environment'
        required: true
        type: string
      checkout_tag:
        description: 'Ref or tag to checkout'
        default: ${{ github.ref }}
        required: false
        type: string
      public_access_enabled:
        description: 'Enable public access to the environment?'
        default: false
        required: false
        type: boolean
    outputs:
      terraform_workspace_name:
        description: "Name of Terraform workspace"
        value: ${{ jobs.terraform_environment_workflow.outputs.terraform_workspace_name }}
      terraform_container_version:
        description: "Container version deployed by Terraform"
        value: ${{ jobs.terraform_environment_workflow.outputs.terraform_container_version }}
      url:
        description: "URL for environment"
        value: ${{ jobs.terraform_environment_workflow.outputs.url }}
      environment_config_json:
        description: "Environment config JSON"
        value: ${{ jobs.terraform_environment_workflow.outputs.environment_config_json }}
    secrets:
      aws_access_key_id:
        description: 'AWS Access Key ID'
        required: true
      aws_secret_access_key:
        description: 'AWS Secret Access Key'
        required: true
      ssh_deploy_key:
        description: 'SSH Deploy Key'
        required: true
      github_access_token:
        description: 'Github Token'
        required: true
      pagerduty_api_key:
        description: 'Pagerduty API Key'
        required: true

permissions:
  pull-requests: write
  issues: write

jobs:
  terraform_environment_workflow:
    runs-on: ubuntu-latest
    outputs:
      terraform_workspace_name: ${{ steps.terraform_outputs.outputs.workspace_name }}
      terraform_container_version: ${{ steps.terraform_outputs.outputs.container_version }}
      url: ${{ steps.terraform_outputs.outputs.url }}
      environment_config_json: ${{ steps.terraform_outputs.outputs.environment_config_json }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout_tag }}
          fetch-depth: '0'
      - uses: unfor19/install-aws-cli-action@v1
      - name: Parse terraform version
        id: tf_version_setup
        run: |
          if [ -f ./versions.tf ]; then
            terraform_version=$(cat ./versions.tf | ../../scripts/./terraform-version.sh)
            echo "- Terraform version: [${terraform_version}]" >> $GITHUB_STEP_SUMMARY
            echo "TERRAFORM_VERSION=${terraform_version}" >> $GITHUB_OUTPUT
          fi
      - name: "Terraform version [${{ steps.tf_version_setup.outputs.TERRAFORM_VERSION }}]"
        run: echo "terraform version [${{ steps.tf_version_setup.outputs.TERRAFORM_VERSION }}]"
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.tf_version_setup.outputs.TERRAFORM_VERSION }}
      # - uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 1.5.2
          terraform_wrapper: false
      - name: Configure AWS Credentials For Terraform
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: eu-west-1
          role-duration-seconds: 3600
          role-session-name: OPGModernisingLPATerraformGithubAction
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.ssh_deploy_key }}

      - name: Lint Terraform
        id: tf_lint
        run: terraform fmt -check -recursive
        working-directory: ./terraform/environment
        continue-on-error: true

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: ./terraform/environment

      - name: Terraform Plan
        id: terraform_plan
        env:
          TF_WORKSPACE: ${{ inputs.workspace_name }}
          TF_VAR_container_version: ${{ inputs.version_tag }}
          TF_VAR_pagerduty_api_key: ${{ secrets.pagerduty_api_key }}
        run: |
          terraform workspace show
          echo "plan_summary=$(terraform plan -var public_access_enabled=${{ inputs.public_access_enabled }} -no-color -lock-timeout=300s -input=false -parallelism=30 | grep -ioE 'Plan: [[:digit:]]+ to add, [[:digit:]]+ to change, [[:digit:]]+ to destroy|No changes. Your infrastructure matches the configuration.')" >> $GITHUB_OUTPUT
          terraform plan -var public_access_enabled=${{ inputs.public_access_enabled }} -lock-timeout=300s -input=false -parallelism=30
        working-directory: ./terraform/environment

      - uses: actions/github-script@v6
        name: Add plan summary to PR comment
        if: github.workflow == '[Workflow] PR'
        with:
          github-token: ${{ secrets.github_access_token }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('PR Environment Terraform Plan Summary')
            })

            const output = `### PR Environment Terraform Plan Summary
            \n
            ${{ steps.terraform_plan.outputs.plan_summary }}`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Protect environment workspace
        if: github.workflow == '[Workflow] PR'
        env:
          TF_WORKSPACE: ${{ inputs.workspace_name }}
          TF_VAR_container_version: ${{ inputs.version_tag }}
        run: |
          wget https://github.com/TomTucka/terraform-workspace-manager/releases/download/v0.3.1/terraform-workspace-manager_Linux_x86_64.tar.gz -O $HOME/terraform-workspace-manager.tar.gz
          sudo tar -xvf $HOME/terraform-workspace-manager.tar.gz -C /usr/local/bin
          sudo chmod +x /usr/local/bin/terraform-workspace-manager
          terraform-workspace-manager -register-workspace=$TF_WORKSPACE -time-to-protect=24 -aws-account-id=653761790766 -aws-iam-role=modernising-lpa-ci
        working-directory: ./terraform/environment

      - name: Terraform Apply
        env:
          TF_WORKSPACE: ${{ inputs.workspace_name }}
          TF_VAR_container_version: ${{ inputs.version_tag }}
          TF_VAR_pagerduty_api_key: ${{ secrets.pagerduty_api_key }}
        run: |
          terraform apply -var public_access_enabled=${{ inputs.public_access_enabled }} -lock-timeout=300s -input=false -auto-approve -parallelism=30
        working-directory: ./terraform/environment

      - name: Terraform Outputs
        id: terraform_outputs
        env:
          TF_WORKSPACE: ${{ inputs.workspace_name }}
          TF_VAR_container_version: ${{ inputs.version_tag }}
          TF_VAR_pagerduty_api_key: ${{ secrets.pagerduty_api_key }}
        run: |
          echo "workspace_name=$(terraform output -raw workspace_name)" >> $GITHUB_OUTPUT
          echo "container_version=$(terraform output -raw container_version)" >> $GITHUB_OUTPUT
          echo "url=$(terraform output -raw app_fqdn)" >> $GITHUB_OUTPUT
          echo "environment_config_json=$(terraform output environment_config_json)" >> $GITHUB_OUTPUT
        working-directory: ./terraform/environment
