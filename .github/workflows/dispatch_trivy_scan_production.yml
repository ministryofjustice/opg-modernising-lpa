name: "[WD] Scan production containers for vulnerabilities"

on:
  workflow_dispatch:

defaults:
  run:
    shell: bash

permissions:
  id-token: write


jobs:
  pull_tags:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::311462405659:role/modernising-lpa-github-actions-ssm-get-parameter
          role-duration-seconds: 900
          role-session-name: GithubActionsSSMGetParameter
      - name: Pull production tag
        id: pull_tag
        run: |
          key="/modernising-lpa/container-version/production"
          value=$(aws ssm get-parameter --name "$key" --query 'Parameter.Value' --output text)
          echo "Using $key: $value"
          echo "tag=${value}" >> $GITHUB_OUTPUT
          echo "env=${key}" >> $GITHUB_OUTPUT
    outputs:
      docker_tag: ${{ steps.pull_tag.outputs.tag }}
      tag_from: ${{ steps.pull_tag.outputs.env }}

  docker_build_scan_push:
    needs: pull_tags
    strategy:
      fail-fast: false
      matrix:
        include:
          - ecr_repository: modernising-lpa/app
            name: app
            path: ./docker/mlpa/Dockerfile
            trivyignores: ./docker/mlpa/.trivyignore.yaml
            platforms: linux/amd64
          - ecr_repository: modernising-lpa/create-s3-batch-replication-job
            name: create-s3-batch-replication-job
            path: ./docker/create-s3-replication-job/Dockerfile
            trivyignores: ./docker/create-s3-replication-job/.trivyignore.yaml
            platforms: linux/amd64
          - ecr_repository: modernising-lpa/event-received
            name: event-received
            path: ./docker/event-received/Dockerfile
            trivyignores: ./docker/event-received/.trivyignore.yaml
            platforms: linux/amd64
          - ecr_repository: modernising-lpa/schedule-runner
            name: schedule-runner
            path: ./docker/schedule-runner/Dockerfile
            trivyignores: ./docker/schedule-runner/.trivyignore.yaml
            platforms: linux/amd64

    runs-on: ubuntu-latest
    name: ${{ matrix.ecr_repository }}
    steps:
      - name: Run Against Image/Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::311462405659:role/modernising-lpa-github-actions-image-scan
          role-duration-seconds: 900
          role-session-name: GithubActionsECRPullMLPAB
      - name: ECR Login
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1
        with:
          mask-password: true
          registries: 311462405659
      - uses: actions/checkout@v4
      - name: Trivy Image Vulnerability Scanner for ${{ matrix.ecr_repository }}
        id: trivy_scan
        uses: aquasecurity/trivy-action@0.29.0
        env:
          TRIVY_DB_REPOSITORY: ${{ steps.login_ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: ${{ steps.login_ecr.outputs.registry }}/trivy-db-public-ecr/aquasecurity/trivy-java-db:1
          TRIVY_DISABLE_VEX_NOTICE: true
          TRIVY_IGNOREFILE: ${{ matrix.trivyignores }}
        with:
          scan-type: 'image'
          scanners: 'vuln'
          image-ref: ${{ steps.login_ecr.outputs.registry }}/${{ matrix.ecr_repository }}:${{ needs.pull_tags.outputs.docker_tag }}
          severity: 'HIGH,CRITICAL'
          format: 'table'
          output: 'trivy-results.txt'
          exit-code: 0
      - name: Publish Trivy Output to Summary
        run: |
          if [[ -s trivy-results.txt ]]; then
            {
              echo "### Security Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```text'
              cat trivy-results.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi
      - name: Output run URL
        id: get_run
        run: echo "url=$(gh run --repo ${{ github.repository }} view ${{ github.run_id }} --json jobs --jq '.jobs[] | select(.name == "${{ github.job }}") | .url') >> GITHUB_OUTPUT
      - name: Post to a Slack channel
        if: ${{ hashFiles('trivy-results.txt') != '' }}
        id: slack
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: opg-mlpa-dev
            text: "Production Image Scan Findings"
            blocks:
              - type: "header"
                text:
                  type: "plain_text"
                  text: "Production Image Scan Findings"
              - type: "section"
                text:
                  type: "plain_text"
                  text: ${{ steps.get_run.url}}
